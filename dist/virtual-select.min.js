/*!
 * Virtual Select v1.0.6
 * https://sa-si-dev.github.io/virtual-select
 * Licensed under MIT (https://github.com/sa-si-dev/virtual-select/blob/master/LICENSE)
 */(()=>{"use strict";var e={"./src/utils/dom-utils.js":
/*!********************************!*\
  !*** ./src/utils/dom-utils.js ***!
  \********************************/(e,t,i)=>{i.r(t),i.d(t,{DomUtils:()=>r});var o=i(/*! ./index */"./src/utils/index.js");function s(e){return s="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s(e)}function n(e){return function(e){if(Array.isArray(e))return l(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return l(e,t);var i=Object.prototype.toString.call(e).slice(8,-1);"Object"===i&&e.constructor&&(i=e.constructor.name);if("Map"===i||"Set"===i)return Array.from(e);if("Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return l(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(e,t){(null==t||t>e.length)&&(t=e.length);for(var i=0,o=new Array(t);i<t;i++)o[i]=e[i];return o}function a(e,t){for(var i=0;i<t.length;i++){var o=t[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,(n=o.key,l=void 0,l=function(e,t){if("object"!==s(e)||null===e)return e;var i=e[Symbol.toPrimitive];if(void 0!==i){var o=i.call(e,t||"default");if("object"!==s(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(n,"string"),"symbol"===s(l)?l:String(l)),o)}var n,l}var r=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,i,s;return t=e,s=[{key:"addClass",value:function(t,i){t&&(i=i.split(" "),e.getElements(t).forEach((function(e){var t;(t=e.classList).add.apply(t,n(i))})))}},{key:"removeClass",value:function(t,i){t&&(i=i.split(" "),e.getElements(t).forEach((function(e){var t;(t=e.classList).remove.apply(t,n(i))})))}},{key:"toggleClass",value:function(t,i,o){var s;if(t)return void 0!==o&&(o=Boolean(o)),e.getElements(t).forEach((function(e){s=e.classList.toggle(i,o)})),s}},{key:"hasClass",value:function(e,t){return!!e&&e.classList.contains(t)}},{key:"hasEllipsis",value:function(e){return!!e&&e.scrollWidth>e.offsetWidth}},{key:"getData",value:function(e,t,i){if(e){var o=e?e.dataset[t]:"";return"number"===i&&(o=parseFloat(o)||0),o}}},{key:"setData",value:function(e,t,i){e&&(e.dataset[t]=i)}},{key:"setAttr",value:function(e,t,i){e&&e.setAttribute(t,i)}},{key:"setAttrFromEle",value:function(e,t,i,o){var s={};i.forEach((function(t){s[t]=e.getAttribute(t)})),i.forEach((function(e){var i=s[e];(i||-1!==o.indexOf(e)&&""===i)&&t.setAttribute(e,i)}))}},{key:"setStyle",value:function(e,t,i){e&&(e.style[t]=i)}},{key:"setStyles",value:function(e,t){e&&t&&Object.keys(t).forEach((function(i){e.style[i]=t[i]}))}},{key:"getElements",value:function(e){if(e)return void 0===e.forEach&&(e=[e]),e}},{key:"addEvent",value:function(t,i,s){t&&(i=o.Utils.removeArrayEmpty(i.split(" "))).forEach((function(i){(t=e.getElements(t)).forEach((function(e){e.addEventListener(i,s)}))}))}},{key:"dispatchEvent",value:function(t,i){var o=arguments.length>2&&void 0!==arguments[2]&&arguments[2];t&&(t=e.getElements(t),setTimeout((function(){t.forEach((function(e){e.dispatchEvent(new CustomEvent(i,{bubbles:o}))}))}),0))}},{key:"getAttributesText",value:function(e){var t="";if(!e)return t;for(var i in e){var o=e[i];void 0!==o&&(t+=" ".concat(i,'="').concat(o,'" '))}return t}},{key:"getStyleText",value:function(e,t){var i="";for(var o in e)i+="".concat(o,": ").concat(e[o],";");return i&&!t&&(i='style="'.concat(i,'"')),i}},{key:"getMoreVisibleSides",value:function(e){if(!e)return{};var t=e.getBoundingClientRect(),i=window.innerWidth,o=window.innerHeight,s=t.left,n=t.top;return{horizontal:s>i-s-t.width?"left":"right",vertical:n>o-n-t.height?"top":"bottom"}}}],(i=null)&&a(t.prototype,i),s&&a(t,s),Object.defineProperty(t,"prototype",{writable:!1}),e}()},"./src/utils/index.js":
/*!****************************!*\
  !*** ./src/utils/index.js ***!
  \****************************/(e,t,i)=>{i.r(t),i.d(t,{DomUtils:()=>s.DomUtils,Utils:()=>o.Utils});var o=i(/*! ./utils */"./src/utils/utils.js"),s=i(/*! ./dom-utils */"./src/utils/dom-utils.js")},"./src/utils/utils.js":
/*!****************************!*\
  !*** ./src/utils/utils.js ***!
  \****************************/(e,t,i)=>{function o(e){return function(e){if(Array.isArray(e))return s(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(!e)return;if("string"==typeof e)return s(e,t);var i=Object.prototype.toString.call(e).slice(8,-1);"Object"===i&&e.constructor&&(i=e.constructor.name);if("Map"===i||"Set"===i)return Array.from(e);if("Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return s(e,t)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(e,t){(null==t||t>e.length)&&(t=e.length);for(var i=0,o=new Array(t);i<t;i++)o[i]=e[i];return o}function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}function l(e,t){for(var i=0;i<t.length;i++){var o=t[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,(s=o.key,l=void 0,l=function(e,t){if("object"!==n(e)||null===e)return e;var i=e[Symbol.toPrimitive];if(void 0!==i){var o=i.call(e,t||"default");if("object"!==n(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===t?String:Number)(e)}(s,"string"),"symbol"===n(l)?l:String(l)),o)}var s,l}i.r(t),i.d(t,{Utils:()=>a});var a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}var t,i,s;return t=e,s=[{key:"getString",value:function(e){return null!=e||0===e?e.toString():""}},{key:"convertToBoolean",value:function(e){return e=!0===e||"true"===e||!1!==e&&"false"!==e&&arguments.length>1&&void 0!==arguments[1]&&arguments[1]}},{key:"isEmpty",value:function(e){var t=!1;return e?Array.isArray(e)?0===e.length&&(t=!0):"object"===n(e)&&0===Object.keys(e).length&&(t=!0):t=!0,t}},{key:"isNotEmpty",value:function(e){return!this.isEmpty(e)}},{key:"removeItemFromArray",value:function(e,t,i){if(!Array.isArray(e)||!e.length)return e;i&&(e=o(e));var s=e.indexOf(t);return-1!==s&&e.splice(s,1),e}},{key:"removeArrayEmpty",value:function(e){return Array.isArray(e)&&e.length?e.filter((function(e){return!!e})):[]}},{key:"generateUUID",value:function(){return([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,(function(e){return(e^crypto.getRandomValues(new Uint8Array(1))[0]&15>>e/4).toString(16)}))}}],(i=null)&&l(t.prototype,i),s&&l(t,s),Object.defineProperty(t,"prototype",{writable:!1}),e}()}},t={};function i(o){var s=t[o];if(void 0!==s)return s.exports;var n=t[o]={exports:{}};return e[o](n,n.exports,i),n.exports}i.d=(e,t)=>{for(var o in t)i.o(t,o)&&!i.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var o={};(()=>{
/*!*******************************!*\
  !*** ./src/virtual-select.js ***!
  \*******************************/
i.r(o),i.d(o,{VirtualSelect:()=>d});var e=i(/*! ./utils */"./src/utils/index.js");function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},t(e)}function s(e,t,i){return(t=u(t))in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function n(e){return function(e){if(Array.isArray(e))return r(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||a(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function l(e,t){var i="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!i){if(Array.isArray(e)||(i=a(e))||t&&e&&"number"==typeof e.length){i&&(e=i);var o=0,s=function(){};return{s,n:function(){return o>=e.length?{done:!0}:{done:!1,value:e[o++]}},e:function(e){throw e},f:s}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var n,l=!0,r=!1;return{s:function(){i=i.call(e)},n:function(){var e=i.next();return l=e.done,e},e:function(e){r=!0,n=e},f:function(){try{l||null==i.return||i.return()}finally{if(r)throw n}}}}function a(e,t){if(e){if("string"==typeof e)return r(e,t);var i=Object.prototype.toString.call(e).slice(8,-1);return"Object"===i&&e.constructor&&(i=e.constructor.name),"Map"===i||"Set"===i?Array.from(e):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?r(e,t):void 0}}function r(e,t){(null==t||t>e.length)&&(t=e.length);for(var i=0,o=new Array(t);i<t;i++)o[i]=e[i];return o}function c(e,t){for(var i=0;i<t.length;i++){var o=t[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,u(o.key),o)}}function u(e){var i=function(e,i){if("object"!==t(e)||null===e)return e;var o=e[Symbol.toPrimitive];if(void 0!==o){var s=o.call(e,i||"default");if("object"!==t(s))return s;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===i?String:Number)(e)}(e,"string");return"symbol"===t(i)?i:String(i)}var p="{#virtual-select-none-option#}",h={13:"onEnterPress",27:"onEscPress",38:"onUpArrowPress",40:"onDownArrowPress"},d=function(){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);try{this.setProps(e),this.setDisabledOptions(e.disabledOptions),this.setOptions(e.options),this.render()}catch(e){console.warn("Couldn't initiate Virtual Select"),console.error(e)}}var i,o,a;return i=t,o=[{key:"render",value:function(){var t=this;if(this.$ele){var i="vscomp-wrapper",o=this.getTooltipAttrText("",!this.multiple,!0),s=this.getTooltipAttrText("Clear"),n={"z-index":this.zIndex},l=function(){var e="";return t.additionalClasses&&(e+=" "+t.additionalClasses),t.multiple&&(e+=" multiple",t.disableSelectAll||(e+=" has-select-all")),"top"===t.position&&(e+=" position-top"),t.hideClearButton||(e+=" has-clear-button"),t.keepAlwaysOpen?e+=" keep-always-open opened":e+=" closed",t.showAsPopup?e+=" show-as-popup":t.dropboxWidth&&(n.width=t.dropboxWidth),t.hasSearch&&(e+=" has-search-input"),e};i+=l(),this.guid=e.Utils.generateUUID();var a='<div id="vs-'.concat(this.guid,'" class="vscomp-dropbox-container" ').concat(e.DomUtils.getStyleText(n),'>\n      <div class="vscomp-dropbox">\n        <div class="vscomp-search-wrapper"></div>\n\n        <div class="vscomp-options-container">\n          <div class="vscomp-options-loader"></div>\n\n          <div class="vscomp-options-list">\n            <div class="vscomp-options"></div>\n          </div>\n        </div>\n\n        <div class="vscomp-no-options">').concat(this.noOptionsText,'</div>\n        <div class="vscomp-no-search-results">').concat(this.noSearchResultsText,'</div>\n\n        <span class="vscomp-dropbox-close-button"><i class="vscomp-clear-icon"></i></span>\n      </div>\n    </div>'),r='<div class="'.concat(i,'" tabindex="0">\n        <input type="hidden" name="').concat(this.name,'" class="vscomp-hidden-input">\n\n        <div class="vscomp-toggle-button">\n          <div class="vscomp-value" ').concat(o,">\n            ").concat(this.placeholder,'\n          </div>\n\n          <div class="vscomp-arrow"></div>\n\n          <div class="vscomp-clear-button toggle-button-child" ').concat(s,'>\n            <i class="vscomp-clear-icon"></i>\n          </div>\n        </div>\n\n        ').concat(this.keepAlwaysOpen||!this.appendToBody?a:"","\n\n      </div>");if(this.$ele.innerHTML=r,this.$body=document.querySelector("body"),this.$wrapper=this.$ele.querySelector(".vscomp-wrapper"),this.$toggleButton=this.$ele.querySelector(".vscomp-toggle-button"),this.$clearButton=this.$ele.querySelector(".vscomp-clear-button"),this.$dropboxCloseButton=this.$ele.querySelector(".vscomp-dropbox-close-button"),!this.keepAlwaysOpen&&this.appendToBody){this.$body.append(document.createRange().createContextualFragment(a)),this.$dropboxContainer=document.querySelector("#vs-".concat(this.guid,".vscomp-dropbox-container")),this.$dropboxEl=document.querySelector("#vs-".concat(this.guid));var c="vscomp-wrapper-body";c+=l(),e.DomUtils.addClass(this.$dropboxEl,"".concat(c))}else this.$dropboxContainer=this.$ele.querySelector(".vscomp-dropbox-container"),this.$dropboxEl=this.$ele;this.$search=this.$dropboxEl.querySelector(".vscomp-search-wrapper"),this.$optionsContainer=this.$dropboxEl.querySelector(".vscomp-options-container"),this.$optionsList=this.$dropboxEl.querySelector(".vscomp-options-list"),this.$options=this.$dropboxEl.querySelector(".vscomp-options"),this.$valueText=this.$ele.querySelector(".vscomp-value"),this.$hiddenInput=this.$ele.querySelector(".vscomp-hidden-input"),this.$noOptions=this.$dropboxEl.querySelector(".vscomp-no-options"),this.$noSearchResults=this.$dropboxEl.querySelector(".vscomp-no-search-results"),this.afterRenderWrapper()}}},{key:"renderOptions",value:function(){var t,i=this,o="",s=this.getVisibleOptions(),n="",l="",a=!(!this.markSearchResults||!this.searchValue),r=e.DomUtils.getStyleText({height:this.optionHeight+"px"});if(a&&(t=new RegExp("(".concat(this.searchValue,")"),"gi")),this.multiple&&(n='<span class="checkbox-icon"></span>'),this.allowNewOption){var c=this.getTooltipAttrText("New Option");l='<span class="vscomp-new-option-icon" '.concat(c,"></span>")}s.forEach((function(e){var s=e.label,c="vscomp-option",u=i.getTooltipAttrText("",!0),h=n,d="",v="";e.isFocused&&(c+=" focused"),e.isDisabled&&(c+=" disabled"),e.isGroupTitle?(c+=" group-title",h=""):e.isSelected&&(c+=" selected"),e.isGroupOption&&(c+=" group-option"),e.description&&(v='<div class="vscomp-option-description" '.concat(u,">").concat(e.description,"</div>")),e.isCurrentNew?(c+=" current-new",d+=l):a&&!e.isGroupTitle&&(s=s.replace(t,"<mark>$1</mark>")),o+='<div class="'.concat(c,'" data-value="').concat(e.value,'" data-index="').concat(e.index,'" data-visible-index="').concat(e.visibleIndex,'" ').concat(r,">\n          ").concat(h,'\n          <span title="').concat(s,'" class="vscomp-option-text ').concat(e.value===p?"none":"",'" ').concat(u,">\n            ").concat(s,"\n          </span>\n          ").concat(v,"\n          ").concat(d,"\n        </div>")})),this.$options.innerHTML=o;var u=!this.options.length,h=!u&&!s.length;this.allowNewOption||(e.DomUtils.toggleClass(this.$wrapper,"has-no-search-results",h),this.appendToBody&&e.DomUtils.toggleClass(this.$dropboxEl,"has-no-search-results",h)),e.DomUtils.toggleClass(this.$wrapper,"has-no-options",u),this.setOptionsPosition(),this.setOptionsTooltip()}},{key:"renderSearch",value:function(){if(this.hasSearchContainer){var e="",t="";this.hasSearch&&(t=' <div class="vscomp-search-container">\n          <input type="text" class="vscomp-search-input" placeholder="'.concat(this.searchPlaceholder,'">\n          <span class="vscomp-search-clear">&times;</span>\n        </div>')),this.multiple&&!this.disableSelectAll&&(e='<div class="vs-comp-select-all-container">\n        <span class="vscomp-toggle-all-button">\n          <span class="checkbox-icon vscomp-toggle-all-checkbox"></span>\n          <span class="vscomp-toggle-all-label">'.concat(this.selectAllText,"</span>\n        </span>\n        </div>")),this.hasSearch&&this.multiple&&this.addSeachToSelection&&(e+='<div class="vs-comp-select-add-search-container">\n        <span class="vscomp-toggle-add-search-button">\n          <span class="checkbox-icon vscomp-toggle-add-search-checkbox"></span>\n          <span class="vscomp-toggle-add-search-label">'.concat(this.addSearchToSelectionText,"</span>\n        </span>\n        </div>"));var i="".concat(t).concat(e);this.$search.innerHTML=i,this.$searchInput=this.$dropboxEl.querySelector(".vscomp-search-input"),this.$searchClear=this.$dropboxEl.querySelector(".vscomp-search-clear"),this.$toggleAllButton=this.$dropboxEl.querySelector(".vscomp-toggle-all-button"),this.$toggleAllCheckbox=this.$dropboxEl.querySelector(".vscomp-toggle-all-checkbox"),this.$toggleAddSeachContainer=this.$dropboxEl.querySelector(".vs-comp-select-add-search-container"),this.$toggleAddSeachButton=this.$dropboxEl.querySelector(".vscomp-toggle-add-search-button"),this.$toggleAddSeachCheckbox=this.$dropboxEl.querySelector(".vscomp-toggle-add-search-checkbox"),this.addEvent(this.$searchInput,"keyup change","onSearch"),this.addEvent(this.$searchClear,"click","onSearchClear"),this.addEvent(this.$toggleAllButton,"click","onToggleAllOptions"),this.addEvent(this.$toggleAddSeachButton,"click","onAddSeachToSelection")}}},{key:"addEvents",value:function(){this.addEvent(document,"click","onDocumentClick"),this.addEvent(this.$wrapper,"keydown","onKeyDown"),this.addEvent(this.$toggleButton,"click","onToggleButtonClick"),this.addEvent(this.$clearButton,"click","onClearButtonClick"),this.addEvent(this.$dropboxContainer,"click","onDropboxContainerClick"),this.addEvent(this.$dropboxCloseButton,"click","onDropboxCloseButtonClick"),this.addEvent(this.$optionsContainer,"scroll","onOptionsScroll"),this.addEvent(this.$options,"click","onOptionsClick"),this.addEvent(this.$options,"mouseover","onOptionsMouseOver"),this.addEvent(this.$dropboxContainer,"mouseleave","onOptionsMouseLeave"),this.addEvent(this.$options,"touchmove","onOptionsTouchMove")}},{key:"onOptionsMouseLeave",value:function(){this.removeOptionFocus()}},{key:"addEvent",value:function(t,i,o){var s=this;t&&(i=e.Utils.removeArrayEmpty(i.split(" "))).forEach((function(i){var n="".concat(o,"-").concat(i),l=s.events[n];l||(l=s[o].bind(s),s.events[n]=l),(t=e.DomUtils.getElements(t)).forEach((function(e){e.addEventListener(i,l)}))}))}},{key:"dispatchEvent",value:function(t,i){t&&(t=e.DomUtils.getElements(t),setTimeout((function(){t.forEach((function(e){e.dispatchEvent(new Event(i,{bubbles:!0}))}))}),0))}},{key:"onDocumentClick",value:function(e){this.appendToBody&&this.multiple&&this.isOpened()&&e.target.closest("#vs-".concat(this.guid))||e.target.closest(".vscomp-wrapper")!==this.$wrapper&&this.closeDropbox()}},{key:"onKeyDown",value:function(e){var t=e.which||e.keyCode,i=h[t];i&&this[i](e)}},{key:"onEnterPress",value:function(){this.isOpened()?this.selectFocusedOption():this.openDropbox()}},{key:"onEscPress",value:function(){this.isOpened()&&this.closeDropbox()}},{key:"onDownArrowPress",value:function(e){e.preventDefault(),this.isOpened()?this.focusOption("next"):this.openDropbox()}},{key:"onUpArrowPress",value:function(e){e.preventDefault(),this.isOpened()?this.focusOption("previous"):this.openDropbox()}},{key:"onToggleButtonClick",value:function(e){e.target.closest(".toggle-button-child")||this.toggleDropbox()}},{key:"onClearButtonClick",value:function(){this.reset()}},{key:"onOptionsScroll",value:function(){this.setVisibleOptions()}},{key:"onOptionsClick",value:function(e){if(this.selectOption(e.target.closest(".vscomp-option:not(.disabled):not(.group-title)")),this.multiple&&this.showSelectedOptionsFirst)return e.stopPropagation(),!1}},{key:"onDropboxContainerClick",value:function(e){e.target.closest(".vscomp-dropbox")||this.closeDropbox()}},{key:"onDropboxCloseButtonClick",value:function(){this.closeDropbox()}},{key:"onOptionsMouseOver",value:function(e){var t=e.target.closest(".vscomp-option:not(.disabled):not(.group-title)");t&&this.isOpened()&&this.focusOption(null,t)}},{key:"onOptionsTouchMove",value:function(){this.removeOptionFocus()}},{key:"onSearch",value:function(e){e.stopPropagation(),this.setSearchValue(e.target.value,!0)}},{key:"onSearchClear",value:function(){this.setSearchValue(""),this.focusSearchInput()}},{key:"onToggleAllOptions",value:function(){this.toggleAllOptions()}},{key:"onAddSeachToSelection",value:function(){if(this.multiple&&this.searchValue){var t=!e.DomUtils.hasClass(this.$toggleAddSeachCheckbox,"checked"),i=this.selectedValues,o=this.options.filter((function(e){if(!(e.isDisabled||e.isCurrentNew||e.isGroupTitle))return e.isVisible}));if(t){var s,n=l(o);try{for(n.s();!(s=n.n()).done;){var a=s.value;-1===i.indexOf(a.value)&&(a.isSelected=!0,i.push(a.value))}}catch(e){n.e(e)}finally{n.f()}}else{var r,c=l(o);try{for(c.s();!(r=c.n()).done;){var u=r.value,p=i.indexOf(u.value);-1!==p&&(u.isSelected=!1,i.splice(p,1))}}catch(e){c.e(e)}finally{c.f()}}this.toggleAddSearchClass(t),this.toggleAllOptionsClass(t),this.setValue(i,[],!0),this.renderOptions()}}},{key:"onResize",value:function(){this.appendToBody?this.isOpened()&&this.closeDropbox(!0):this.setOptionsContainerHeight(!0)}},{key:"beforeValueSet",value:function(e){this.toggleAllOptionsClass(!e&&void 0)}},{key:"beforeSelectNewValue",value:function(){var e=this,t=this.getNewOption(),i=t.index;this.newValues.push(t.value),this.setOptionProp(i,"isCurrentNew",!1),this.setOptionProp(i,"isNew",!0),setTimeout((function(){e.setSearchValue(""),e.focusSearchInput()}),0)}},{key:"afterRenderWrapper",value:function(){this.$ele.setAttribute("name",this.name),e.DomUtils.addClass(this.$ele,"vscomp-ele"),this.renderSearch(),this.setOptionsHeight(),this.setVisibleOptions(),this.setOptionsContainerHeight(),this.addEvents(),this.setMethods(),void 0!==this.initialSelectedValue&&null!==this.initialSelectedValue?this.setValueMethod(this.initialSelectedValue,this.silentInitialValueSet):this.autoSelectFirstOption&&this.visibleOptions.length&&this.setValueMethod(this.visibleOptions[0].value,this.silentInitialValueSet)}},{key:"afterSetOptionsContainerHeight",value:function(e){e&&this.showAsPopup&&this.setVisibleOptions()}},{key:"afterSetSearchValue",value:function(){this.hasServerSearch?this.serverSearch():this.setVisibleOptionsCount(),this.selectAllOnlyVisible&&this.toggleAllOptionsClass(),this.addSeachToSelection&&this.toggleAddSearchClass()}},{key:"afterSetVisibleOptionsCount",value:function(){this.scrollToTop(),this.setOptionsHeight(),this.setVisibleOptions()}},{key:"afterValueSet",value:function(){this.scrollToTop(),this.setSearchValue(""),this.renderOptions()}},{key:"afterSetOptions",value:function(e){var t=this.searchValue;e&&(this.isAllSelected?this.toggleAllOptions(this.isAllSelected):this.setValueMethod(this.selectedValues,this.silentInitialValueSet),this.search&&this.setSearchValue(t,!1,!0)),this.setOptionsHeight(),this.setVisibleOptions(),e||this.reset()}},{key:"setProps",value:function(t){t=this.setDefaultProps(t),this.setPropsFromElementAttr(t);var i=e.Utils.convertToBoolean;this.$ele=t.ele,this.valueKey=t.valueKey,this.labelKey=t.labelKey,this.descriptionKey=t.descriptionKey,this.aliasKey=t.aliasKey,this.optionHeightText=t.optionHeight,this.optionHeight=parseFloat(this.optionHeightText),this.multiple=i(t.multiple),this.hasSearch=i(t.search),this.hideClearButton=i(t.hideClearButton),this.autoSelectFirstOption=i(t.autoSelectFirstOption),this.hasOptionDescription=i(t.hasOptionDescription),this.silentInitialValueSet=i(t.silentInitialValueSet),this.allowNewOption=i(t.allowNewOption),this.markSearchResults=i(t.markSearchResults),this.showSelectedOptionsFirst=i(t.showSelectedOptionsFirst),this.disableSelectAll=i(t.disableSelectAll),this.keepAlwaysOpen=i(t.keepAlwaysOpen),this.showDropboxAsPopup=i(t.showDropboxAsPopup),this.selectAllOnlyVisible=i(t.selectAllOnlyVisible),this.noOptionsText=t.noOptionsText,this.noSearchResultsText=t.noSearchResultsText,this.selectAllText=t.selectAllText,this.addSearchToSelectionText=t.addSearchToSelectionText,this.placeholder=t.placeholder,this.position=t.position,this.dropboxWidth=t.dropboxWidth,this.tooltipFontSize=t.tooltipFontSize,this.tooltipAlignment=t.tooltipAlignment,this.tooltipMaxWidth=t.tooltipMaxWidth,this.noOfDisplayValues=parseInt(t.noOfDisplayValues),this.zIndex=parseInt(t.zIndex),this.maxValues=parseInt(t.maxValues),this.name=t.name,this.additionalClasses=t.additionalClasses,this.initialSelectedValue=t.selectedValue,this.popupDropboxBreakpoint=t.popupDropboxBreakpoint,this.onServerSearch=t.onServerSearch,this.searchPlaceholder=t.searchPlaceholder,this.itemsSelectedMessage=t.itemsSelectedMessage,this.allowNoneOption=t.allowNoneOption,this.noneOptionText=t.noneOptionText,this.appendToBody=t.appendToBody,this.addSeachToSelection=i(t.addSeachToSelection),this.searchCallback=t.searchCallback||null,this.selectedValues=[],this.selectedIndexes=[],this.selectedOptions=[],this.newValues=[],this.events={},this.tooltipEnterDelay=200,this.transitionDuration=250,this.searchValue="",this.searchValueOriginal="",this.isAllSelected=!1,(void 0===t.search&&this.multiple||this.allowNewOption)&&(this.hasSearch=!0),this.maxValues&&(this.disableSelectAll=!0),this.hasServerSearch="function"==typeof this.onServerSearch,this.showAsPopup=this.showDropboxAsPopup&&!this.keepAlwaysOpen&&window.innerWidth<=parseFloat(this.popupDropboxBreakpoint),this.hasSearchContainer=this.hasSearch||this.multiple&&!this.disableSelectAll,this.optionsCount=this.getOptionsCount(t.optionsCount),this.halfOptionsCount=Math.ceil(this.optionsCount/2),this.optionsHeight=this.getOptionsHeight()}},{key:"setDefaultProps",value:function(e){var t={valueKey:"value",labelKey:"label",descriptionKey:"description",aliasKey:"alias",optionsCount:5,noOfDisplayValues:50,optionHeight:"40px",multiple:!1,hideClearButton:!1,autoSelectFirstOption:!1,hasOptionDescription:!1,silentInitialValueSet:!1,disableSelectAll:!1,noOptionsText:"No options found",noSearchResultsText:"No results found",selectAllText:"Select All",placeholder:"Select",position:"auto",zIndex:1,allowNewOption:!1,markSearchResults:!1,tooltipFontSize:"14px",tooltipAlignment:"center",tooltipMaxWidth:"300px",showSelectedOptionsFirst:!1,name:"",additionalClasses:"",keepAlwaysOpen:!1,maxValues:0,showDropboxAsPopup:!0,popupDropboxBreakpoint:"576px",searchPlaceholder:"Search...",itemsSelectedMessage:"selected",allowNoneOption:!1,noneOptionText:"None",appendToBody:!1,selectAllOnlyVisible:!0,addSeachToSelection:!1,addSearchToSelectionText:"Add to selection"};return e.hasOptionDescription&&(t.optionsCount=4,t.optionHeight="60px"),Object.assign(t,e)}},{key:"setPropsFromElementAttr",value:function(e){var t=e.ele,i={multiple:"multiple",placeholder:"placeholder",name:"name","data-value-key":"valueKey","data-label-key":"labelKey","data-description-key":"descriptionKey","data-alias-key":"aliasKey","data-search":"search","data-hide-clear-button":"hideClearButton","data-auto-select-first-option":"autoSelectFirstOption","data-has-option-description":"hasOptionDescription","data-options-count":"optionsCount","data-option-height":"optionHeight","data-position":"position","data-no-options-text":"noOptionsText","data-no-search-results-text":"noSearchResultsText","data-select-all-text":"selectAllText","data-silent-initial-value-set":"silentInitialValueSet","data-dropbox-width":"dropboxWidth","data-z-index":"zIndex","data-no-of-display-values":"noOfDisplayValues","data-allow-new-option":"allowNewOption","data-mark-search-results":"markSearchResults","data-tooltip-font-size":"tooltipFontSize","data-tooltip-alignment":"tooltipAlignment","data-tooltip-max-width":"tooltipMaxWidth","data-show-selected-options-first":"showSelectedOptionsFirst","data-disable-select-all":"disableSelectAll","data-keep-always-open":"keepAlwaysOpen","data-max-values":"maxValues","data-additional-classes":"additionalClasses","data-show-dropbox-as-popup":"showDropboxAsPopup","data-popup-dropbox-breakpoint":"popupDropboxBreakpoint","data-select-all-only-visible":"selectAllOnlyVisible"};for(var o in i){var s=t.getAttribute(o);"multiple"!==o||""!==s&&"true"!==s||(s=!0),s&&(e[i[o]]=s)}}},{key:"setMethods",value:function(){var e=this.$ele;e.virtualSelect=this,e.value=this.multiple?[]:"",e.reset=t.reset,e.setValue=t.setValueMethod,e.setOptions=t.setOptionsMethod,e.setDisabledOptions=t.setDisabledOptionsMethod,e.toggleSelectAll=t.toggleSelectAll,e.isAllSelected=t.isAllSelected,e.addOption=t.addOptionMethod,e.getNewValue=t.getNewValueMethod,e.getDisplayValue=t.getDisplayValueMethod,e.open=t.openMethod,e.close=t.closeMethod,e.setSearchValue=t.setSearchValueMethod}},{key:"setValueMethod",value:function(e,t){Array.isArray(e)||(e=[e]),e=e.map((function(e){return e||0==e?e.toString():""}));var i,o=[],s=[],n=new Set([]),a=new Set(e),r=l(this.options);try{for(r.s();!(i=r.n()).done;){var c=i.value;if(!a.has(c.value)||c.isDisabled||c.isGroupTitle)c.isSelected=!1;else{if(n.has(c.value)&&this.multiple)break;if(c.isSelected=!0,n.add(c.value),o.push(c.value),s.push(c.index),!this.multiple)break}}}catch(e){r.e(e)}finally{r.f()}this.multiple||(o=o[0],s=s[0]),this.beforeValueSet(),this.setValue(o,s,!t),this.afterValueSet()}},{key:"setOptionsMethod",value:function(e,t){var i=e!=this.options;this.setOptions(e),this.afterSetOptions(t,i)}},{key:"setDisabledOptionsMethod",value:function(e){this.setDisabledOptions(e,!0),this.setValueMethod(null),this.setVisibleOptions()}},{key:"setDisabledOptions",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];e=e.map((function(e){return e.toString()})),this.disabledOptions=e,t&&e.length&&this.options.forEach((function(t){return t.isDisabled=-1!==e.indexOf(t.value),t}))}},{key:"setOptions",value:function(t){t||(t=[]);var i=[],o=this.disabledOptions,s=o.length,n=this.valueKey,l=this.labelKey,a=this.descriptionKey,r=this.aliasKey,c=this.hasOptionDescription,u=e.Utils.getString,h=e.Utils.convertToBoolean,d=this.getAlias,v=0,f=!1;!this.multiple&&this.allowNoneOption&&t.unshift({value:p,label:this.noneOptionText}),t.forEach((function e(t){var p=u(t[n]),y=t.options,g=!!y,m={index:v,value:p,label:u(t[l]),alias:d(t[r]),isVisible:h(t.isVisible,!0),isGroupTitle:g};if(s&&(m.isDisabled=-1!==o.indexOf(p)),t.isGroupOption&&(m.isGroupOption=!0,m.groupIndex=t.groupIndex),c&&(m.description=u(t[a])),i.push(m),v++,g){var b=m.index;f=!0,y.forEach((function(t){t.isGroupOption=!0,t.groupIndex=b,e(t)}))}})),this.options=i,this.visibleOptionsCount=i.length,this.lastOptionIndex=this.options.length-1,this.newValues=[],this.hasOptionGroup=f,this.setSortedOptions()}},{key:"setServerOptions",value:function(t){var i=this;this.setOptionsMethod(t,!0);var o=this.selectedOptions,s=this.options,n=!1;if(o.length){var l=s.map((function(e){return e.value}));n=!0,o.forEach((function(e){-1===l.indexOf(e.value)&&(e.isVisible=!1,s.push(e))})),this.setOptionsMethod(s,!0)}this.allowNewOption&&this.searchValue&&(s.some((function(e){return e.label.toLowerCase()===i.searchValue}))||(n=!0,this.setNewOption())),n&&(this.setVisibleOptionsCount(),this.multiple&&this.toggleAllOptionsClass(),this.addSeachToSelection&&this.toggleAddSearchClass(),this.setValueText()),e.DomUtils.removeClass(this.$wrapper,"server-searching")}},{key:"setSelectedOptions",value:function(){var e=this.selectedValues;this.selectedOptions=this.options.filter((function(t){return-1!==e.indexOf(t.value)}))}},{key:"setSortedOptions",value:function(){var e=n(this.options);this.showSelectedOptionsFirst&&this.selectedValues.length&&(e=this.hasOptionGroup?this.sortOptionsGroup(e):this.sortOptions(e)),this.sortedOptions=e}},{key:"setVisibleOptions",value:function(){var e=n(this.sortedOptions),t=2*this.optionsCount,i=this.getVisibleStartIndex(),o=this.getNewOption(),s=i+t-1,l=0;o&&(o.visibleIndex=l,l++),e=e.filter((function(e){var t=!1;return e.isVisible&&!e.isCurrentNew&&(t=l>=i&&l<=s,e.visibleIndex=l,l++),t})),o&&(e=[o].concat(n(e))),this.visibleOptions=e,this.renderOptions()}},{key:"setOptionsPosition",value:function(t){void 0===t&&(t=this.getVisibleStartIndex());var i=t*this.optionHeight;this.$options.style.transform="translate3d(0, ".concat(i,"px, 0)"),e.DomUtils.setData(this.$options,"top",i)}},{key:"setOptionsTooltip",value:function(){var t=this,i=this.getVisibleOptions(),o=this.hasOptionDescription;i.forEach((function(i){var s=t.$dropboxContainer.querySelector('.vscomp-option[data-index="'.concat(i.index,'"]'));e.DomUtils.setData(s.querySelector(".vscomp-option-text"),"tooltip",i.label),o&&e.DomUtils.setData(s.querySelector(".vscomp-option-description"),"tooltip",i.description)}))}},{key:"setValue",value:function(t,i,o){t?Array.isArray(t)?this.selectedValues=n(t):this.selectedValues=[t]:this.selectedValues=[];var s=this.multiple?this.selectedValues:this.selectedValues[0]||"";this.$ele.value=s,this.$hiddenInput.value=s,void 0===i?this.selectedIndexes=[]:Array.isArray(i)?this.selectedIndexes=n(i):this.selectedIndexes=[i];var l="";if(this.multiple?l=this.selectedIndexes:null!==this.selectedIndexes[0]&&void 0!==this.selectedIndexes[0]&&(l=this.selectedIndexes[0]),this.$ele.index=l,this.$hiddenInput.index=l,this.isMaxValuesSelected=!!(this.maxValues&&this.maxValues<=this.selectedValues.length),this.setValueText(),this.selectedValues&&this.selectedValues[0]===p?e.DomUtils.removeClass(this.$wrapper,"has-value"):e.DomUtils.toggleClass(this.$wrapper,"has-value",e.Utils.isNotEmpty(this.selectedValues)),e.DomUtils.toggleClass(this.$wrapper,"max-value-selected",this.isMaxValuesSelected),o&&this.dispatchEvent(this.$ele,"change"),this.showSelectedOptionsFirst){var a=this.$optionsContainer.scrollTop;this.moveSelectedOptionsFirst(),this.$optionsContainer.scrollTop=a}}},{key:"setValueText",value:function(){var t=[],i=[],o=this.selectedValues,s=this.selectedIndexes,n=o.length,a=this.noOfDisplayValues,r=0;if(this.isAllSelected&&n>1)this.$valueText.innerHTML="".concat(n," ").concat(this.itemsSelectedMessage);else{var c,u=l(this.options);try{for(u.s();!(c=u.n()).done;){var h=c.value;if(!h.isCurrentNew){if(r>50||!this.multiple&&1===r)break;var d=h.value,v=h.label,f=h.index;if(-1!==o.indexOf(d)||-1!==s.indexOf(f)){if(r>=o.length)break;t.push(v),++r<=a&&i.push('<span class="vscomp-value-tag">'.concat(v,"</span>"))}}}}catch(e){u.e(e)}finally{u.f()}var y=n-a;y>0&&i.push('<span class="vscomp-value-tag more-value-count">+ '.concat(y," more...</span>"));var g=t.join(", ");if(""===g||o&&o[0]===p)this.$valueText.innerHTML=this.placeholder;else if(this.$valueText.innerHTML=g,this.multiple){var m=this.maxValues;if(e.DomUtils.hasEllipsis(this.$valueText)||m){var b="".concat(n);m&&(b+=" / ".concat(m)),this.$valueText.innerHTML="".concat(b," ").concat(this.itemsSelectedMessage)}else i=[]}}e.DomUtils.setData(this.$valueText,"tooltip",i.join(", "))}},{key:"setSearchValue",value:function(t,i,o){if(t!==this.searchValueOriginal||o){i||(this.$searchInput.value=t);var s=t.toLowerCase().trim();if(this.searchValue=s,this.searchValueOriginal=t,e.DomUtils.toggleClass(this.$wrapper,"has-search-value",t),this.appendToBody&&e.DomUtils.toggleClass(this.$dropboxEl,"has-search-value",t),this.hasServerSearch)this.serverSearch(s);else{var n,l=0,a=!1,r=this.isOptionVisible;this.hasOptionGroup&&(n=this.getVisibleOptionGroupsMapping(s)),this.options.forEach((function(e){if(!e.isCurrentNew){var t=r(e,s,a,n);t.isVisible&&l++,a||(a=t.hasExactOption)}})),this.allowNewOption&&(s&&!a?(this.setNewOption(),l++):this.removeNewOption()),this.visibleOptionsCount=l,this.scrollToTop(),this.setOptionsHeight(),this.setVisibleOptions(),this.afterSetSearchValue(),this.searchCallback&&this.searchCallback(s)}}}},{key:"setVisibleOptionsCount",value:function(){var e,t=0,i=!1,o=this.searchValue,s=this.showOptionsOnlyOnSearch,n=this.isOptionVisible.bind(this);this.hasOptionGroup&&(e=this.getVisibleOptionGroupsMapping(o)),this.options.forEach((function(l){var a;l.isCurrentNew||(s&&!o?(l.isVisible=!1,a={isVisible:!1,hasExactOption:!1}):a=n(l,o,i,e),a.isVisible&&t++,i||(i=a.hasExactOption))})),this.allowNewOption&&(o&&!i?(this.setNewOption(),t++):this.removeNewOption()),this.visibleOptionsCount=t,this.afterSetVisibleOptionsCount()}},{key:"setOptionProp",value:function(e,t,i){this.options[e]&&(this.options[e][t]=i)}},{key:"setOptionsHeight",value:function(){this.$optionsList.style.height=this.optionHeight*this.visibleOptionsCount+"px"}},{key:"setOptionsContainerHeight",value:function(t){var i;t?this.showAsPopup&&(this.optionsCount=this.getOptionsCount(),i=this.getOptionsHeight(),this.optionsHeight=i):(i=this.optionsHeight,this.keepAlwaysOpen&&(e.DomUtils.setStyle(this.$noOptions,"height",i),e.DomUtils.setStyle(this.$noSearchResults,"height",i))),e.DomUtils.setStyle(this.$optionsContainer,"max-height",i),this.afterSetOptionsContainerHeight(t)}},{key:"setDropboxPosition",value:function(){if("auto"===this.position){var t=e.DomUtils.getMoreVisibleSides(this.$wrapper),i=!1;if(this.dropboxWidth){var o=this.$toggleButton.getBoundingClientRect(),s=window.innerWidth,n=parseFloat(this.dropboxWidth),l=o.left+n>s,a=n>o.right;l&&!a&&(i=!0)}if(this.appendToBody){if("undefined"!=typeof screenfull&&screenfull.isFullscreen&&screenfull.element){var r=document.createDocumentFragment();r.appendChild(this.$dropboxContainer),screenfull.element.appendChild(r)}else{var c=document.createDocumentFragment();c.appendChild(this.$dropboxContainer),this.$body.appendChild(c)}var u=this.$ele.getBoundingClientRect(),p=u.left+window.scrollX,h=u.top+window.scrollY;if(this.$dropboxEl.style.width="".concat(this.dropboxWidth?parseFloat(this.dropboxWidth):u.width,"px"),this.$dropboxEl.style.left="".concat(p,"px"),"top"===t.vertical){var d=this.$dropboxContainer.getBoundingClientRect();this.$dropboxEl.style.top="".concat(h-d.height-4,"px")}else this.$dropboxEl.style.top="".concat(h+u.height+4,"px");e.DomUtils.toggleClass(this.$dropboxContainer,"position-top","top"===t.vertical),e.DomUtils.toggleClass(this.$dropboxContainer,"position-left",i)}else e.DomUtils.toggleClass(this.$wrapper,"position-top","top"===t.vertical),e.DomUtils.toggleClass(this.$wrapper,"position-left",i)}}},{key:"setNewOption",value:function(){var e=this.searchValueOriginal.trim();if(e){var t=this.getNewOption();if(t){var i=t.index;this.setOptionProp(i,"value",e),this.setOptionProp(i,"label",e)}else{var o={value:e,label:e,isCurrentNew:!0};this.addOption(o)}}}},{key:"setSelectedProp",value:function(){var e=this.selectedValues;this.options.forEach((function(t){-1!==e.indexOf(t.value)&&(t.isSelected=!0)}))}},{key:"getVisibleOptions",value:function(){return this.visibleOptions||[]}},{key:"getValue",value:function(){return this.multiple?this.selectedValues:this.selectedValues[0]}},{key:"getFirstVisibleOptionIndex",value:function(){return Math.ceil(this.$optionsContainer.scrollTop/this.optionHeight)}},{key:"getVisibleStartIndex",value:function(){var e=this.getFirstVisibleOptionIndex()-this.halfOptionsCount;return e<0&&(e=0),e}},{key:"getTooltipAttrText",value:function(t){var i=arguments.length>1&&void 0!==arguments[1]&&arguments[1],o=arguments.length>2&&void 0!==arguments[2]&&arguments[2],s={"data-tooltip":t||"","data-tooltip-enter-delay":this.tooltipEnterDelay,"data-tooltip-z-index":this.zIndex,"data-tooltip-font-size":this.tooltipFontSize,"data-tooltip-alignment":this.tooltipAlignment,"data-tooltip-max-width":this.tooltipMaxWidth,"data-tooltip-ellipsis-only":i,"data-tooltip-allow-html":o};return e.DomUtils.getAttributesText(s)}},{key:"getOptionObj",value:function(t){if(t){var i=e.Utils.getString;return{index:t.index,value:i(t.value),label:i(t.label),description:i(t.description),alias:this.getAlias(t.alias),isCurrentNew:t.isCurrentNew||!1,isVisible:!0}}}},{key:"getNewOption",value:function(){var e=this.options[this.lastOptionIndex];if(e&&e.isCurrentNew)return e}},{key:"getOptionIndex",value:function(e){var t;return e&&this.options.some((function(i){if(i.value==e)return t=i.index,!0})),t}},{key:"getNewValue",value:function(){var e=this.newValues,t=this.selectedValues.filter((function(t){return-1!==e.indexOf(t)}));return this.multiple?t:t[0]}},{key:"getAlias",value:function(e){return e=e?(e=Array.isArray(e)?e.join(","):e.toString().trim()).toLowerCase():""}},{key:"getDisplayValue",value:function(){var e,t=[],i=this.selectedValues,o=l(this.options);try{for(o.s();!(e=o.n()).done;){var s=e.value;-1!==i.indexOf(s.value)&&t.push(s.label)}}catch(e){o.e(e)}finally{o.f()}return this.multiple?t:t[0]||""}},{key:"getSelectedOptions",value:function(){var e=this.selectedValues,t=[],i=this.valueKey,o=this.labelKey;return this.options.forEach((function(n){if(-1!==e.indexOf(n.value)){var l,a=(s(l={},i,n.value),s(l,o,n.label),l);n.isNew&&(a.isNew=!0),t.push(a)}})),this.multiple?t:t[0]}},{key:"getVisibleOptionGroupsMapping",value:function(e){var t=this.options,i={},o=this.isOptionVisible;return(t=this.structureOptionGroup(t)).forEach((function(t){i[t.index]=t.options.some((function(t){return o(t,e).isVisible}))})),i}},{key:"getOptionsCount",value:function(e){if(this.showAsPopup){var t=80*window.innerHeight/100-48;this.hasSearchContainer&&(t-=40),e=Math.floor(t/this.optionHeight)}else e=parseInt(e);return e}},{key:"getOptionsHeight",value:function(){return this.optionsCount*this.optionHeight+"px"}},{key:"getSibling",value:function(t,i){var o="next"===i?"nextElementSibling":"previousElementSibling";do{t&&(t=t[o])}while(e.DomUtils.hasClass(t,"disabled")||e.DomUtils.hasClass(t,"group-title"));return t}},{key:"openDropbox",value:function(t){var i=this;this.setDropboxPosition(),e.DomUtils.removeClass(this.$wrapper,"closed"),e.DomUtils.removeClass(this.$dropboxEl,"opened"),setTimeout((function(){e.DomUtils.addClass(i.$wrapper,"opened"),e.DomUtils.addClass(i.$dropboxEl,"opened"),t||(i.moveSelectedOptionsFirst(),e.DomUtils.addClass(i.$wrapper,"focused"),i.showAsPopup?(e.DomUtils.addClass(i.$body,"vscomp-popup-active"),i.isPopupActive=!0):i.focusSearchInput(),e.DomUtils.dispatchEvent(i.$ele,"opened"))}),0)}},{key:"closeDropbox",value:function(t){var i=this;if(this.keepAlwaysOpen)this.removeOptionFocus();else{var o=t?0:this.transitionDuration;setTimeout((function(){e.DomUtils.removeClass(i.$wrapper,"opened focused"),e.DomUtils.removeClass(i.$dropboxEl,"opened focused"),i.removeOptionFocus(),t||(i.isPopupActive&&(e.DomUtils.removeClass(i.$body,"vscomp-popup-active"),i.isPopupActive=!1),e.DomUtils.dispatchEvent(i.$ele,"closed"))}),0),setTimeout((function(){e.DomUtils.addClass(i.$wrapper,"closed"),e.DomUtils.removeClass(i.$dropboxEl,"closed"),i.appendToBody&&(i.$dropboxEl.style.left="-2000px",i.$dropboxEl.style.top="-2000px")}),o)}}},{key:"moveSelectedOptionsFirst",value:function(){this.showSelectedOptionsFirst&&(this.setSortedOptions(),this.$optionsContainer.scrollTop&&this.selectedValues.length?this.scrollToTop():this.setVisibleOptions())}},{key:"toggleDropbox",value:function(){this.isOpened()?this.closeDropbox():this.openDropbox()}},{key:"isOpened",value:function(){return e.DomUtils.hasClass(this.$wrapper,"opened")}},{key:"focusSearchInput",value:function(){var e=this.$searchInput;e&&e.focus()}},{key:"focusOption",value:function(t,i){var o,s=this.$dropboxContainer.querySelector(".vscomp-option.focused");if(i)o=i;else if(s)o=this.getSibling(s,t);else{var n=this.getFirstVisibleOptionIndex();o=this.$dropboxContainer.querySelector('.vscomp-option[data-visible-index="'.concat(n,'"]')),(e.DomUtils.hasClass(o,"disabled")||e.DomUtils.hasClass(o,"group-title"))&&(o=this.getSibling(o,"next"))}o&&o!==s&&(s&&e.DomUtils.removeClass(s,"focused"),e.DomUtils.addClass(o,"focused"),this.toggleFocusedProp(e.DomUtils.getData(o,"index"),!0),t&&this.moveFocusedOptionToView(o))}},{key:"moveFocusedOptionToView",value:function(t){if(t||(t=this.$dropboxContainer.querySelector(".vscomp-option.focused")),t){var i,o=this.$optionsContainer.getBoundingClientRect(),s=t.getBoundingClientRect(),n=o.top,l=o.bottom,a=o.height,r=s.top,c=s.bottom,u=s.height,p=t.offsetTop,h=e.DomUtils.getData(this.$options,"top","number");n>r?i=p+h:l<c&&(i=p-a+u+h),void 0!==i&&(this.$optionsContainer.scrollTop=i)}}},{key:"removeOptionFocus",value:function(){var t=this.$dropboxContainer.querySelector(".vscomp-option.focused");t&&(e.DomUtils.removeClass(t,"focused"),this.toggleFocusedProp(null))}},{key:"selectOption",value:function(t){if(t){var i=!e.DomUtils.hasClass(t,"selected");if(i){if(this.multiple&&this.isMaxValuesSelected)return}else if(!this.multiple)return void this.closeDropbox();var o=this.selectedValues,s=this.selectedIndexes,n=parseInt(e.DomUtils.getData(t,"index")),l=this.options[n].value;if(this.toggleSelectedProp(n,i),i){if(this.multiple)o.push(l),s.push(n),this.toggleAllOptionsClass();else{o.length&&this.toggleSelectedProp(this.getOptionIndex(o[0]),!1),o=[l],s=[n];var a=this.$ele.querySelector(".vscomp-option.selected");a&&e.DomUtils.toggleClass(a,"selected",!1),this.closeDropbox()}e.DomUtils.toggleClass(t,"selected")}else this.multiple&&(e.DomUtils.toggleClass(t,"selected"),e.Utils.removeItemFromArray(o,l),e.Utils.removeItemFromArray(s,n),this.toggleAllOptionsClass(!1));e.DomUtils.hasClass(t,"current-new")&&this.beforeSelectNewValue(),this.setValue(o,s,!0)}}},{key:"selectFocusedOption",value:function(){this.selectOption(this.$dropboxContainer.querySelector(".vscomp-option.focused"))}},{key:"toggleAllOptions",value:function(t){if(this.multiple&&!this.disableSelectAll){"boolean"!=typeof t&&(t=!e.DomUtils.hasClass(this.$toggleAllCheckbox,"checked"));var i=[],o=[],s=this.selectAllOnlyVisible;this.options.forEach((function(e,n){e.isDisabled||e.isCurrentNew||e.isGroupTitle||(!t||s&&!e.isVisible?e.isSelected=!1:(e.isSelected=!0,i.push(e.value),s&&!e.isVisible||o.push(n)))})),this.toggleAllOptionsClass(t),this.toggleAddSearchClass(t),this.setValue(i,o,!0),this.renderOptions()}}},{key:"toggleAllOptionsClass",value:function(t){if("boolean"!=typeof t){t=!1,this.options.length&&(t=!this.options.some((function(e){return!e.isSelected&&!e.isDisabled&&!e.isGroupTitle})));var i="boolean"==typeof t;i||(t=this.isAllOptionsSelected())}e.DomUtils.toggleClass(this.$toggleAllCheckbox,"checked",t),this.selectAllOnlyVisible&&i?this.isAllSelected=this.isAllOptionsSelected():this.isAllSelected=t}},{key:"toggleAddSearchClass",value:function(t){var i=this.getVisibleOptions();e.DomUtils.toggleClass(this.$toggleAddSeachContainer,"hidden",!i||!i.length),"boolean"!=typeof t&&(t=!1,this.options.length&&(t=!this.options.some((function(e){return e.isVisible&&!e.isSelected&&!e.isDisabled&&!e.isGroupTitle}))),"boolean"==typeof t||(t=!1)),e.DomUtils.toggleClass(this.$toggleAddSeachCheckbox,"checked",t)}},{key:"isAllOptionsSelected",value:function(){var e=!1;return this.options.length&&(e=!this.options.some((function(e){return!e.isSelected&&!e.isDisabled&&!e.isGroupTitle}))),e}},{key:"toggleFocusedProp",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this.focusedOptionIndex&&this.setOptionProp(this.focusedOptionIndex,"isFocused",!1),this.setOptionProp(e,"isFocused",t),this.focusedOptionIndex=e}},{key:"toggleSelectedProp",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this.setOptionProp(e,"isSelected",t)}},{key:"scrollToTop",value:function(){var e=!this.isOpened();e&&this.openDropbox(!0),this.$optionsContainer.scrollTop>0&&(this.$optionsContainer.scrollTop=0),e&&this.closeDropbox(!0)}},{key:"reset",value:function(){this.options.forEach((function(e){e.isSelected=!1})),this.beforeValueSet(!0),this.setValue(null,null,!0),this.afterValueSet()}},{key:"addOption",value:function(e,t){if(e){this.lastOptionIndex++,e.index=this.lastOptionIndex;var i=this.getOptionObj(e);this.options.push(i),this.sortedOptions.push(i),t&&(this.visibleOptionsCount++,this.afterSetOptions())}}},{key:"removeOption",value:function(e){(e||0==e)&&(this.options.splice(e,1),this.lastOptionIndex--)}},{key:"removeNewOption",value:function(){var e=this.getNewOption();e&&this.removeOption(e.index)}},{key:"sortOptions",value:function(e){return e.sort((function(e,t){return t.value===p&&e.value!==p?0:e.isSelected||t.isSelected?e.isSelected&&(!t.isSelected||e.index<t.index)?-1:1:0}))}},{key:"sortOptionsGroup",value:function(e){var t=this.sortOptions;return(e=this.structureOptionGroup(e)).forEach((function(e){var i=e.options;e.isSelected=i.some((function(e){return e.isSelected})),e.isSelected&&t(i)})),t(e),this.destructureOptionGroup(e)}},{key:"isOptionVisible",value:function(e,t,i,o){var s=e.label.toLowerCase(),n=e.description,l=e.alias,a=-1!==s.indexOf(t);return e.isGroupTitle&&(a=o[e.index]),l&&!a&&(a=-1!==l.indexOf(t)),n&&!a&&(a=-1!==n.toLowerCase().indexOf(t)),e.isVisible=a,i||(i=s===t),{isVisible:a,hasExactOption:i}}},{key:"structureOptionGroup",value:function(e){var t=[],i={};return e.forEach((function(e){if(e.isGroupTitle){var o=[];e.options=o,i[e.index]=o,t.push(e)}})),e.forEach((function(e){e.isGroupOption&&i[e.groupIndex].push(e)})),t}},{key:"destructureOptionGroup",value:function(e){var t=[];return e.forEach((function(e){t.push(e),t=t.concat(e.options)})),t}},{key:"serverSearch",value:function(t){e.DomUtils.removeClass(this.$wrapper,"has-no-options"),e.DomUtils.addClass(this.$wrapper,"server-searching"),this.setSelectedOptions(),this.onServerSearch(t,this)}}],a=[{key:"init",value:function(e){var i=e.ele;if(i){var o=!1;if("string"!=typeof i||(i=document.querySelector(i))){void 0===i.length&&(i=[i],o=!0);var s=[];return i.forEach((function(i){e.ele=i,s.push(new t(e))})),o?s[0]:s}}}},{key:"resetForm",value:function(e){var t=e.target.closest("form");t&&t.querySelectorAll(".vscomp-wrapper").forEach((function(e){e.parentElement.virtualSelect.reset()}))}},{key:"reset",value:function(){this.virtualSelect.reset()}},{key:"setValueMethod",value:function(e,t){this.virtualSelect.setValueMethod(e,t)}},{key:"setOptionsMethod",value:function(e,t){this.virtualSelect.setOptionsMethod(e,t)}},{key:"setDisabledOptionsMethod",value:function(e){this.virtualSelect.setDisabledOptionsMethod(e)}},{key:"toggleSelectAll",value:function(e){this.virtualSelect.toggleAllOptions(e)}},{key:"isAllSelected",value:function(){return this.virtualSelect.isAllSelected}},{key:"addOptionMethod",value:function(e){this.virtualSelect.addOption(e,!0)}},{key:"getNewValueMethod",value:function(){return this.virtualSelect.getNewValue()}},{key:"version",value:function(){return"v1.0.6"}},{key:"getDisplayValueMethod",value:function(){return this.virtualSelect.getDisplayValue()}},{key:"getSelectedOptionsMethod",value:function(){return this.virtualSelect.getSelectedOptions()}},{key:"openMethod",value:function(){return this.virtualSelect.openDropbox()}},{key:"closeMethod",value:function(){return this.virtualSelect.closeDropbox()}},{key:"setSearchValueMethod",value:function(e){return this.virtualSelect.setSearchValue(e)}},{key:"onResizeMethod",value:function(){document.querySelectorAll(".vscomp-wrapper").forEach((function(e){e.parentElement.virtualSelect.onResize()}))}}],o&&c(i.prototype,o),a&&c(i,a),Object.defineProperty(i,"prototype",{writable:!1}),t}();document.addEventListener("reset",d.resetForm),window.addEventListener("resize",d.onResizeMethod),window.VirtualSelect=d})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,