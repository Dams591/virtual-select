/*!
 * Virtual Select v1.0.6
 * https://sa-si-dev.github.io/virtual-select
 * Licensed under MIT (https://github.com/sa-si-dev/virtual-select/blob/master/LICENSE)
 */(()=>{"use strict";var t={"./src/utils/dom-utils.js":
/*!********************************!*\
  !*** ./src/utils/dom-utils.js ***!
  \********************************/(t,e,i)=>{function o(t){return function(t){if(Array.isArray(t))return s(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return s(t,e);var i=Object.prototype.toString.call(t).slice(8,-1);"Object"===i&&t.constructor&&(i=t.constructor.name);if("Map"===i||"Set"===i)return Array.from(t);if("Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return s(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,o=new Array(e);i<e;i++)o[i]=t[i];return o}function n(t,e){for(var i=0;i<e.length;i++){var o=e[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}i.r(e),i.d(e,{DomUtils:()=>l});var l=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,i,s;return e=t,s=[{key:"addClass",value:function(t,e){t&&(e=e.split(" "),this.getElements(t).forEach((function(t){var i;(i=t.classList).add.apply(i,o(e))})))}},{key:"removeClass",value:function(t,e){t&&(e=e.split(" "),this.getElements(t).forEach((function(t){var i;(i=t.classList).remove.apply(i,o(e))})))}},{key:"toggleClass",value:function(t,e,i){var o;if(t)return void 0!==i&&(i=Boolean(i)),this.getElements(t).forEach((function(t){o=t.classList.toggle(e,i)})),o}},{key:"hasClass",value:function(t,e){return!!t&&t.classList.contains(e)}},{key:"hasEllipsis",value:function(t){return!!t&&t.scrollWidth>t.offsetWidth}},{key:"getMoreVisibleSides",value:function(t){if(!t)return{};var e=t.getBoundingClientRect(),i=window.innerWidth,o=window.innerHeight,s=e.left,n=e.top;return{horizontal:s>i-s-e.width?"left":"right",vertical:n>o-n-e.height?"top":"bottom"}}},{key:"getData",value:function(t,e,i){if(t){var o=t?t.dataset[e]:"";return"number"===i?o=parseFloat(o)||0:"true"===o?o=!0:"false"===o&&(o=!1),o}}},{key:"setData",value:function(t,e,i){t&&(t.dataset[e]=i)}},{key:"setStyle",value:function(t,e,i){t&&(t.style[e]=i)}},{key:"getElements",value:function(t){if(t)return void 0===t.length&&(t=[t]),t}},{key:"getStyleText",value:function(t,e){var i="";for(var o in t)i+="".concat(o,": ").concat(t[o],";");return i&&!e&&(i='style="'.concat(i,'"')),i}},{key:"getAttributesText",value:function(t){var e="";if(!t)return e;for(var i in t){var o=t[i];void 0!==o&&(e+=" ".concat(i,'="').concat(o,'" '))}return e}}],(i=null)&&n(e.prototype,i),s&&n(e,s),t}()},"./src/utils/index.js":
/*!****************************!*\
  !*** ./src/utils/index.js ***!
  \****************************/(t,e,i)=>{i.r(e),i.d(e,{Utils:()=>o.Utils,DomUtils:()=>s.DomUtils});var o=i(/*! ./utils */"./src/utils/utils.js"),s=i(/*! ./dom-utils */"./src/utils/dom-utils.js")},"./src/utils/utils.js":
/*!****************************!*\
  !*** ./src/utils/utils.js ***!
  \****************************/(t,e,i)=>{function o(t){return function(t){if(Array.isArray(t))return s(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return s(t,e);var i=Object.prototype.toString.call(t).slice(8,-1);"Object"===i&&t.constructor&&(i=t.constructor.name);if("Map"===i||"Set"===i)return Array.from(t);if("Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return s(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,o=new Array(e);i<e;i++)o[i]=t[i];return o}function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function l(t,e){for(var i=0;i<e.length;i++){var o=e[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}i.r(e),i.d(e,{Utils:()=>a});var a=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,i,s;return e=t,s=[{key:"getString",value:function(t){return t||0===t?t.toString():""}},{key:"convertToBoolean",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return t=!0===t||"true"===t||!1!==t&&"false"!==t&&e}},{key:"isEmpty",value:function(t){var e=!1;return t?Array.isArray(t)?0===t.length&&(e=!0):"object"===n(t)&&0===Object.keys(t).length&&(e=!0):e=!0,e}},{key:"isNotEmpty",value:function(t){return!this.isEmpty(t)}},{key:"removeItemFromArray",value:function(t,e,i){if(!Array.isArray(t)||!t.length||!e)return t;i&&(t=o(t));var s=t.indexOf(e);return-1!==s&&t.splice(s,1),t}},{key:"removeArrayEmpty",value:function(t){return Array.isArray(t)&&t.length?t.filter((function(t){return!!t})):[]}}],(i=null)&&l(e.prototype,i),s&&l(e,s),t}()}},e={};function i(o){if(e[o])return e[o].exports;var s=e[o]={exports:{}};return t[o](s,s.exports,i),s.exports}i.d=(t,e)=>{for(var o in e)i.o(e,o)&&!i.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var o={};(()=>{
/*!*******************************!*\
  !*** ./src/virtual-select.js ***!
  \*******************************/
i.r(o),i.d(o,{VirtualSelect:()=>u});var t=i(/*! ./utils */"./src/utils/index.js");function e(t,e){var i;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(i=n(t))||e&&t&&"number"==typeof t.length){i&&(t=i);var o=0,s=function(){};return{s,n:function(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function(t){throw t},f:s}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var l,a=!0,r=!1;return{s:function(){i=t[Symbol.iterator]()},n:function(){var t=i.next();return a=t.done,t},e:function(t){r=!0,l=t},f:function(){try{a||null==i.return||i.return()}finally{if(r)throw l}}}}function s(t){return function(t){if(Array.isArray(t))return l(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||n(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function n(t,e){if(t){if("string"==typeof t)return l(t,e);var i=Object.prototype.toString.call(t).slice(8,-1);return"Object"===i&&t.constructor&&(i=t.constructor.name),"Map"===i||"Set"===i?Array.from(t):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?l(t,e):void 0}}function l(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,o=new Array(e);i<e;i++)o[i]=t[i];return o}function a(t,e){for(var i=0;i<e.length;i++){var o=e[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}var r={13:"onEnterPress",27:"onEscPress",38:"onUpArrowPress",40:"onDownArrowPress"},u=function(){function i(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i);try{this.setProps(t),this.setDisabledOptions(t.disabledOptions),this.setOptions(t.options),this.render()}catch(t){console.warn("Couldn't initiate Virtual Select"),console.error(t)}}var o,n,l;return o=i,l=[{key:"init",value:function(t){var e=t.ele;if(e){var o=!1;if("string"!=typeof e||(e=document.querySelector(e))){void 0===e.length&&(e=[e],o=!0);var s=[];return e.forEach((function(e){t.ele=e,s.push(new i(t))})),o?s[0]:s}}}},{key:"closeAllDropbox",value:function(t){document.querySelectorAll(".vscomp-wrapper").forEach((function(e){t&&t===e||e.parentElement.virtualSelect.closeDropbox()}))}},{key:"resetForm",value:function(t){var e=t.target.closest("form");e&&e.querySelectorAll(".vscomp-wrapper").forEach((function(t){t.parentElement.virtualSelect.reset()}))}},{key:"reset",value:function(){this.virtualSelect.reset()}},{key:"setValueMethod",value:function(t,e){this.virtualSelect.setValueMethod(t,e)}},{key:"setOptionsMethod",value:function(t){this.virtualSelect.setOptionsMethod(t)}},{key:"setDisabledOptionsMethod",value:function(t){this.virtualSelect.setDisabledOptionsMethod(t)}},{key:"toggleSelectAll",value:function(t){this.virtualSelect.toggleAllOptions(t)}},{key:"isAllSelected",value:function(){return this.virtualSelect.isAllSelected}},{key:"addOptionMethod",value:function(t){this.virtualSelect.addOption(t,!0)}},{key:"getNewValueMethod",value:function(){return this.virtualSelect.getNewValue()}},{key:"version",value:function(){return"v1.0.6"}},{key:"getDisplayValueMethod",value:function(){return this.virtualSelect.getDisplayValue()}},{key:"openMethod",value:function(){return this.virtualSelect.openDropbox()}},{key:"closeMethod",value:function(){return this.virtualSelect.closeDropbox()}},{key:"onResizeMethod",value:function(){document.querySelectorAll(".vscomp-wrapper").forEach((function(t){t.parentElement.virtualSelect.onResize()}))}}],(n=[{key:"render",value:function(){if(this.$ele){var e="vscomp-wrapper",i=this.getTooltipAttrText("",!this.multiple,!0),o=this.getTooltipAttrText("Clear"),s={"z-index":this.zIndex};this.additionalClasses&&(e+=" "+this.additionalClasses),this.multiple&&(e+=" multiple",this.disableSelectAll||(e+=" has-select-all")),"top"===this.position&&(e+=" position-top"),this.hideClearButton||(e+=" has-clear-button"),this.keepAlwaysOpen?e+=" keep-always-open opened":e+=" closed",this.showAsPopup?e+=" show-as-popup":this.dropboxWidth&&(s.width=this.dropboxWidth),this.hasSearch&&(e+=" has-search-input");var n='<div class="'.concat(e,'" tabindex="0">\n        <input type="hidden" name="').concat(this.name,'" class="vscomp-hidden-input">\n\n        <div class="vscomp-toggle-button">\n          <div class="vscomp-value" ').concat(i,">\n            ").concat(this.placeholder,'\n          </div>\n\n          <div class="vscomp-arrow"></div>\n\n          <div class="vscomp-clear-button toggle-button-child" ').concat(o,'>\n            <i class="vscomp-clear-icon"></i>\n          </div>\n        </div>\n\n        <div class="vscomp-dropbox-container" ').concat(t.DomUtils.getStyleText(s),'>\n          <div class="vscomp-dropbox">\n            <div class="vscomp-search-wrapper"></div>\n\n            <div class="vscomp-options-container">\n              <div class="vscomp-options-loader"></div>\n\n              <div class="vscomp-options-list">\n                <div class="vscomp-options"></div>\n              </div>\n            </div>\n\n            <div class="vscomp-no-options">').concat(this.noOptionsText,'</div>\n            <div class="vscomp-no-search-results">').concat(this.noSearchResultsText,'</div>\n\n            <span class="vscomp-dropbox-close-button"><i class="vscomp-clear-icon"></i></span>\n          </div>\n        </div>\n      </div>');this.$ele.innerHTML=n,this.$body=document.querySelector("body"),this.$wrapper=this.$ele.querySelector(".vscomp-wrapper"),this.$toggleButton=this.$ele.querySelector(".vscomp-toggle-button"),this.$clearButton=this.$ele.querySelector(".vscomp-clear-button"),this.$dropboxContainer=this.$ele.querySelector(".vscomp-dropbox-container"),this.$dropboxCloseButton=this.$ele.querySelector(".vscomp-dropbox-close-button"),this.$search=this.$ele.querySelector(".vscomp-search-wrapper"),this.$optionsContainer=this.$ele.querySelector(".vscomp-options-container"),this.$optionsList=this.$ele.querySelector(".vscomp-options-list"),this.$options=this.$ele.querySelector(".vscomp-options"),this.$valueText=this.$ele.querySelector(".vscomp-value"),this.$hiddenInput=this.$ele.querySelector(".vscomp-hidden-input"),this.$noOptions=this.$ele.querySelector(".vscomp-no-options"),this.$noSearchResults=this.$ele.querySelector(".vscomp-no-search-results"),this.afterRenderWrapper()}}},{key:"renderOptions",value:function(){var e,i=this,o="",s=this.getVisibleOptions(),n="",l="",a=!(!this.markSearchResults||!this.searchValue),r=t.DomUtils.getStyleText({height:this.optionHeight+"px"});if(a&&(e=new RegExp("(".concat(this.searchValue,")"),"gi")),this.multiple&&(n='<span class="checkbox-icon"></span>'),this.allowNewOption){var u=this.getTooltipAttrText("New Option");l='<span class="vscomp-new-option-icon" '.concat(u,"></span>")}s.forEach((function(t){var s=t.label,u="vscomp-option",p=i.getTooltipAttrText("",!0),c=n,h="",d="";t.isFocused&&(u+=" focused"),t.isDisabled&&(u+=" disabled"),t.isGroupTitle?(u+=" group-title",c=""):t.isSelected&&(u+=" selected"),t.isGroupOption&&(u+=" group-option"),t.description&&(d='<div class="vscomp-option-description" '.concat(p,">").concat(t.description,"</div>")),t.isCurrentNew?(u+=" current-new",h+=l):a&&!t.isGroupTitle&&(s=s.replace(e,"<mark>$1</mark>")),o+='<div class="'.concat(u,'" data-value="').concat(t.value,'" data-index="').concat(t.index,'" data-visible-index="').concat(t.visibleIndex,'" ').concat(r,">\n          ").concat(c,'\n          <span class="vscomp-option-text" ').concat(p,">\n            ").concat(s,"\n          </span>\n          ").concat(d,"\n          ").concat(h,"\n        </div>")})),this.$options.innerHTML=o;var p=!this.options.length,c=!p&&!s.length;this.allowNewOption||t.DomUtils.toggleClass(this.$wrapper,"has-no-search-results",c),t.DomUtils.toggleClass(this.$wrapper,"has-no-options",p),this.setOptionsPosition(),this.setOptionsTooltip()}},{key:"renderSearch",value:function(){if(this.hasSearchContainer){var t="",e="";this.multiple&&!this.disableSelectAll&&(t='<span class="vscomp-toggle-all-button">\n          <span class="checkbox-icon vscomp-toggle-all-checkbox"></span>\n          <span class="vscomp-toggle-all-label">'.concat(this.selectAllText,"</span>\n        </span>")),this.hasSearch&&(e='<input type="text" class="vscomp-search-input" placeholder="Search...">\n      <span class="vscomp-search-clear">&times;</span>');var i='<div class="vscomp-search-container">\n        '.concat(t,"\n        ").concat(e,"\n      </div>");this.$search.innerHTML=i,this.$searchInput=this.$ele.querySelector(".vscomp-search-input"),this.$searchClear=this.$ele.querySelector(".vscomp-search-clear"),this.$toggleAllButton=this.$ele.querySelector(".vscomp-toggle-all-button"),this.$toggleAllCheckbox=this.$ele.querySelector(".vscomp-toggle-all-checkbox"),this.addEvent(this.$searchInput,"keyup change","onSearch"),this.addEvent(this.$searchClear,"click","onSearchClear"),this.addEvent(this.$toggleAllButton,"click","onToggleAllOptions")}}},{key:"addEvents",value:function(){this.addEvent(document,"click","onDocumentClick"),this.addEvent(this.$wrapper,"keydown","onKeyDown"),this.addEvent(this.$toggleButton,"click","onToggleButtonClick"),this.addEvent(this.$clearButton,"click","onClearButtonClick"),this.addEvent(this.$dropboxContainer,"click","onDropboxContainerClick"),this.addEvent(this.$dropboxCloseButton,"click","onDropboxCloseButtonClick"),this.overrideScrollEventSelector?this.addEvent(this.$ele.querySelector(this.overrideScrollEventSelector),"scroll","onOptionsScroll"):this.addEvent(this.$optionsContainer,"scroll","onOptionsScroll"),this.addEvent(this.$options,"click","onOptionsClick"),this.addEvent(this.$options,"mouseover","onOptionsMouseOver"),this.addEvent(this.$options,"touchmove","onOptionsTouchMove")}},{key:"addEvent",value:function(e,i,o){var s=this;e&&(i=t.Utils.removeArrayEmpty(i.split(" "))).forEach((function(i){var n="".concat(o,"-").concat(i),l=s.events[n];l||(l=s[o].bind(s),s.events[n]=l),(e=t.DomUtils.getElements(e)).forEach((function(t){t.addEventListener(i,l)}))}))}},{key:"dispatchEvent",value:function(e,i){e&&(e=t.DomUtils.getElements(e),setTimeout((function(){e.forEach((function(t){t.dispatchEvent(new Event(i,{bubbles:!0}))}))}),0))}},{key:"onDocumentClick",value:function(t){i.closeAllDropbox(t.target.closest(".vscomp-wrapper"))}},{key:"onKeyDown",value:function(t){var e=t.which||t.keyCode,i=r[e];i&&this[i](t)}},{key:"onEnterPress",value:function(){this.isOpened()?this.selectFocusedOption():this.openDropbox()}},{key:"onEscPress",value:function(){this.isOpened()&&this.closeDropbox()}},{key:"onDownArrowPress",value:function(t){t.preventDefault(),this.isOpened()?this.focusOption("next"):this.openDropbox()}},{key:"onUpArrowPress",value:function(t){t.preventDefault(),this.isOpened()?this.focusOption("previous"):this.openDropbox()}},{key:"onToggleButtonClick",value:function(t){t.target.closest(".toggle-button-child")||this.toggleDropbox()}},{key:"onClearButtonClick",value:function(){this.reset()}},{key:"onOptionsScroll",value:function(){this.setVisibleOptions()}},{key:"onOptionsClick",value:function(t){this.selectOption(t.target.closest(".vscomp-option:not(.disabled):not(.group-title)"))}},{key:"onDropboxContainerClick",value:function(t){t.target.closest(".vscomp-dropbox")||this.closeDropbox()}},{key:"onDropboxCloseButtonClick",value:function(){this.closeDropbox()}},{key:"onOptionsMouseOver",value:function(t){var e=t.target.closest(".vscomp-option:not(.disabled):not(.group-title)");e&&this.focusOption(null,e)}},{key:"onOptionsTouchMove",value:function(){this.removeOptionFocus()}},{key:"onSearch",value:function(t){t.stopPropagation(),this.setSearchValue(t.target.value,!0)}},{key:"onSearchClear",value:function(){this.setSearchValue(""),this.focusSearchInput()}},{key:"onToggleAllOptions",value:function(){this.toggleAllOptions()}},{key:"onResize",value:function(){this.setOptionsContainerHeight(!0)}},{key:"afterRenderWrapper",value:function(){this.$ele.setAttribute("name",this.name),t.DomUtils.addClass(this.$ele,"vscomp-ele"),this.renderSearch(),this.setOptionsHeight(),this.setVisibleOptions(),this.setOptionsContainerHeight(),this.addEvents(),this.setMethods(),this.initialSelectedValue?this.setValueMethod(this.initialSelectedValue,this.silentInitialValueSet):this.autoSelectFirstOption&&this.visibleOptions.length&&this.setValueMethod(this.visibleOptions[0].value,this.silentInitialValueSet)}},{key:"afterSetOptionsContainerHeight",value:function(t){t&&this.showAsPopup&&this.setVisibleOptions()}},{key:"setProps",value:function(e){e=this.setDefaultProps(e),this.setPropsFromElementAttr(e);var i=t.Utils.convertToBoolean;this.$ele=e.ele,this.valueKey=e.valueKey,this.labelKey=e.labelKey,this.descriptionKey=e.descriptionKey,this.aliasKey=e.aliasKey,this.optionHeightText=e.optionHeight,this.optionHeight=parseFloat(this.optionHeightText),this.multiple=i(e.multiple),this.hasSearch=i(e.search),this.hideClearButton=i(e.hideClearButton),this.autoSelectFirstOption=i(e.autoSelectFirstOption),this.hasOptionDescription=i(e.hasOptionDescription),this.silentInitialValueSet=i(e.silentInitialValueSet),this.allowNewOption=i(e.allowNewOption),this.markSearchResults=i(e.markSearchResults),this.showSelectedOptionsFirst=i(e.showSelectedOptionsFirst),this.disableSelectAll=i(e.disableSelectAll),this.keepAlwaysOpen=i(e.keepAlwaysOpen),this.showDropboxAsPopup=i(e.showDropboxAsPopup),this.noOptionsText=e.noOptionsText,this.noSearchResultsText=e.noSearchResultsText,this.selectAllText=e.selectAllText,this.placeholder=e.placeholder,this.position=e.position,this.dropboxWidth=e.dropboxWidth,this.tooltipFontSize=e.tooltipFontSize,this.tooltipAlignment=e.tooltipAlignment,this.tooltipMaxWidth=e.tooltipMaxWidth,this.noOfDisplayValues=parseInt(e.noOfDisplayValues),this.zIndex=parseInt(e.zIndex),this.maxValues=parseInt(e.maxValues),this.name=e.name,this.additionalClasses=e.additionalClasses,this.initialSelectedValue=e.selectedValue,this.popupDropboxBreakpoint=e.popupDropboxBreakpoint,this.onServerSearch=e.onServerSearch,this.selectedValues=[],this.newValues=[],this.events={},this.tooltipEnterDelay=200,this.transitionDuration=250,this.searchValue="",this.searchValueOriginal="",this.isAllSelected=!1,(void 0===e.search&&this.multiple||this.allowNewOption)&&(this.hasSearch=!0),this.maxValues&&(this.disableSelectAll=!0),this.hasServerSearch="function"==typeof this.onServerSearch,this.showAsPopup=this.showDropboxAsPopup&&!this.keepAlwaysOpen&&window.innerWidth<=parseFloat(this.popupDropboxBreakpoint),this.hasSearchContainer=this.hasSearch||this.multiple&&!this.disableSelectAll,this.optionsCount=this.getOptionsCount(e.optionsCount),this.halfOptionsCount=Math.ceil(this.optionsCount/2),this.optionsHeight=this.getOptionsHeight()}},{key:"setDefaultProps",value:function(t){var e={valueKey:"value",labelKey:"label",descriptionKey:"description",aliasKey:"alias",optionsCount:5,noOfDisplayValues:50,optionHeight:"40px",multiple:!1,hideClearButton:!1,autoSelectFirstOption:!1,hasOptionDescription:!1,silentInitialValueSet:!1,disableSelectAll:!1,noOptionsText:"No options found",noSearchResultsText:"No results found",selectAllText:"Select All",placeholder:"Select",position:"auto",zIndex:1,allowNewOption:!1,markSearchResults:!1,tooltipFontSize:"14px",tooltipAlignment:"center",tooltipMaxWidth:"300px",showSelectedOptionsFirst:!1,name:"",additionalClasses:"",keepAlwaysOpen:!1,maxValues:0,showDropboxAsPopup:!0,popupDropboxBreakpoint:"576px"};return t.hasOptionDescription&&(e.optionsCount=4,e.optionHeight="60px"),Object.assign(e,t)}},{key:"setPropsFromElementAttr",value:function(t){var e=t.ele,i={multiple:"multiple",placeholder:"placeholder",name:"name","data-value-key":"valueKey","data-label-key":"labelKey","data-description-key":"descriptionKey","data-alias-key":"aliasKey","data-search":"search","data-hide-clear-button":"hideClearButton","data-auto-select-first-option":"autoSelectFirstOption","data-has-option-description":"hasOptionDescription","data-options-count":"optionsCount","data-option-height":"optionHeight","data-position":"position","data-no-options-text":"noOptionsText","data-no-search-results-text":"noSearchResultsText","data-select-all-text":"selectAllText","data-silent-initial-value-set":"silentInitialValueSet","data-dropbox-width":"dropboxWidth","data-z-index":"zIndex","data-no-of-display-values":"noOfDisplayValues","data-allow-new-option":"allowNewOption","data-mark-search-results":"markSearchResults","data-tooltip-font-size":"tooltipFontSize","data-tooltip-alignment":"tooltipAlignment","data-tooltip-max-width":"tooltipMaxWidth","data-show-selected-options-first":"showSelectedOptionsFirst","data-disable-select-all":"disableSelectAll","data-keep-always-open":"keepAlwaysOpen","data-max-values":"maxValues","data-additional-classes":"additionalClasses","data-show-dropbox-as-popup":"showDropboxAsPopup","data-popup-dropbox-breakpoint":"popupDropboxBreakpoint"};for(var o in i){var s=e.getAttribute(o);"multiple"!==o||""!==s&&"true"!==s||(s=!0),s&&(t[i[o]]=s)}}},{key:"setMethods",value:function(){var t=this.$ele;t.virtualSelect=this,t.value=this.multiple?[]:"",t.reset=i.reset,t.setValue=i.setValueMethod,t.setOptions=i.setOptionsMethod,t.setDisabledOptions=i.setDisabledOptionsMethod,t.toggleSelectAll=i.toggleSelectAll,t.isAllSelected=i.isAllSelected,t.addOption=i.addOptionMethod,t.getNewValue=i.getNewValueMethod,t.getDisplayValue=i.getDisplayValueMethod,t.open=i.openMethod,t.close=i.closeMethod}},{key:"setValueMethod",value:function(t,e){Array.isArray(t)||(t=[t]),t=t.map((function(t){return t||0==t?t.toString():""}));var i=[];this.options.forEach((function(e){-1===t.indexOf(e.value)||e.isDisabled||e.isGroupTitle?e.isSelected=!1:(e.isSelected=!0,i.push(e.value))})),this.multiple||(i=i[0]),this.beforeValueSet(),this.setValue(i,!e),this.afterValueSet()}},{key:"setOptionsMethod",value:function(t,e){this.setOptions(t),this.afterSetOptions(e)}},{key:"setDisabledOptionsMethod",value:function(t){this.setDisabledOptions(t,!0),this.setValueMethod(null),this.setVisibleOptions()}},{key:"setDisabledOptions",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];t=t.map((function(t){return t.toString()})),this.disabledOptions=t,e&&t.length&&this.options.forEach((function(e){return e.isDisabled=-1!==t.indexOf(e.value),e}))}},{key:"setOptions",value:function(e){e||(e=[]);var i=[],o=this.disabledOptions,s=o.length,n=this.valueKey,l=this.labelKey,a=this.descriptionKey,r=this.aliasKey,u=this.hasOptionDescription,p=t.Utils.getString,c=this.getAlias,h=0,d=!1;e.forEach((function t(e){var v=p(e[n]),f=e.options,y=!!f,g={index:h,value:v,label:p(e[l]),alias:c(e[r]),isVisible:!0,isGroupTitle:y};if(s&&(g.isDisabled=-1!==o.indexOf(v)),e.isGroupOption&&(g.isGroupOption=!0,g.groupIndex=e.groupIndex),u&&(g.description=p(e[a])),i.push(g),h++,y){var m=g.index;d=!0,f.forEach((function(e){e.isGroupOption=!0,e.groupIndex=m,t(e)}))}})),this.options=i,this.visibleOptionsCount=i.length,this.lastOptionIndex=this.options.length-1,this.newValues=[],this.hasOptionGroup=d,this.setSortedOptions()}},{key:"setServerOptions",value:function(e){this.setOptionsMethod(e,!0),t.DomUtils.removeClass(this.$wrapper,"server-searching")}},{key:"setSortedOptions",value:function(){var t=s(this.options);this.showSelectedOptionsFirst&&this.selectedValues.length&&(t=this.hasOptionGroup?this.sortOptionsGroup(t):this.sortOptions(t)),this.sortedOptions=t}},{key:"setVisibleOptions",value:function(){var t=s(this.sortedOptions),e=2*this.optionsCount,i=this.getVisibleStartIndex(),o=this.getNewOption(),n=i+e-1,l=0;o&&(o.visibleIndex=l,l++),t=t.filter((function(t){var e=!1;return t.isVisible&&!t.isCurrentNew&&(e=l>=i&&l<=n,t.visibleIndex=l,l++),e})),o&&(t=[o].concat(s(t))),this.visibleOptions=t,this.renderOptions()}},{key:"setOptionsPosition",value:function(e){void 0===e&&(e=this.getVisibleStartIndex());var i=e*this.optionHeight;this.$options.style.transform="translate3d(0, ".concat(i,"px, 0)"),t.DomUtils.setData(this.$options,"top",i)}},{key:"setOptionsTooltip",value:function(){var e=this,i=this.getVisibleOptions(),o=this.hasOptionDescription;i.forEach((function(i){var s=e.$dropboxContainer.querySelector('.vscomp-option[data-index="'.concat(i.index,'"]'));t.DomUtils.setData(s.querySelector(".vscomp-option-text"),"tooltip",i.label),o&&t.DomUtils.setData(s.querySelector(".vscomp-option-description"),"tooltip",i.description)}))}},{key:"setValue",value:function(e,i){e?Array.isArray(e)?this.selectedValues=s(e):this.selectedValues=[e]:this.selectedValues=[];var o=this.multiple?this.selectedValues:this.selectedValues[0]||"";this.$ele.value=o,this.$hiddenInput.value=o,this.isMaxValuesSelected=!!(this.maxValues&&this.maxValues<=this.selectedValues.length),this.setValueText(),t.DomUtils.toggleClass(this.$wrapper,"has-value",t.Utils.isNotEmpty(this.selectedValues)),t.DomUtils.toggleClass(this.$wrapper,"max-value-selected",this.isMaxValuesSelected),i&&this.dispatchEvent(this.$ele,"change")}},{key:"setValueText",value:function(){var i=[],o=[],s=this.selectedValues,n=s.length,l=this.noOfDisplayValues,a=0;if(this.isAllSelected)this.$valueText.innerHTML="All (".concat(n,")");else{var r,u=e(this.options);try{for(u.s();!(r=u.n()).done;){var p=r.value;if(!p.isCurrentNew){if(a>50)break;var c=p.value;if(-1!==s.indexOf(c)){var h=p.label;i.push(h),++a<=l&&o.push('<span class="vscomp-value-tag">'.concat(h,"</span>"))}}}}catch(t){u.e(t)}finally{u.f()}var d=n-l;d>0&&o.push('<span class="vscomp-value-tag more-value-count">+ '.concat(d," more...</span>"));var v=i.join(", ");if(""===v)this.$valueText.innerHTML=this.placeholder;else if(this.$valueText.innerHTML=v,this.multiple){var f=this.maxValues;if(t.DomUtils.hasEllipsis(this.$valueText)||f){var y="".concat(n);f&&(y+=" / ".concat(f)),this.$valueText.innerHTML="".concat(y," option").concat(1===n?"":"s"," selected")}else o=[]}}t.DomUtils.setData(this.$valueText,"tooltip",o.join(", "))}},{key:"setSearchValue",value:function(e,i){if(e!==this.searchValueOriginal){i||(this.$searchInput.value=e);var o=e.toLowerCase().trim();if(this.searchValue=o,this.searchValueOriginal=e,t.DomUtils.toggleClass(this.$wrapper,"has-search-value",e),this.hasServerSearch)this.serverSearch(o);else{var s,n=0,l=!1,a=this.isOptionVisible;this.hasOptionGroup&&(s=this.getVisibleOptionGroupsMapping(o)),this.options.forEach((function(t){if(!t.isCurrentNew){var e=a(t,o,l,s);e.isVisible&&n++,l||(l=e.hasExactOption)}})),this.allowNewOption&&(o&&!l?(this.setNewOption(),n++):this.removeNewOption()),this.visibleOptionsCount=n,this.scrollToTop(),this.setOptionsHeight(),this.setVisibleOptions()}}}},{key:"setOptionProp",value:function(t,e,i){this.options[t]&&(this.options[t][e]=i)}},{key:"setOptionsHeight",value:function(){this.$optionsList.style.height=this.optionHeight*this.visibleOptionsCount+"px"}},{key:"setOptionsContainerHeight",value:function(e){var i;e?this.showAsPopup&&(this.optionsCount=this.getOptionsCount(),i=this.getOptionsHeight(),this.optionsHeight=i):(i=this.optionsHeight,this.keepAlwaysOpen&&(t.DomUtils.setStyle(this.$noOptions,"height",i),t.DomUtils.setStyle(this.$noSearchResults,"height",i))),t.DomUtils.setStyle(this.$optionsContainer,"max-height",i),this.afterSetOptionsContainerHeight(e)}},{key:"setDropboxPosition",value:function(){if("auto"===this.position){var e=t.DomUtils.getMoreVisibleSides(this.$wrapper),i=!1;if(this.dropboxWidth){var o=this.$toggleButton.getBoundingClientRect(),s=window.innerWidth,n=parseFloat(this.dropboxWidth),l=o.left+n>s,a=n>o.right;l&&!a&&(i=!0)}t.DomUtils.toggleClass(this.$wrapper,"position-top","top"===e.vertical),t.DomUtils.toggleClass(this.$wrapper,"position-left",i)}}},{key:"setNewOption",value:function(){var t=this.searchValueOriginal.trim();if(t){var e=this.getNewOption();if(e){var i=e.index;this.setOptionProp(i,"value",t),this.setOptionProp(i,"label",t)}else{var o={value:t,label:t,isCurrentNew:!0};this.addOption(o)}}}},{key:"setSelectedProp",value:function(){var t=this.selectedValues;this.options.forEach((function(e){-1!==t.indexOf(e.value)&&(e.isSelected=!0)}))}},{key:"getVisibleOptions",value:function(){return this.visibleOptions||[]}},{key:"getValue",value:function(){return this.multiple?this.selectedValues:this.selectedValues[0]}},{key:"getFirstVisibleOptionIndex",value:function(){return Math.ceil(this.$optionsContainer.scrollTop/this.optionHeight)}},{key:"getVisibleStartIndex",value:function(){var t=this.getFirstVisibleOptionIndex()-this.halfOptionsCount;return t<0&&(t=0),t}},{key:"getTooltipAttrText",value:function(e){var i=arguments.length>1&&void 0!==arguments[1]&&arguments[1],o=arguments.length>2&&void 0!==arguments[2]&&arguments[2],s={"data-tooltip":e||"","data-tooltip-enter-delay":this.tooltipEnterDelay,"data-tooltip-z-index":this.zIndex,"data-tooltip-font-size":this.tooltipFontSize,"data-tooltip-alignment":this.tooltipAlignment,"data-tooltip-max-width":this.tooltipMaxWidth,"data-tooltip-ellipsis-only":i,"data-tooltip-allow-html":o};return t.DomUtils.getAttributesText(s)}},{key:"getOptionObj",value:function(e){if(e){var i=t.Utils.getString;return{index:e.index,value:i(e.value),label:i(e.label),description:i(e.description),alias:this.getAlias(e.alias),isCurrentNew:e.isCurrentNew||!1,isVisible:!0}}}},{key:"getNewOption",value:function(){var t=this.options[this.lastOptionIndex];if(t&&t.isCurrentNew)return t}},{key:"getOptionIndex",value:function(t){var e;return t&&this.options.some((function(i){if(i.value==t)return e=i.index,!0})),e}},{key:"getNewValue",value:function(){var t=this.newValues,e=this.selectedValues.filter((function(e){return-1!==t.indexOf(e)}));return this.multiple?e:e[0]}},{key:"getAlias",value:function(t){return t=t?(t=Array.isArray(t)?t.join(","):t.toString().trim()).toLowerCase():""}},{key:"getDisplayValue",value:function(){var t,i=[],o=this.selectedValues,s=e(this.options);try{for(s.s();!(t=s.n()).done;){var n=t.value;-1!==o.indexOf(n.value)&&i.push(n.label)}}catch(t){s.e(t)}finally{s.f()}return this.multiple?i:i[0]||""}},{key:"getVisibleOptionGroupsMapping",value:function(t){var e=this.options,i={},o=this.isOptionVisible;return(e=this.structureOptionGroup(e)).forEach((function(e){i[e.index]=e.options.some((function(e){return o(e,t).isVisible}))})),i}},{key:"getOptionsCount",value:function(t){if(this.showAsPopup){var e=80*window.innerHeight/100-48;this.hasSearchContainer&&(e-=40),t=Math.floor(e/this.optionHeight)}else t=parseInt(t);return t}},{key:"getOptionsHeight",value:function(){return this.optionsCount*this.optionHeight+"px"}},{key:"getSibling",value:function(e,i){var o="next"===i?"nextElementSibling":"previousElementSibling";do{e&&(e=e[o])}while(t.DomUtils.hasClass(e,"disabled")||t.DomUtils.hasClass(e,"group-title"));return e}},{key:"openDropbox",value:function(e){var i=this;this.setDropboxPosition(),t.DomUtils.removeClass(this.$wrapper,"closed"),setTimeout((function(){t.DomUtils.addClass(i.$wrapper,"opened"),e||(i.moveSelectedOptionsFirst(),t.DomUtils.addClass(i.$wrapper,"focused"),i.showAsPopup?(t.DomUtils.addClass(i.$body,"vscomp-popup-active"),i.isPopupActive=!0):i.focusSearchInput())}),0)}},{key:"closeDropbox",value:function(e){var i=this;if(this.keepAlwaysOpen)this.removeOptionFocus();else{var o=e?0:this.transitionDuration;setTimeout((function(){t.DomUtils.removeClass(i.$wrapper,"opened focused"),i.removeOptionFocus(),e||i.isPopupActive&&(t.DomUtils.removeClass(i.$body,"vscomp-popup-active"),i.isPopupActive=!1)}),0),setTimeout((function(){t.DomUtils.addClass(i.$wrapper,"closed")}),o)}}},{key:"moveSelectedOptionsFirst",value:function(){this.showSelectedOptionsFirst&&(this.setSortedOptions(),this.$optionsContainer.scrollTop&&this.selectedValues.length?this.scrollToTop():this.setVisibleOptions())}},{key:"toggleDropbox",value:function(){this.isOpened()?this.closeDropbox():this.openDropbox()}},{key:"isOpened",value:function(){return t.DomUtils.hasClass(this.$wrapper,"opened")}},{key:"focusSearchInput",value:function(){var t=this.$searchInput;t&&t.focus()}},{key:"focusOption",value:function(e,i){var o,s=this.$dropboxContainer.querySelector(".vscomp-option.focused");if(i)o=i;else if(s)o=this.getSibling(s,e);else{var n=this.getFirstVisibleOptionIndex();o=this.$dropboxContainer.querySelector('.vscomp-option[data-visible-index="'.concat(n,'"]')),(t.DomUtils.hasClass(o,"disabled")||t.DomUtils.hasClass(o,"group-title"))&&(o=this.getSibling(o,"next"))}o&&o!==s&&(s&&t.DomUtils.removeClass(s,"focused"),t.DomUtils.addClass(o,"focused"),this.toggleFocusedProp(t.DomUtils.getData(o,"index"),!0),this.moveFocusedOptionToView(o))}},{key:"moveFocusedOptionToView",value:function(e){if(e||(e=this.$dropboxContainer.querySelector(".vscomp-option.focused")),e){var i,o=this.$optionsContainer.getBoundingClientRect(),s=e.getBoundingClientRect(),n=o.top,l=o.bottom,a=o.height,r=s.top,u=s.bottom,p=s.height,c=e.offsetTop,h=t.DomUtils.getData(this.$options,"top","number");n>r?i=c+h:l<u&&(i=c-a+p+h),console.log("ouaiche"),console.log("st "+i),void 0!==i&&(this.$optionsContainer.scrollTop=i)}}},{key:"removeOptionFocus",value:function(){var e=this.$dropboxContainer.querySelector(".vscomp-option.focused");e&&(t.DomUtils.removeClass(e,"focused"),this.toggleFocusedProp(null))}},{key:"selectOption",value:function(e){if(e){var i=!t.DomUtils.hasClass(e,"selected");if(i){if(this.multiple&&this.isMaxValuesSelected)return}else if(!this.multiple)return void this.closeDropbox();var o=this.selectedValues,s=t.DomUtils.getData(e,"value"),n=t.DomUtils.getData(e,"index");if(this.toggleSelectedProp(n,i),i){if(this.multiple)o.push(s),this.toggleAllOptionsClass();else{o.length&&this.toggleSelectedProp(this.getOptionIndex(o[0]),!1),o=[s];var l=this.$ele.querySelector(".vscomp-option.selected");l&&t.DomUtils.toggleClass(l,"selected",!1),this.closeDropbox()}t.DomUtils.toggleClass(e,"selected")}else this.multiple&&(t.DomUtils.toggleClass(e,"selected"),t.Utils.removeItemFromArray(o,s),this.toggleAllOptionsClass(!1));t.DomUtils.hasClass(e,"current-new")&&this.beforeSelectNewValue(),this.setValue(o,!0)}}},{key:"selectFocusedOption",value:function(){this.selectOption(this.$dropboxContainer.querySelector(".vscomp-option.focused"))}},{key:"toggleAllOptions",value:function(e){if(this.multiple&&!this.disableSelectAll){"boolean"!=typeof e&&(e=!t.DomUtils.hasClass(this.$toggleAllCheckbox,"checked"));var i=[];this.options.forEach((function(t){t.isDisabled||t.isCurrentNew||t.isGroupTitle||(t.isSelected=e,e&&i.push(t.value))})),this.toggleAllOptionsClass(e),this.setValue(i,!0),this.renderOptions()}}},{key:"toggleAllOptionsClass",value:function(e){"boolean"!=typeof e&&(e=!1,this.options.length&&(e=!this.options.some((function(t){return!t.isSelected&&!t.isDisabled&&!t.isGroupTitle})))),t.DomUtils.toggleClass(this.$toggleAllCheckbox,"checked",e),this.isAllSelected=e}},{key:"toggleFocusedProp",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this.focusedOptionIndex&&this.setOptionProp(this.focusedOptionIndex,"isFocused",!1),this.setOptionProp(t,"isFocused",e),this.focusedOptionIndex=t}},{key:"toggleSelectedProp",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this.setOptionProp(t,"isSelected",e)}},{key:"scrollToTop",value:function(){var t=!this.isOpened();t&&this.openDropbox(!0),this.$optionsContainer.scrollTop>0&&(this.$optionsContainer.scrollTop=0),t&&this.closeDropbox(!0)}},{key:"reset",value:function(){this.options.forEach((function(t){t.isSelected=!1})),this.beforeValueSet(!0),this.setValue(null,!0),this.afterValueSet()}},{key:"beforeValueSet",value:function(t){this.toggleAllOptionsClass(!t&&void 0)}},{key:"afterValueSet",value:function(){this.scrollToTop(),this.setSearchValue(""),this.renderOptions()}},{key:"afterSetOptions",value:function(t){t&&this.setSelectedProp(),this.setOptionsHeight(),this.setVisibleOptions(),t||this.reset()}},{key:"addOption",value:function(t,e){if(t){this.lastOptionIndex++,t.index=this.lastOptionIndex;var i=this.getOptionObj(t);this.options.push(i),this.sortedOptions.push(i),e&&(this.visibleOptionsCount++,this.afterSetOptions())}}},{key:"removeOption",value:function(t){(t||0==t)&&(this.options.splice(t,1),this.lastOptionIndex--)}},{key:"removeNewOption",value:function(){var t=this.getNewOption();t&&this.removeOption(t.index)}},{key:"beforeSelectNewValue",value:function(){var t=this,e=this.getNewOption(),i=e.index;this.newValues.push(e.value),this.setOptionProp(i,"isCurrentNew",!1),this.setOptionProp(i,"isNew",!0),setTimeout((function(){t.setSearchValue(""),t.focusSearchInput()}),0)}},{key:"sortOptions",value:function(t){return t.sort((function(t,e){return t.isSelected||e.isSelected?t.isSelected&&(!e.isSelected||t.index<e.index)?-1:1:0}))}},{key:"sortOptionsGroup",value:function(t){var e=this.sortOptions;return(t=this.structureOptionGroup(t)).forEach((function(t){var i=t.options;t.isSelected=i.some((function(t){return t.isSelected})),t.isSelected&&e(i)})),e(t),this.destructureOptionGroup(t)}},{key:"isOptionVisible",value:function(t,e,i,o){var s=t.label.toLowerCase(),n=t.description,l=t.alias,a=-1!==s.indexOf(e);return t.isGroupTitle&&(a=o[t.index]),l&&!a&&(a=-1!==l.indexOf(e)),n&&!a&&(a=-1!==n.toLowerCase().indexOf(e)),t.isVisible=a,i||(i=s===e),{isVisible:a,hasExactOption:i}}},{key:"structureOptionGroup",value:function(t){var e=[],i={};return t.forEach((function(t){if(t.isGroupTitle){var o=[];t.options=o,i[t.index]=o,e.push(t)}})),t.forEach((function(t){t.isGroupOption&&i[t.groupIndex].push(t)})),e}},{key:"destructureOptionGroup",value:function(t){var e=[];return t.forEach((function(t){e.push(t),e=e.concat(t.options)})),e}},{key:"serverSearch",value:function(e){t.DomUtils.removeClass(this.$wrapper,"has-no-options"),t.DomUtils.addClass(this.$wrapper,"server-searching"),this.onServerSearch(e,this)}}])&&a(o.prototype,n),l&&a(o,l),i}();document.addEventListener("reset",u.resetForm),window.addEventListener("resize",u.onResizeMethod),window.VirtualSelect=u})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aXJ0dWFsLXNlbGVjdC8uL3NyYy91dGlscy9kb20tdXRpbHMuanMiLCJ3ZWJwYWNrOi8vdmlydHVhbC1zZWxlY3QvLi9zcmMvdXRpbHMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vdmlydHVhbC1zZWxlY3Qvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vdmlydHVhbC1zZWxlY3Qvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3ZpcnR1YWwtc2VsZWN0L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vdmlydHVhbC1zZWxlY3Qvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly92aXJ0dWFsLXNlbGVjdC8uL3NyYy92aXJ0dWFsLXNlbGVjdC5qcyJdLCJuYW1lcyI6WyJEb21VdGlscyIsIiRlbGUiLCJjbGFzc05hbWUiLCJzcGxpdCIsInRoaXMiLCJnZXRFbGVtZW50cyIsImZvckVhY2giLCJfdGhpcyIsImNsYXNzTGlzdCIsImFkZCIsInJlbW92ZSIsImlzQWRkIiwiaXNBZGRlZCIsInVuZGVmaW5lZCIsIkJvb2xlYW4iLCJ0b2dnbGUiLCJjb250YWlucyIsInNjcm9sbFdpZHRoIiwib2Zmc2V0V2lkdGgiLCJib3giLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJhdmFpbGFibGVXaWR0aCIsIndpbmRvdyIsImlubmVyV2lkdGgiLCJhdmFpbGFibGVIZWlnaHQiLCJpbm5lckhlaWdodCIsImxlZnRBcmVhIiwibGVmdCIsInRvcEFyZWEiLCJ0b3AiLCJob3Jpem9udGFsIiwid2lkdGgiLCJ2ZXJ0aWNhbCIsImhlaWdodCIsIm5hbWUiLCJ0eXBlIiwidmFsdWUiLCJkYXRhc2V0IiwicGFyc2VGbG9hdCIsInN0eWxlIiwibGVuZ3RoIiwicHJvcHMiLCJza2lwQXR0ck5hbWUiLCJyZXN1bHQiLCJrIiwiZGF0YSIsImh0bWwiLCJVdGlscyIsInRleHQiLCJ0b1N0cmluZyIsImRlZmF1bHRWYWx1ZSIsIkFycmF5IiwiaXNBcnJheSIsIk9iamVjdCIsImtleXMiLCJpc0VtcHR5IiwiYXJyYXkiLCJjbG9uZUFycmF5IiwiaW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwiZmlsdGVyIiwiZCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwia2V5RG93bk1ldGhvZE1hcHBpbmciLCIxMyIsIjI3IiwiMzgiLCI0MCIsIlZpcnR1YWxTZWxlY3QiLCJvcHRpb25zIiwic2V0UHJvcHMiLCJzZXREaXNhYmxlZE9wdGlvbnMiLCJkaXNhYmxlZE9wdGlvbnMiLCJzZXRPcHRpb25zIiwicmVuZGVyIiwiZSIsImNvbnNvbGUiLCJ3YXJuIiwiZXJyb3IiLCIkZWxlQXJyYXkiLCJlbGUiLCJzaW5nbGVFbGUiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJpbnN0YW5jZXMiLCJwdXNoIiwiJGVsZVRvS2VlcE9wZW4iLCJxdWVyeVNlbGVjdG9yQWxsIiwicGFyZW50RWxlbWVudCIsInZpcnR1YWxTZWxlY3QiLCJjbG9zZURyb3Bib3giLCIkZm9ybSIsInRhcmdldCIsImNsb3Nlc3QiLCJyZXNldCIsInNpbGVudENoYW5nZSIsInNldFZhbHVlTWV0aG9kIiwic2V0T3B0aW9uc01ldGhvZCIsInNldERpc2FibGVkT3B0aW9uc01ldGhvZCIsImlzU2VsZWN0ZWQiLCJ0b2dnbGVBbGxPcHRpb25zIiwiaXNBbGxTZWxlY3RlZCIsImFkZE9wdGlvbiIsImdldE5ld1ZhbHVlIiwiZ2V0RGlzcGxheVZhbHVlIiwib3BlbkRyb3Bib3giLCJvblJlc2l6ZSIsIndyYXBwZXJDbGFzc2VzIiwidmFsdWVUb29sdGlwIiwiZ2V0VG9vbHRpcEF0dHJUZXh0IiwibXVsdGlwbGUiLCJjbGVhckJ1dHRvblRvb2x0aXAiLCJkcm9wYm94Q29udGFpbmVyU3R5bGUiLCJ6SW5kZXgiLCJhZGRpdGlvbmFsQ2xhc3NlcyIsImRpc2FibGVTZWxlY3RBbGwiLCJwb3NpdGlvbiIsImhpZGVDbGVhckJ1dHRvbiIsImtlZXBBbHdheXNPcGVuIiwic2hvd0FzUG9wdXAiLCJkcm9wYm94V2lkdGgiLCJoYXNTZWFyY2giLCJwbGFjZWhvbGRlciIsIm5vT3B0aW9uc1RleHQiLCJub1NlYXJjaFJlc3VsdHNUZXh0IiwiaW5uZXJIVE1MIiwiJGJvZHkiLCIkd3JhcHBlciIsIiR0b2dnbGVCdXR0b24iLCIkY2xlYXJCdXR0b24iLCIkZHJvcGJveENvbnRhaW5lciIsIiRkcm9wYm94Q2xvc2VCdXR0b24iLCIkc2VhcmNoIiwiJG9wdGlvbnNDb250YWluZXIiLCIkb3B0aW9uc0xpc3QiLCIkb3B0aW9ucyIsIiR2YWx1ZVRleHQiLCIkaGlkZGVuSW5wdXQiLCIkbm9PcHRpb25zIiwiJG5vU2VhcmNoUmVzdWx0cyIsImFmdGVyUmVuZGVyV3JhcHBlciIsInNlYXJjaFJlZ2V4IiwidmlzaWJsZU9wdGlvbnMiLCJnZXRWaXNpYmxlT3B0aW9ucyIsImNoZWNrYm94SHRtbCIsIm5ld09wdGlvbkljb25IdG1sIiwibWFya1NlYXJjaFJlc3VsdHMiLCJzZWFyY2hWYWx1ZSIsInN0eWxlVGV4dCIsIm9wdGlvbkhlaWdodCIsIlJlZ0V4cCIsImFsbG93TmV3T3B0aW9uIiwibmV3T3B0aW9uVG9vbHRpcCIsIm9wdGlvbkxhYmVsIiwibGFiZWwiLCJvcHRpb25DbGFzc2VzIiwib3B0aW9uVG9vbHRpcCIsImxlZnRTZWN0aW9uIiwicmlnaHRTZWN0aW9uIiwiZGVzY3JpcHRpb24iLCJpc0ZvY3VzZWQiLCJpc0Rpc2FibGVkIiwiaXNHcm91cFRpdGxlIiwiaXNHcm91cE9wdGlvbiIsImlzQ3VycmVudE5ldyIsInJlcGxhY2UiLCJ2aXNpYmxlSW5kZXgiLCJoYXNOb09wdGlvbnMiLCJoYXNOb1NlYXJjaFJlc3VsdHMiLCJzZXRPcHRpb25zUG9zaXRpb24iLCJzZXRPcHRpb25zVG9vbHRpcCIsImhhc1NlYXJjaENvbnRhaW5lciIsInNlYXJjaElucHV0Iiwic2VsZWN0QWxsVGV4dCIsIiRzZWFyY2hJbnB1dCIsIiRzZWFyY2hDbGVhciIsIiR0b2dnbGVBbGxCdXR0b24iLCIkdG9nZ2xlQWxsQ2hlY2tib3giLCJhZGRFdmVudCIsIm92ZXJyaWRlU2Nyb2xsRXZlbnRTZWxlY3RvciIsImV2ZW50cyIsIm1ldGhvZCIsImV2ZW50IiwiZXZlbnRzS2V5IiwiY2FsbGJhY2siLCJiaW5kIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50TmFtZSIsInNldFRpbWVvdXQiLCJkaXNwYXRjaEV2ZW50IiwiRXZlbnQiLCJidWJibGVzIiwiY2xvc2VBbGxEcm9wYm94Iiwid2hpY2giLCJrZXlDb2RlIiwiaXNPcGVuZWQiLCJzZWxlY3RGb2N1c2VkT3B0aW9uIiwicHJldmVudERlZmF1bHQiLCJmb2N1c09wdGlvbiIsInRvZ2dsZURyb3Bib3giLCJzZXRWaXNpYmxlT3B0aW9ucyIsInNlbGVjdE9wdGlvbiIsInJlbW92ZU9wdGlvbkZvY3VzIiwic3RvcFByb3BhZ2F0aW9uIiwic2V0U2VhcmNoVmFsdWUiLCJmb2N1c1NlYXJjaElucHV0Iiwic2V0T3B0aW9uc0NvbnRhaW5lckhlaWdodCIsInNldEF0dHJpYnV0ZSIsInJlbmRlclNlYXJjaCIsInNldE9wdGlvbnNIZWlnaHQiLCJhZGRFdmVudHMiLCJzZXRNZXRob2RzIiwiaW5pdGlhbFNlbGVjdGVkVmFsdWUiLCJzaWxlbnRJbml0aWFsVmFsdWVTZXQiLCJhdXRvU2VsZWN0Rmlyc3RPcHRpb24iLCJzZXREZWZhdWx0UHJvcHMiLCJzZXRQcm9wc0Zyb21FbGVtZW50QXR0ciIsImNvbnZlcnRUb0Jvb2xlYW4iLCJ2YWx1ZUtleSIsImxhYmVsS2V5IiwiZGVzY3JpcHRpb25LZXkiLCJhbGlhc0tleSIsIm9wdGlvbkhlaWdodFRleHQiLCJzZWFyY2giLCJoYXNPcHRpb25EZXNjcmlwdGlvbiIsInNob3dTZWxlY3RlZE9wdGlvbnNGaXJzdCIsInNob3dEcm9wYm94QXNQb3B1cCIsInRvb2x0aXBGb250U2l6ZSIsInRvb2x0aXBBbGlnbm1lbnQiLCJ0b29sdGlwTWF4V2lkdGgiLCJub09mRGlzcGxheVZhbHVlcyIsInBhcnNlSW50IiwibWF4VmFsdWVzIiwic2VsZWN0ZWRWYWx1ZSIsInBvcHVwRHJvcGJveEJyZWFrcG9pbnQiLCJvblNlcnZlclNlYXJjaCIsInNlbGVjdGVkVmFsdWVzIiwibmV3VmFsdWVzIiwidG9vbHRpcEVudGVyRGVsYXkiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJzZWFyY2hWYWx1ZU9yaWdpbmFsIiwiaGFzU2VydmVyU2VhcmNoIiwib3B0aW9uc0NvdW50IiwiZ2V0T3B0aW9uc0NvdW50IiwiaGFsZk9wdGlvbnNDb3VudCIsIk1hdGgiLCJjZWlsIiwib3B0aW9uc0hlaWdodCIsImdldE9wdGlvbnNIZWlnaHQiLCJkZWZhdWx0T3B0aW9ucyIsImFzc2lnbiIsIm1hcHBpbmciLCJnZXRBdHRyaWJ1dGUiLCJzZXRWYWx1ZSIsInRvZ2dsZVNlbGVjdEFsbCIsImFkZE9wdGlvbk1ldGhvZCIsImdldE5ld1ZhbHVlTWV0aG9kIiwiZ2V0RGlzcGxheVZhbHVlTWV0aG9kIiwib3BlbiIsIm9wZW5NZXRob2QiLCJjbG9zZSIsImNsb3NlTWV0aG9kIiwibWFwIiwidiIsInZhbGlkVmFsdWVzIiwiYmVmb3JlVmFsdWVTZXQiLCJhZnRlclZhbHVlU2V0Iiwia2VlcFZhbHVlIiwiYWZ0ZXJTZXRPcHRpb25zIiwic2V0T3B0aW9uc1Byb3AiLCJwcmVwYXJlZE9wdGlvbnMiLCJoYXNEaXNhYmxlZE9wdGlvbnMiLCJnZXRTdHJpbmciLCJnZXRBbGlhcyIsImhhc09wdGlvbkdyb3VwIiwicHJlcGFyZU9wdGlvbiIsImNoaWxkT3B0aW9ucyIsIm9wdGlvbiIsImFsaWFzIiwiaXNWaXNpYmxlIiwiZ3JvdXBJbmRleCIsInZpc2libGVPcHRpb25zQ291bnQiLCJsYXN0T3B0aW9uSW5kZXgiLCJzZXRTb3J0ZWRPcHRpb25zIiwic29ydGVkT3B0aW9ucyIsInNvcnRPcHRpb25zR3JvdXAiLCJzb3J0T3B0aW9ucyIsIm1heE9wdGlvbnNUb1Nob3ciLCJzdGFydEluZGV4IiwiZ2V0VmlzaWJsZVN0YXJ0SW5kZXgiLCJuZXdPcHRpb24iLCJnZXROZXdPcHRpb24iLCJlbmRJbmRleCIsImkiLCJpblZpZXciLCJyZW5kZXJPcHRpb25zIiwidHJhbnNmb3JtIiwiJG9wdGlvbkVsZSIsInRyaWdnZXJFdmVudCIsIm5ld1ZhbHVlIiwiaXNNYXhWYWx1ZXNTZWxlY3RlZCIsInNldFZhbHVlVGV4dCIsInZhbHVlVGV4dCIsInNlbGVjdGVkTGVuZ3RoIiwic2VsZWN0ZWRWYWx1ZXNDb3VudCIsIm1vcmVTZWxlY3RlZE9wdGlvbnMiLCJhZ2dyZWdhdGVkVmFsdWVUZXh0Iiwiam9pbiIsImNvdW50VGV4dCIsInNraXBJbnB1dFNldCIsInRvTG93ZXJDYXNlIiwidHJpbSIsInNlcnZlclNlYXJjaCIsInZpc2libGVPcHRpb25Hcm91cHNNYXBwaW5nIiwiaGFzRXhhY3RPcHRpb24iLCJpc09wdGlvblZpc2libGUiLCJnZXRWaXNpYmxlT3B0aW9uR3JvdXBzTWFwcGluZyIsInNldE5ld09wdGlvbiIsInJlbW92ZU5ld09wdGlvbiIsInNjcm9sbFRvVG9wIiwiYWZ0ZXJTZXRPcHRpb25zQ29udGFpbmVySGVpZ2h0IiwibW9yZVZpc2libGVTaWRlcyIsInNob3dPbkxlZnQiLCJidXR0b25Db29yZHMiLCJ2aWV3cG9ydFdpZHRoIiwiaGlkZGVuT25SaWdodCIsImhpZGRlbk9uTGVmdCIsInJpZ2h0IiwibmV3SW5kZXgiLCJzZXRPcHRpb25Qcm9wIiwic2Nyb2xsVG9wIiwiZ2V0Rmlyc3RWaXNpYmxlT3B0aW9uSW5kZXgiLCJlbGxpcHNpc09ubHkiLCJhbGxvd0h0bWwiLCJsYXN0T3B0aW9uIiwic29tZSIsImRpc3BsYXlWYWx1ZXMiLCJzdHJ1Y3R1cmVPcHRpb25Hcm91cCIsImNvdW50IiwiZmxvb3IiLCJkaXJlY3Rpb24iLCJwcm9wTmFtZSIsImlzU2lsZW50Iiwic2V0RHJvcGJveFBvc2l0aW9uIiwibW92ZVNlbGVjdGVkT3B0aW9uc0ZpcnN0IiwiaXNQb3B1cEFjdGl2ZSIsImZvY3VzIiwiJG5ld0ZvY3VzZWRFbGUiLCIkZm9jdXNlZEVsZSIsImdldFNpYmxpbmciLCJmaXJzdFZpc2libGVPcHRpb25JbmRleCIsInRvZ2dsZUZvY3VzZWRQcm9wIiwibW92ZUZvY3VzZWRPcHRpb25Ub1ZpZXciLCJuZXdTY3JvbGxUb3AiLCJjb250YWluZXJSZWN0Iiwib3B0aW9uUmVjdCIsImNvbnRhaW5lclRvcCIsImNvbnRhaW5lckJvdHRvbSIsImJvdHRvbSIsImNvbnRhaW5lckhlaWdodCIsIm9wdGlvblRvcCIsIm9wdGlvbkJvdHRvbSIsIm9wdGlvbk9mZnNldFRvcCIsIm9mZnNldFRvcCIsIm9wdGlvbnNUb3AiLCJsb2ciLCJpc0FkZGluZyIsInNlbGVjdGVkSW5kZXgiLCJ0b2dnbGVTZWxlY3RlZFByb3AiLCJ0b2dnbGVBbGxPcHRpb25zQ2xhc3MiLCJnZXRPcHRpb25JbmRleCIsIiRwcmV2U2VsZWN0ZWRPcHRpb24iLCJiZWZvcmVTZWxlY3ROZXdWYWx1ZSIsImZvY3VzZWRPcHRpb25JbmRleCIsImlzQ2xvc2VkIiwiaXNSZXNldCIsInNldFNlbGVjdGVkUHJvcCIsInJlcmVuZGVyIiwiZ2V0T3B0aW9uT2JqIiwicmVtb3ZlT3B0aW9uIiwic29ydCIsImEiLCJiIiwiZGVzdHJ1Y3R1cmVPcHRpb25Hcm91cCIsImNoaWxkQXJyYXkiLCJjb25jYXQiLCJyZXNldEZvcm0iLCJvblJlc2l6ZU1ldGhvZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs2OUJBQU8sSUFBTUEsRUFBYix5Qiw0RkFBQSxTLFVBQUEsTyxFQUFBLEUsRUFBQSxnQ0FDa0JDLEVBQU1DLEdBQ2ZELElBSUxDLEVBQVlBLEVBQVVDLE1BQU0sS0FFNUJDLEtBQUtDLFlBQVlKLEdBQU1LLFNBQVEsU0FBQ0MsR0FBVSxPQUN4QyxFQUFBQSxFQUFNQyxXQUFVQyxJQUFoQixVQUF1QlAsVUFUN0Isa0NBYXFCRCxFQUFNQyxHQUNsQkQsSUFJTEMsRUFBWUEsRUFBVUMsTUFBTSxLQUU1QkMsS0FBS0MsWUFBWUosR0FBTUssU0FBUSxTQUFDQyxHQUFVLE9BQ3hDLEVBQUFBLEVBQU1DLFdBQVVFLE9BQWhCLFVBQTBCUixVQXJCaEMsa0NBeUJxQkQsRUFBTUMsRUFBV1MsR0FTbEMsSUFBSUMsRUFSSixHQUFLWCxFQWNMLFlBVmNZLElBQVZGLElBQ0ZBLEVBQVFHLFFBQVFILElBS2xCUCxLQUFLQyxZQUFZSixHQUFNSyxTQUFRLFNBQUNDLEdBQzlCSyxFQUFVTCxFQUFNQyxVQUFVTyxPQUFPYixFQUFXUyxNQUd2Q0MsSUF4Q1gsK0JBMkNrQlgsRUFBTUMsR0FDcEIsUUFBS0QsR0FJRUEsRUFBS08sVUFBVVEsU0FBU2QsS0FoRG5DLGtDQW1EcUJELEdBQ2pCLFFBQUtBLEdBSUVBLEVBQUtnQixZQUFjaEIsRUFBS2lCLGNBeERuQywwQ0EyRDZCakIsR0FDekIsSUFBS0EsRUFDSCxNQUFPLEdBR1QsSUFBSWtCLEVBQU1sQixFQUFLbUIsd0JBQ1hDLEVBQWlCQyxPQUFPQyxXQUN4QkMsRUFBa0JGLE9BQU9HLFlBQ3pCQyxFQUFXUCxFQUFJUSxLQUNmQyxFQUFVVCxFQUFJVSxJQU1sQixNQUFPLENBQ0xDLFdBSmVKLEVBRkRMLEVBQWlCSyxFQUFXUCxFQUFJWSxNQUVSLE9BQVMsUUFLL0NDLFNBSmFKLEVBRkVKLEVBQWtCSSxFQUFVVCxFQUFJYyxPQUVYLE1BQVEsWUF4RWxELDhCQWdGaUJoQyxFQUFNaUMsRUFBTUMsR0FDekIsR0FBS2xDLEVBQUwsQ0FJQSxJQUFJbUMsRUFBUW5DLEVBQU9BLEVBQUtvQyxRQUFRSCxHQUFRLEdBWXhDLE1BVmEsV0FBVEMsRUFDRkMsRUFBUUUsV0FBV0YsSUFBVSxFQUVmLFNBQVZBLEVBQ0ZBLEdBQVEsRUFDVyxVQUFWQSxJQUNUQSxHQUFRLEdBSUxBLEtBakdYLDhCQW9HaUJuQyxFQUFNaUMsRUFBTUUsR0FDcEJuQyxJQUlMQSxFQUFLb0MsUUFBUUgsR0FBUUUsS0F6R3pCLCtCQTRHa0JuQyxFQUFNaUMsRUFBTUUsR0FDckJuQyxJQUlMQSxFQUFLc0MsTUFBTUwsR0FBUUUsS0FqSHZCLGtDQW9IcUJuQyxHQUNqQixHQUFLQSxFQVFMLFlBSm9CWSxJQUFoQlosRUFBS3VDLFNBQ1B2QyxFQUFPLENBQUNBLElBR0hBLElBN0hYLG1DQWlJc0J3QyxFQUFPQyxHQUN6QixJQUFJQyxFQUFTLEdBRWIsSUFBSyxJQUFJQyxLQUFLSCxFQUNaRSxHQUFVLEdBQUosT0FBT0MsRUFBUCxhQUFhSCxFQUFNRyxHQUFuQixLQU9SLE9BSklELElBQVdELElBQ2JDLEVBQVMsVUFBSCxPQUFhQSxFQUFiLE1BR0RBLElBNUlYLHdDQWdKMkJFLEdBQ3ZCLElBQUlDLEVBQU8sR0FFWCxJQUFLRCxFQUNILE9BQU9DLEVBR1QsSUFBSyxJQUFJRixLQUFLQyxFQUFNLENBQ2xCLElBQUlULEVBQVFTLEVBQUtELFFBRUgvQixJQUFWdUIsSUFDRlUsR0FBUSxJQUFKLE9BQVFGLEVBQVIsYUFBY1IsRUFBZCxPQUlSLE9BQU9VLE0sRUEvSlgsTywyQkFBQSxNOzs7Ozs7MnJDQ0FPLElBQU1DLEVBQWIseUIsNEZBQUEsUyxVQUFBLE8sRUFBQSxFLEVBQUEsaUNBQ21CQyxHQUNmLE9BQU9BLEdBQWlCLElBQVRBLEVBQWFBLEVBQUtDLFdBQWEsS0FGbEQsdUNBSzBCYixHQUE2QixJQUF0QmMsRUFBc0Isd0RBU25ELE9BUEVkLEdBRFksSUFBVkEsR0FBNEIsU0FBVkEsSUFFRCxJQUFWQSxHQUE2QixVQUFWQSxHQUdwQmMsSUFYZCw4QkFpQmlCZCxHQUNiLElBQUlPLEdBQVMsRUFjYixPQVpLUCxFQUVNZSxNQUFNQyxRQUFRaEIsR0FDRixJQUFqQkEsRUFBTUksU0FDUkcsR0FBUyxHQUVlLFdBQWpCLEVBQU9QLElBQ2tCLElBQTlCaUIsT0FBT0MsS0FBS2xCLEdBQU9JLFNBQ3JCRyxHQUFTLEdBUFhBLEdBQVMsRUFXSkEsSUFoQ1gsaUNBbUNvQlAsR0FDaEIsT0FBUWhDLEtBQUttRCxRQUFRbkIsS0FwQ3pCLDBDQXVDNkJvQixFQUFPcEIsRUFBT3FCLEdBQ3ZDLElBQUtOLE1BQU1DLFFBQVFJLEtBQVdBLEVBQU1oQixTQUFXSixFQUM3QyxPQUFPb0IsRUFHTEMsSUFDRkQsRUFBUSxFQUFJQSxJQUdkLElBQUlFLEVBQVFGLEVBQU1HLFFBQVF2QixHQU0xQixPQUplLElBQVhzQixHQUNGRixFQUFNSSxPQUFPRixFQUFPLEdBR2ZGLElBdERYLHVDQXlEMEJBLEdBQ3RCLE9BQUtMLE1BQU1DLFFBQVFJLElBQVdBLEVBQU1oQixPQUk3QmdCLEVBQU1LLFFBQU8sU0FBQ0MsR0FBRCxRQUFTQSxLQUhwQixPLEVBM0RiLE8sMkJBQUEsT0NDSUMsRUFBMkIsR0FHL0IsU0FBU0MsRUFBb0JDLEdBRTVCLEdBQUdGLEVBQXlCRSxHQUMzQixPQUFPRixFQUF5QkUsR0FBVUMsUUFHM0MsSUFBSUMsRUFBU0osRUFBeUJFLEdBQVksQ0FHakRDLFFBQVMsSUFPVixPQUhBRSxFQUFvQkgsR0FBVUUsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0NHLEVBQU9ELFFDbkJmRixFQUFvQkYsRUFBSSxDQUFDSSxFQUFTRyxLQUNqQyxJQUFJLElBQUlDLEtBQU9ELEVBQ1hMLEVBQW9CTyxFQUFFRixFQUFZQyxLQUFTTixFQUFvQk8sRUFBRUwsRUFBU0ksSUFDNUVqQixPQUFPbUIsZUFBZU4sRUFBU0ksRUFBSyxDQUFFRyxZQUFZLEVBQU1DLElBQUtMLEVBQVdDLE1DSjNFTixFQUFvQk8sRUFBSSxDQUFDSSxFQUFLQyxJQUFVdkIsT0FBT3dCLFVBQVVDLGVBQWVDLEtBQUtKLEVBQUtDLEdDQ2xGWixFQUFvQmdCLEVBQUtkLElBQ0gsb0JBQVhlLFFBQTBCQSxPQUFPQyxhQUMxQzdCLE9BQU9tQixlQUFlTixFQUFTZSxPQUFPQyxZQUFhLENBQUU5QyxNQUFPLFdBRTdEaUIsT0FBT21CLGVBQWVOLEVBQVMsYUFBYyxDQUFFOUIsT0FBTyxLOzs7O3FsRENIdkQsSUFJTStDLEVBQXVCLENBQzNCQyxHQUFJLGVBQ0pDLEdBQUksYUFDSkMsR0FBSSxpQkFDSkMsR0FBSSxvQkFJT0MsRUFBYixXQStDRSxXQUFZQyxJLDRGQUFTLFNBQ25CLElBQ0VyRixLQUFLc0YsU0FBU0QsR0FDZHJGLEtBQUt1RixtQkFBbUJGLEVBQVFHLGlCQUNoQ3hGLEtBQUt5RixXQUFXSixFQUFRQSxTQUN4QnJGLEtBQUswRixTQUNMLE1BQU9DLEdBQ1BDLFFBQVFDLEtBQVIsb0NBQ0FELFFBQVFFLE1BQU1ILEksVUF2RHBCLE8sRUFBQSxFLEVBQUEsNEJBMDFEY04sR0FDVixJQUFJVSxFQUFZVixFQUFRVyxJQUV4QixHQUFLRCxFQUFMLENBSUEsSUFBSUUsR0FBWSxFQUVoQixHQUF5QixpQkFBZEYsSUFDVEEsRUFBWUcsU0FBU0MsY0FBY0osSUFEckMsTUFReUJ0RixJQUFyQnNGLEVBQVUzRCxTQUNaMkQsRUFBWSxDQUFDQSxHQUNiRSxHQUFZLEdBR2QsSUFBSUcsRUFBWSxHQU1oQixPQUxBTCxFQUFVN0YsU0FBUSxTQUFDTCxHQUNqQndGLEVBQVFXLElBQU1uRyxFQUNkdUcsRUFBVUMsS0FBSyxJQUFJakIsRUFBY0MsT0FHNUJZLEVBQVlHLEVBQVUsR0FBS0EsTUF0M0R0QyxzQ0F5M0R5QkUsR0FDckJKLFNBQVNLLGlCQUFpQixtQkFBbUJyRyxTQUFRLFNBQUNMLEdBQ2hEeUcsR0FBa0JBLElBQW1CekcsR0FJekNBLEVBQUsyRyxjQUFjQyxjQUFjQyxvQkEvM0R2QyxnQ0FtNERtQmYsR0FDZixJQUFJZ0IsRUFBUWhCLEVBQUVpQixPQUFPQyxRQUFRLFFBRXhCRixHQUlMQSxFQUFNSixpQkFBaUIsbUJBQW1CckcsU0FBUSxTQUFDTCxHQUNqREEsRUFBSzJHLGNBQWNDLGNBQWNLLGFBMzREdkMsOEJBZzVESTlHLEtBQUt5RyxjQUFjSyxVQWg1RHZCLHFDQW01RHdCOUUsRUFBTytFLEdBQzNCL0csS0FBS3lHLGNBQWNPLGVBQWVoRixFQUFPK0UsS0FwNUQ3Qyx1Q0F1NUQwQjFCLEdBQ3RCckYsS0FBS3lHLGNBQWNRLGlCQUFpQjVCLEtBeDVEeEMsK0NBMjVEa0NBLEdBQzlCckYsS0FBS3lHLGNBQWNTLHlCQUF5QjdCLEtBNTVEaEQsc0NBKzVEeUI4QixHQUNyQm5ILEtBQUt5RyxjQUFjVyxpQkFBaUJELEtBaDZEeEMsc0NBbzZESSxPQUFPbkgsS0FBS3lHLGNBQWNZLGdCQXA2RDlCLHNDQXU2RHlCNUUsR0FDckJ6QyxLQUFLeUcsY0FBY2EsVUFBVTdFLEdBQU0sS0F4NkR2QywwQ0E0NkRJLE9BQU96QyxLQUFLeUcsY0FBY2MsZ0JBNTZEOUIsZ0NBZzdESSxNQTU3RHlCLFdBWTdCLDhDQW83REksT0FBT3ZILEtBQUt5RyxjQUFjZSxvQkFwN0Q5QixtQ0F3N0RJLE9BQU94SCxLQUFLeUcsY0FBY2dCLGdCQXg3RDlCLG9DQTQ3REksT0FBT3pILEtBQUt5RyxjQUFjQyxpQkE1N0Q5Qix1Q0FnOERJUixTQUFTSyxpQkFBaUIsbUJBQW1CckcsU0FBUSxTQUFDTCxHQUNwREEsRUFBSzJHLGNBQWNDLGNBQWNpQixrQixFQWo4RHZDLGdDQTZESSxHQUFLMUgsS0FBS0gsS0FBVixDQUlBLElBQUk4SCxFQUFpQixpQkFDakJDLEVBQWU1SCxLQUFLNkgsbUJBQW1CLElBQUs3SCxLQUFLOEgsVUFBVSxHQUMzREMsRUFBcUIvSCxLQUFLNkgsbUJBQW1CLFNBRTdDRyxFQUF3QixDQUMxQixVQUFXaEksS0FBS2lJLFFBR2RqSSxLQUFLa0ksb0JBQ1BQLEdBQWtCLElBQU0zSCxLQUFLa0ksbUJBRzNCbEksS0FBSzhILFdBQ1BILEdBQWtCLFlBRWIzSCxLQUFLbUksbUJBQ1JSLEdBQWtCLG9CQUlBLFFBQWxCM0gsS0FBS29JLFdBQ1BULEdBQWtCLGlCQUdmM0gsS0FBS3FJLGtCQUNSVixHQUFrQixxQkFHaEIzSCxLQUFLc0ksZUFDUFgsR0FBa0IsMkJBRWxCQSxHQUFrQixVQUdoQjNILEtBQUt1SSxZQUNQWixHQUFrQixpQkFFZDNILEtBQUt3SSxlQUNQUixFQUFzQnJHLE1BQVEzQixLQUFLd0ksY0FJbkN4SSxLQUFLeUksWUFDUGQsR0FBa0IscUJBR3BCLElBQUlqRixFQUFPLGVBQUgsT0FBa0JpRixFQUFsQiwrREFDeUIzSCxLQUFLOEIsS0FEOUIsNkhBSTBCOEYsRUFKMUIsMEJBS0U1SCxLQUFLMEksWUFMUCw4SUFVcURYLEVBVnJELCtJQWVvQ25JLHdCQUN0Q29JLEdBaEJFLDBaQTZCaUNoSSxLQUFLMkksY0E3QnRDLHFFQStCRTNJLEtBQUs0SSxvQkEvQlAsNEpBdUNSNUksS0FBS0gsS0FBS2dKLFVBQVluRyxFQUN0QjFDLEtBQUs4SSxNQUFRNUMsU0FBU0MsY0FBYyxRQUNwQ25HLEtBQUsrSSxTQUFXL0ksS0FBS0gsS0FBS3NHLGNBQWMsbUJBQ3hDbkcsS0FBS2dKLGNBQWdCaEosS0FBS0gsS0FBS3NHLGNBQWMseUJBQzdDbkcsS0FBS2lKLGFBQWVqSixLQUFLSCxLQUFLc0csY0FBYyx3QkFDNUNuRyxLQUFLa0osa0JBQW9CbEosS0FBS0gsS0FBS3NHLGNBQ2pDLDZCQUVGbkcsS0FBS21KLG9CQUFzQm5KLEtBQUtILEtBQUtzRyxjQUNuQyxnQ0FFRm5HLEtBQUtvSixRQUFVcEosS0FBS0gsS0FBS3NHLGNBQWMsMEJBQ3ZDbkcsS0FBS3FKLGtCQUFvQnJKLEtBQUtILEtBQUtzRyxjQUNqQyw2QkFFRm5HLEtBQUtzSixhQUFldEosS0FBS0gsS0FBS3NHLGNBQWMsd0JBQzVDbkcsS0FBS3VKLFNBQVd2SixLQUFLSCxLQUFLc0csY0FBYyxtQkFDeENuRyxLQUFLd0osV0FBYXhKLEtBQUtILEtBQUtzRyxjQUFjLGlCQUMxQ25HLEtBQUt5SixhQUFlekosS0FBS0gsS0FBS3NHLGNBQWMsd0JBQzVDbkcsS0FBSzBKLFdBQWExSixLQUFLSCxLQUFLc0csY0FBYyxzQkFDMUNuRyxLQUFLMkosaUJBQW1CM0osS0FBS0gsS0FBS3NHLGNBQ2hDLDZCQUdGbkcsS0FBSzRKLHdCQTlLVCxzQ0FpTGtCLElBT1ZDLEVBUFUsT0FDVm5ILEVBQU8sR0FDUG9ILEVBQWlCOUosS0FBSytKLG9CQUN0QkMsRUFBZSxHQUNmQyxFQUFvQixHQUNwQkMsS0FDRmxLLEtBQUtrSyxvQkFBcUJsSyxLQUFLbUssYUFHN0JDLEVBQVl4Syx3QkFBc0IsQ0FDcENpQyxPQUFRN0IsS0FBS3FLLGFBQWUsT0FXOUIsR0FSSUgsSUFDRkwsRUFBYyxJQUFJUyxPQUFKLFdBQWV0SyxLQUFLbUssWUFBcEIsS0FBb0MsT0FHaERuSyxLQUFLOEgsV0FDUGtDLEVBQWUsdUNBR2JoSyxLQUFLdUssZUFBZ0IsQ0FDdkIsSUFBSUMsRUFBbUJ4SyxLQUFLNkgsbUJBQW1CLGNBQy9Db0MsRUFBb0Isd0NBQUgsT0FBMkNPLEVBQTNDLFlBR25CVixFQUFlNUosU0FBUSxTQUFDd0QsR0FDdEIsSUFBSStHLEVBQWMvRyxFQUFFZ0gsTUFDaEJDLEVBQWdCLGdCQUNoQkMsRUFBZ0IsRUFBSy9DLG1CQUFtQixJQUFJLEdBQzVDZ0QsRUFBY2IsRUFDZGMsRUFBZSxHQUNmQyxFQUFjLEdBRWRySCxFQUFFc0gsWUFDSkwsR0FBaUIsWUFHZmpILEVBQUV1SCxhQUNKTixHQUFpQixhQUdmakgsRUFBRXdILGNBQ0pQLEdBQWlCLGVBQ2pCRSxFQUFjLElBRVZuSCxFQUFFeUQsYUFDSndELEdBQWlCLGFBSWpCakgsRUFBRXlILGdCQUNKUixHQUFpQixpQkFHZmpILEVBQUVxSCxjQUNKQSxFQUFjLDBDQUFILE9BQTZDSCxFQUE3QyxZQUE4RGxILEVBQUVxSCxZQUFoRSxXQUdUckgsRUFBRTBILGNBQ0pULEdBQWlCLGVBQ2pCRyxHQUFnQmIsR0FFWkMsSUFBc0J4RyxFQUFFd0gsZUFDMUJULEVBQWNBLEVBQVlZLFFBQVF4QixFQUFhLG9CQUluRG5ILEdBQVEsZUFBSixPQUFtQmlJLEVBQW5CLHlCQUFpRGpILEVBQUUxQixNQUFuRCx5QkFBeUUwQixFQUFFSixNQUEzRSxpQ0FBeUdJLEVBQUU0SCxhQUEzRyxhQUE0SGxCLEVBQTVILHdCQUNFUyxFQURGLHdEQUVtQ0QsRUFGbkMsMEJBR0lILEVBSEosMENBS0VNLEVBTEYsdUJBTUVELEVBTkYsdUJBVU45SyxLQUFLdUosU0FBU1YsVUFBWW5HLEVBQzFCLElBQUk2SSxHQUFnQnZMLEtBQUtxRixRQUFRakQsT0FDN0JvSixHQUFzQkQsSUFBaUJ6QixFQUFlMUgsT0FFckRwQyxLQUFLdUssZ0JBQ1IzSyx1QkFDRUksS0FBSytJLFNBQ0wsd0JBQ0F5QyxHQUlKNUwsdUJBQXFCSSxLQUFLK0ksU0FBVSxpQkFBa0J3QyxHQUN0RHZMLEtBQUt5TCxxQkFDTHpMLEtBQUswTCxzQkE3UVQscUNBa1JJLEdBQUsxTCxLQUFLMkwsbUJBQVYsQ0FJQSxJQUFJM0IsRUFBZSxHQUNmNEIsRUFBYyxHQUVkNUwsS0FBSzhILFdBQWE5SCxLQUFLbUksbUJBQ3pCNkIsRUFBZSxzS0FBSCxPQUVnQ2hLLEtBQUs2TCxjQUZyQyw2QkFNVjdMLEtBQUt5SSxZQUNQbUQsRUFBYyxtSUFJaEIsSUFBSWxKLEVBQU8sa0RBQUgsT0FDRnNILEVBREUscUJBRUY0QixFQUZFLGtCQUtSNUwsS0FBS29KLFFBQVFQLFVBQVluRyxFQUN6QjFDLEtBQUs4TCxhQUFlOUwsS0FBS0gsS0FBS3NHLGNBQWMsd0JBQzVDbkcsS0FBSytMLGFBQWUvTCxLQUFLSCxLQUFLc0csY0FBYyx3QkFDNUNuRyxLQUFLZ00saUJBQW1CaE0sS0FBS0gsS0FBS3NHLGNBQ2hDLDZCQUVGbkcsS0FBS2lNLG1CQUFxQmpNLEtBQUtILEtBQUtzRyxjQUNsQywrQkFHRm5HLEtBQUtrTSxTQUFTbE0sS0FBSzhMLGFBQWMsZUFBZ0IsWUFDakQ5TCxLQUFLa00sU0FBU2xNLEtBQUsrTCxhQUFjLFFBQVMsaUJBQzFDL0wsS0FBS2tNLFNBQVNsTSxLQUFLZ00saUJBQWtCLFFBQVMseUJBdFRsRCxrQ0E0VEloTSxLQUFLa00sU0FBU2hHLFNBQVUsUUFBUyxtQkFDakNsRyxLQUFLa00sU0FBU2xNLEtBQUsrSSxTQUFVLFVBQVcsYUFDeEMvSSxLQUFLa00sU0FBU2xNLEtBQUtnSixjQUFlLFFBQVMsdUJBQzNDaEosS0FBS2tNLFNBQVNsTSxLQUFLaUosYUFBYyxRQUFTLHNCQUMxQ2pKLEtBQUtrTSxTQUFTbE0sS0FBS2tKLGtCQUFtQixRQUFTLDJCQUMvQ2xKLEtBQUtrTSxTQUNIbE0sS0FBS21KLG9CQUNMLFFBQ0EsNkJBRUVuSixLQUFLbU0sNEJBQ1BuTSxLQUFLa00sU0FDSGxNLEtBQUtILEtBQUtzRyxjQUFjbkcsS0FBS21NLDZCQUM3QixTQUNBLG1CQUdGbk0sS0FBS2tNLFNBQVNsTSxLQUFLcUosa0JBQW1CLFNBQVUsbUJBRWxEckosS0FBS2tNLFNBQVNsTSxLQUFLdUosU0FBVSxRQUFTLGtCQUN0Q3ZKLEtBQUtrTSxTQUFTbE0sS0FBS3VKLFNBQVUsWUFBYSxzQkFDMUN2SixLQUFLa00sU0FBU2xNLEtBQUt1SixTQUFVLFlBQWEsd0JBalY5QywrQkFvVlcxSixFQUFNdU0sRUFBUUMsR0FBUSxXQUN4QnhNLElBSUx1TSxFQUFTekoseUJBQXVCeUosRUFBT3JNLE1BQU0sT0FFdENHLFNBQVEsU0FBQ29NLEdBQ2QsSUFBSUMsRUFBWSxHQUFILE9BQU1GLEVBQU4sWUFBZ0JDLEdBQ3pCRSxFQUFXLEVBQUtKLE9BQU9HLEdBRXRCQyxJQUNIQSxFQUFXLEVBQUtILEdBQVFJLEtBQUssR0FDN0IsRUFBS0wsT0FBT0csR0FBYUMsSUFHM0IzTSxFQUFPRCx1QkFBcUJDLElBRXZCSyxTQUFRLFNBQUNDLEdBQ1pBLEVBQU11TSxpQkFBaUJKLEVBQU9FLFdBdld0QyxvQ0E0V2dCM00sRUFBTThNLEdBQ2I5TSxJQUlMQSxFQUFPRCx1QkFBcUJDLEdBRTVCK00sWUFBVyxXQUNUL00sRUFBS0ssU0FBUSxTQUFDQyxHQUNaQSxFQUFNME0sY0FBYyxJQUFJQyxNQUFNSCxFQUFXLENBQUVJLFNBQVMsVUFFckQsTUF2WFAsc0NBMFhrQnBILEdBQ2RQLEVBQWM0SCxnQkFBZ0JySCxFQUFFaUIsT0FBT0MsUUFBUSxzQkEzWG5ELGdDQThYWWxCLEdBQ1IsSUFBSXpCLEVBQU15QixFQUFFc0gsT0FBU3RILEVBQUV1SCxRQUNuQmIsRUFBU3RILEVBQXFCYixHQUU5Qm1JLEdBQ0ZyTSxLQUFLcU0sR0FBUTFHLEtBblluQixxQ0F3WVMzRixLQUFLbU4sV0FHUm5OLEtBQUtvTixzQkFGTHBOLEtBQUt5SCxnQkF6WVgsbUNBZ1pRekgsS0FBS21OLFlBQ1BuTixLQUFLMEcsaUJBalpYLHVDQXFabUJmLEdBQ2ZBLEVBQUUwSCxpQkFFRXJOLEtBQUttTixXQUNQbk4sS0FBS3NOLFlBQVksUUFFakJ0TixLQUFLeUgsZ0JBM1pYLHFDQStaaUI5QixHQUNiQSxFQUFFMEgsaUJBRUVyTixLQUFLbU4sV0FDUG5OLEtBQUtzTixZQUFZLFlBRWpCdE4sS0FBS3lILGdCQXJhWCwwQ0F5YXNCOUIsR0FDSEEsRUFBRWlCLE9BQU9DLFFBQVEseUJBTWhDN0csS0FBS3VOLGtCQWhiVCwyQ0FvYkl2TixLQUFLOEcsVUFwYlQsd0NBd2JJOUcsS0FBS3dOLHNCQXhiVCxxQ0EyYmlCN0gsR0FDYjNGLEtBQUt5TixhQUNIOUgsRUFBRWlCLE9BQU9DLFFBQVEsc0RBN2J2Qiw4Q0FpYzBCbEIsR0FDakJBLEVBQUVpQixPQUFPQyxRQUFRLG9CQUNwQjdHLEtBQUswRyxpQkFuY1gsa0RBd2NJMUcsS0FBSzBHLGlCQXhjVCx5Q0EyY3FCZixHQUNqQixJQUFJOUYsRUFBTzhGLEVBQUVpQixPQUFPQyxRQUNsQixtREFHRWhILEdBQ0ZHLEtBQUtzTixZQUFZLEtBQU16TixLQWpkN0IsMkNBc2RJRyxLQUFLME4sc0JBdGRULCtCQXlkVy9ILEdBQ1BBLEVBQUVnSSxrQkFDRjNOLEtBQUs0TixlQUFlakksRUFBRWlCLE9BQU81RSxPQUFPLEtBM2R4QyxzQ0ErZEloQyxLQUFLNE4sZUFBZSxJQUNwQjVOLEtBQUs2TixxQkFoZVQsMkNBb2VJN04sS0FBS29ILHFCQXBlVCxpQ0F3ZUlwSCxLQUFLOE4sMkJBQTBCLEtBeGVuQywyQ0E4ZUk5TixLQUFLSCxLQUFLa08sYUFBYSxPQUFRL04sS0FBSzhCLE1BRXBDbEMsb0JBQWtCSSxLQUFLSCxLQUFNLGNBQzdCRyxLQUFLZ08sZUFDTGhPLEtBQUtpTyxtQkFDTGpPLEtBQUt3TixvQkFDTHhOLEtBQUs4Tiw0QkFDTDlOLEtBQUtrTyxZQUNMbE8sS0FBS21PLGFBRURuTyxLQUFLb08scUJBQ1BwTyxLQUFLZ0gsZUFDSGhILEtBQUtvTyxxQkFDTHBPLEtBQUtxTyx1QkFFRXJPLEtBQUtzTyx1QkFBeUJ0TyxLQUFLOEosZUFBZTFILFFBQzNEcEMsS0FBS2dILGVBQ0hoSCxLQUFLOEosZUFBZSxHQUFHOUgsTUFDdkJoQyxLQUFLcU8seUJBaGdCYixxREFxZ0JpQ3ZILEdBQ3pCQSxHQUNFOUcsS0FBS3VJLGFBQ1B2SSxLQUFLd04sc0JBeGdCYiwrQkErZ0JXbkksR0FDUEEsRUFBVXJGLEtBQUt1TyxnQkFBZ0JsSixHQUMvQnJGLEtBQUt3Tyx3QkFBd0JuSixHQUU3QixJQUFJb0osRUFBbUI5TCx5QkFFdkIzQyxLQUFLSCxLQUFPd0YsRUFBUVcsSUFDcEJoRyxLQUFLME8sU0FBV3JKLEVBQVFxSixTQUN4QjFPLEtBQUsyTyxTQUFXdEosRUFBUXNKLFNBQ3hCM08sS0FBSzRPLGVBQWlCdkosRUFBUXVKLGVBQzlCNU8sS0FBSzZPLFNBQVd4SixFQUFRd0osU0FDeEI3TyxLQUFLOE8saUJBQW1CekosRUFBUWdGLGFBQ2hDckssS0FBS3FLLGFBQWVuSSxXQUFXbEMsS0FBSzhPLGtCQUNwQzlPLEtBQUs4SCxTQUFXMkcsRUFBaUJwSixFQUFReUMsVUFDekM5SCxLQUFLeUksVUFBWWdHLEVBQWlCcEosRUFBUTBKLFFBQzFDL08sS0FBS3FJLGdCQUFrQm9HLEVBQWlCcEosRUFBUWdELGlCQUNoRHJJLEtBQUtzTyxzQkFBd0JHLEVBQzNCcEosRUFBUWlKLHVCQUVWdE8sS0FBS2dQLHFCQUF1QlAsRUFBaUJwSixFQUFRMkosc0JBQ3JEaFAsS0FBS3FPLHNCQUF3QkksRUFDM0JwSixFQUFRZ0osdUJBRVZyTyxLQUFLdUssZUFBaUJrRSxFQUFpQnBKLEVBQVFrRixnQkFDL0N2SyxLQUFLa0ssa0JBQW9CdUUsRUFBaUJwSixFQUFRNkUsbUJBQ2xEbEssS0FBS2lQLHlCQUEyQlIsRUFDOUJwSixFQUFRNEosMEJBRVZqUCxLQUFLbUksaUJBQW1Cc0csRUFBaUJwSixFQUFROEMsa0JBQ2pEbkksS0FBS3NJLGVBQWlCbUcsRUFBaUJwSixFQUFRaUQsZ0JBQy9DdEksS0FBS2tQLG1CQUFxQlQsRUFBaUJwSixFQUFRNkosb0JBQ25EbFAsS0FBSzJJLGNBQWdCdEQsRUFBUXNELGNBQzdCM0ksS0FBSzRJLG9CQUFzQnZELEVBQVF1RCxvQkFDbkM1SSxLQUFLNkwsY0FBZ0J4RyxFQUFRd0csY0FDN0I3TCxLQUFLMEksWUFBY3JELEVBQVFxRCxZQUMzQjFJLEtBQUtvSSxTQUFXL0MsRUFBUStDLFNBQ3hCcEksS0FBS3dJLGFBQWVuRCxFQUFRbUQsYUFDNUJ4SSxLQUFLbVAsZ0JBQWtCOUosRUFBUThKLGdCQUMvQm5QLEtBQUtvUCxpQkFBbUIvSixFQUFRK0osaUJBQ2hDcFAsS0FBS3FQLGdCQUFrQmhLLEVBQVFnSyxnQkFDL0JyUCxLQUFLc1Asa0JBQW9CQyxTQUFTbEssRUFBUWlLLG1CQUMxQ3RQLEtBQUtpSSxPQUFTc0gsU0FBU2xLLEVBQVE0QyxRQUMvQmpJLEtBQUt3UCxVQUFZRCxTQUFTbEssRUFBUW1LLFdBQ2xDeFAsS0FBSzhCLEtBQU91RCxFQUFRdkQsS0FDcEI5QixLQUFLa0ksa0JBQW9CN0MsRUFBUTZDLGtCQUNqQ2xJLEtBQUtvTyxxQkFBdUIvSSxFQUFRb0ssY0FDcEN6UCxLQUFLMFAsdUJBQXlCckssRUFBUXFLLHVCQUN0QzFQLEtBQUsyUCxlQUFpQnRLLEVBQVFzSyxlQUU5QjNQLEtBQUs0UCxlQUFpQixHQUN0QjVQLEtBQUs2UCxVQUFZLEdBQ2pCN1AsS0FBS29NLE9BQVMsR0FDZHBNLEtBQUs4UCxrQkFBb0IsSUFDekI5UCxLQUFLK1AsbUJBQXFCLElBQzFCL1AsS0FBS21LLFlBQWMsR0FDbkJuSyxLQUFLZ1Esb0JBQXNCLEdBQzNCaFEsS0FBS3FILGVBQWdCLFFBR0M1RyxJQUFuQjRFLEVBQVEwSixRQUF3Qi9PLEtBQUs4SCxVQUN0QzlILEtBQUt1SyxrQkFFTHZLLEtBQUt5SSxXQUFZLEdBR2Z6SSxLQUFLd1AsWUFDUHhQLEtBQUttSSxrQkFBbUIsR0FHMUJuSSxLQUFLaVEsZ0JBQWlELG1CQUF4QmpRLEtBQUsyUCxlQUNuQzNQLEtBQUt1SSxZQUNIdkksS0FBS2tQLHFCQUNKbFAsS0FBS3NJLGdCQUNOcEgsT0FBT0MsWUFBY2UsV0FBV2xDLEtBQUswUCx3QkFDdkMxUCxLQUFLMkwsbUJBQ0gzTCxLQUFLeUksV0FBY3pJLEtBQUs4SCxXQUFhOUgsS0FBS21JLGlCQUM1Q25JLEtBQUtrUSxhQUFlbFEsS0FBS21RLGdCQUFnQjlLLEVBQVE2SyxjQUNqRGxRLEtBQUtvUSxpQkFBbUJDLEtBQUtDLEtBQUt0USxLQUFLa1EsYUFBZSxHQUN0RGxRLEtBQUt1USxjQUFnQnZRLEtBQUt3USxxQkE3bEI5QixzQ0FnbUJrQm5MLEdBQ2QsSUFBSW9MLEVBQWlCLENBQ25CL0IsU0FBVSxRQUNWQyxTQUFVLFFBQ1ZDLGVBQWdCLGNBQ2hCQyxTQUFVLFFBQ1ZxQixhQUFjLEVBQ2RaLGtCQUFtQixHQUNuQmpGLGFBQWMsT0FDZHZDLFVBQVUsRUFDVk8saUJBQWlCLEVBQ2pCaUcsdUJBQXVCLEVBQ3ZCVSxzQkFBc0IsRUFDdEJYLHVCQUF1QixFQUN2QmxHLGtCQUFrQixFQUNsQlEsY0FBZSxtQkFDZkMsb0JBQXFCLG1CQUNyQmlELGNBQWUsYUFDZm5ELFlBQWEsU0FDYk4sU0FBVSxPQUNWSCxPQUFRLEVBQ1JzQyxnQkFBZ0IsRUFDaEJMLG1CQUFtQixFQUNuQmlGLGdCQUFpQixPQUNqQkMsaUJBQWtCLFNBQ2xCQyxnQkFBaUIsUUFDakJKLDBCQUEwQixFQUMxQm5OLEtBQU0sR0FDTm9HLGtCQUFtQixHQUNuQkksZ0JBQWdCLEVBQ2hCa0gsVUFBVyxFQUNYTixvQkFBb0IsRUFDcEJRLHVCQUF3QixTQVExQixPQUxJckssRUFBUTJKLHVCQUNWeUIsRUFBZVAsYUFBZSxFQUM5Qk8sRUFBZXBHLGFBQWUsUUFHekJwSCxPQUFPeU4sT0FBT0QsRUFBZ0JwTCxLQXhvQnpDLDhDQTJvQjBCQSxHQUN0QixJQUFJeEYsRUFBT3dGLEVBQVFXLElBQ2YySyxFQUFVLENBQ1o3SSxTQUFVLFdBQ1ZZLFlBQWEsY0FDYjVHLEtBQU0sT0FDTixpQkFBa0IsV0FDbEIsaUJBQWtCLFdBQ2xCLHVCQUF3QixpQkFDeEIsaUJBQWtCLFdBQ2xCLGNBQWUsU0FDZix5QkFBMEIsa0JBQzFCLGdDQUFpQyx3QkFDakMsOEJBQStCLHVCQUMvQixxQkFBc0IsZUFDdEIscUJBQXNCLGVBQ3RCLGdCQUFpQixXQUNqQix1QkFBd0IsZ0JBQ3hCLDhCQUErQixzQkFDL0IsdUJBQXdCLGdCQUN4QixnQ0FBaUMsd0JBQ2pDLHFCQUFzQixlQUN0QixlQUFnQixTQUNoQiw0QkFBNkIsb0JBQzdCLHdCQUF5QixpQkFDekIsMkJBQTRCLG9CQUM1Qix5QkFBMEIsa0JBQzFCLHlCQUEwQixtQkFDMUIseUJBQTBCLGtCQUMxQixtQ0FBb0MsMkJBQ3BDLDBCQUEyQixtQkFDM0Isd0JBQXlCLGlCQUN6QixrQkFBbUIsWUFDbkIsMEJBQTJCLG9CQUMzQiw2QkFBOEIscUJBQzlCLGdDQUFpQywwQkFHbkMsSUFBSyxJQUFJVSxLQUFLbU8sRUFBUyxDQUNyQixJQUFJM08sRUFBUW5DLEVBQUsrUSxhQUFhcE8sR0FFcEIsYUFBTkEsR0FBK0IsS0FBVlIsR0FBMEIsU0FBVkEsSUFDdkNBLEdBQVEsR0FHTkEsSUFDRnFELEVBQVFzTCxFQUFRbk8sSUFBTVIsTUF6ckI5QixtQ0ErckJJLElBQUluQyxFQUFPRyxLQUFLSCxLQUNoQkEsRUFBSzRHLGNBQWdCekcsS0FDckJILEVBQUttQyxNQUFRaEMsS0FBSzhILFNBQVcsR0FBSyxHQUNsQ2pJLEVBQUtpSCxNQUFRMUIsRUFBYzBCLE1BQzNCakgsRUFBS2dSLFNBQVd6TCxFQUFjNEIsZUFDOUJuSCxFQUFLNEYsV0FBYUwsRUFBYzZCLGlCQUNoQ3BILEVBQUswRixtQkFBcUJILEVBQWM4Qix5QkFDeENySCxFQUFLaVIsZ0JBQWtCMUwsRUFBYzBMLGdCQUNyQ2pSLEVBQUt3SCxjQUFnQmpDLEVBQWNpQyxjQUNuQ3hILEVBQUt5SCxVQUFZbEMsRUFBYzJMLGdCQUMvQmxSLEVBQUswSCxZQUFjbkMsRUFBYzRMLGtCQUNqQ25SLEVBQUsySCxnQkFBa0JwQyxFQUFjNkwsc0JBQ3JDcFIsRUFBS3FSLEtBQU85TCxFQUFjK0wsV0FDMUJ0UixFQUFLdVIsTUFBUWhNLEVBQWNpTSxjQTVzQi9CLHFDQStzQmlCclAsRUFBTytFLEdBQ2ZoRSxNQUFNQyxRQUFRaEIsS0FDakJBLEVBQVEsQ0FBQ0EsSUFHWEEsRUFBUUEsRUFBTXNQLEtBQUksU0FBQ0MsR0FDakIsT0FBT0EsR0FBVSxHQUFMQSxFQUFTQSxFQUFFMU8sV0FBYSxNQUd0QyxJQUFJMk8sRUFBYyxHQUVsQnhSLEtBQUtxRixRQUFRbkYsU0FBUSxTQUFDd0QsSUFDeUIsSUFBNUIxQixFQUFNdUIsUUFBUUcsRUFBRTFCLFFBRWQwQixFQUFFdUgsWUFBZXZILEVBQUV3SCxhQUlwQ3hILEVBQUV5RCxZQUFhLEdBSGZ6RCxFQUFFeUQsWUFBYSxFQUNmcUssRUFBWW5MLEtBQUszQyxFQUFFMUIsV0FNbEJoQyxLQUFLOEgsV0FDUjBKLEVBQWNBLEVBQVksSUFHNUJ4UixLQUFLeVIsaUJBQ0x6UixLQUFLNlEsU0FBU1csR0FBY3pLLEdBQzVCL0csS0FBSzBSLGtCQTN1QlQsdUNBOHVCbUJyTSxFQUFTc00sR0FDeEIzUixLQUFLeUYsV0FBV0osR0FDaEJyRixLQUFLNFIsZ0JBQWdCRCxLQWh2QnpCLCtDQW12QjJCbk0sR0FDdkJ4RixLQUFLdUYsbUJBQW1CQyxHQUFpQixHQUN6Q3hGLEtBQUtnSCxlQUFlLE1BQ3BCaEgsS0FBS3dOLHNCQXR2QlQsMkNBeXZCbUUsSUFBOUNoSSxFQUE4Qyx1REFBNUIsR0FBSXFNLEVBQXdCLHdEQUMvRHJNLEVBQWtCQSxFQUFnQjhMLEtBQUksU0FBQzVOLEdBQUQsT0FBT0EsRUFBRWIsY0FDL0M3QyxLQUFLd0YsZ0JBQWtCQSxFQUVuQnFNLEdBQWtCck0sRUFBZ0JwRCxRQUNwQ3BDLEtBQUtxRixRQUFRbkYsU0FBUSxTQUFDd0QsR0FHcEIsT0FGQUEsRUFBRXVILFlBQW1ELElBQXRDekYsRUFBZ0JqQyxRQUFRRyxFQUFFMUIsT0FFbEMwQixPQWp3QmYsaUNBc3dCYTJCLEdBQ0pBLElBQ0hBLEVBQVUsSUFHWixJQUFJeU0sRUFBa0IsR0FDbEJ0TSxFQUFrQnhGLEtBQUt3RixnQkFDdkJ1TSxFQUFxQnZNLEVBQWdCcEQsT0FDckNzTSxFQUFXMU8sS0FBSzBPLFNBQ2hCQyxFQUFXM08sS0FBSzJPLFNBQ2hCQyxFQUFpQjVPLEtBQUs0TyxlQUN0QkMsRUFBVzdPLEtBQUs2TyxTQUNoQkcsRUFBdUJoUCxLQUFLZ1AscUJBQzVCZ0QsRUFBWXJQLGtCQUNac1AsRUFBV2pTLEtBQUtpUyxTQUNoQjNPLEVBQVEsRUFDUjRPLEdBQWlCLEVBNENyQjdNLEVBQVFuRixTQTFDWSxTQUFoQmlTLEVBQWlCek8sR0FDbkIsSUFBSTFCLEVBQVFnUSxFQUFVdE8sRUFBRWdMLElBQ3BCMEQsRUFBZTFPLEVBQUUyQixRQUNqQjZGLElBQWVrSCxFQUNmQyxFQUFTLENBQ1gvTyxRQUNBdEIsUUFDQTBJLE1BQU9zSCxFQUFVdE8sRUFBRWlMLElBQ25CMkQsTUFBT0wsRUFBU3ZPLEVBQUVtTCxJQUNsQjBELFdBQVcsRUFDWHJILGdCQW1CRixHQWhCSTZHLElBQ0ZNLEVBQU9wSCxZQUFpRCxJQUFwQ3pGLEVBQWdCakMsUUFBUXZCLElBRzFDMEIsRUFBRXlILGdCQUNKa0gsRUFBT2xILGVBQWdCLEVBQ3ZCa0gsRUFBT0csV0FBYTlPLEVBQUU4TyxZQUdwQnhELElBQ0ZxRCxFQUFPdEgsWUFBY2lILEVBQVV0TyxFQUFFa0wsS0FHbkNrRCxFQUFnQnpMLEtBQUtnTSxHQUNyQi9PLElBRUk0SCxFQUFjLENBQ2hCLElBQUlzSCxFQUFhSCxFQUFPL08sTUFDeEI0TyxHQUFpQixFQUVqQkUsRUFBYWxTLFNBQVEsU0FBQ3dELEdBQ3BCQSxFQUFFeUgsZUFBZ0IsRUFDbEJ6SCxFQUFFOE8sV0FBYUEsRUFFZkwsRUFBY3pPLFVBT3BCMUQsS0FBS3FGLFFBQVV5TSxFQUNmOVIsS0FBS3lTLG9CQUFzQlgsRUFBZ0IxUCxPQUMzQ3BDLEtBQUswUyxnQkFBa0IxUyxLQUFLcUYsUUFBUWpELE9BQVMsRUFDN0NwQyxLQUFLNlAsVUFBWSxHQUNqQjdQLEtBQUtrUyxlQUFpQkEsRUFDdEJsUyxLQUFLMlMscUJBejBCVCx1Q0E0MEJtQnROLEdBQ2ZyRixLQUFLaUgsaUJBQWlCNUIsR0FBUyxHQUMvQnpGLHVCQUFxQkksS0FBSytJLFNBQVUsc0JBOTBCeEMseUNBazFCSSxJQUFJNkosRUFBZ0IsRUFBSTVTLEtBQUtxRixTQUV6QnJGLEtBQUtpUCwwQkFBNEJqUCxLQUFLNFAsZUFBZXhOLFNBRXJEd1EsRUFERTVTLEtBQUtrUyxlQUNTbFMsS0FBSzZTLGlCQUFpQkQsR0FFdEI1UyxLQUFLOFMsWUFBWUYsSUFJckM1UyxLQUFLNFMsY0FBZ0JBLElBNTFCekIsMENBZzJCSSxJQUFJOUksRUFBaUIsRUFBSTlKLEtBQUs0UyxlQUMxQkcsRUFBdUMsRUFBcEIvUyxLQUFLa1EsYUFDeEI4QyxFQUFhaFQsS0FBS2lULHVCQUNsQkMsRUFBWWxULEtBQUttVCxlQUNqQkMsRUFBV0osRUFBYUQsRUFBbUIsRUFDM0NNLEVBQUksRUFFSkgsSUFDRkEsRUFBVTVILGFBQWUrSCxFQUN6QkEsS0FHRnZKLEVBQWlCQSxFQUFlckcsUUFBTyxTQUFDQyxHQUN0QyxJQUFJNFAsR0FBUyxFQVFiLE9BTkk1UCxFQUFFNk8sWUFBYzdPLEVBQUUwSCxlQUNwQmtJLEVBQVNELEdBQUtMLEdBQWNLLEdBQUtELEVBQ2pDMVAsRUFBRTRILGFBQWUrSCxFQUNqQkEsS0FHS0MsS0FHTEosSUFDRnBKLEVBQWlCLENBQUNvSixHQUFKLFNBQWtCcEosS0FHbEM5SixLQUFLOEosZUFBaUJBLEVBQ3RCOUosS0FBS3VULGtCQTczQlQseUNBZzRCcUJQLFFBQ0V2UyxJQUFmdVMsSUFDRkEsRUFBYWhULEtBQUtpVCx3QkFHcEIsSUFBSXhSLEVBQU11UixFQUFhaFQsS0FBS3FLLGFBQzVCckssS0FBS3VKLFNBQVNwSCxNQUFNcVIsVUFBcEIseUJBQWtEL1IsRUFBbEQsVUFDQTdCLG1CQUFpQkksS0FBS3VKLFNBQVUsTUFBTzlILEtBdjRCM0MsMENBMDRCc0IsV0FDZHFJLEVBQWlCOUosS0FBSytKLG9CQUN0QmlGLEVBQXVCaFAsS0FBS2dQLHFCQUVoQ2xGLEVBQWU1SixTQUFRLFNBQUN3RCxHQUN0QixJQUFJK1AsRUFBYSxFQUFLdkssa0JBQWtCL0MsY0FBdkIscUNBQ2V6QyxFQUFFSixNQURqQixPQUlqQjFELG1CQUNFNlQsRUFBV3ROLGNBQWMsdUJBQ3pCLFVBQ0F6QyxFQUFFZ0gsT0FHQXNFLEdBQ0ZwUCxtQkFDRTZULEVBQVd0TixjQUFjLDhCQUN6QixVQUNBekMsRUFBRXFILGtCQTc1QlosK0JBbTZCVy9JLEVBQU8wUixHQUNUMVIsRUFFTWUsTUFBTUMsUUFBUWhCLEdBQ3ZCaEMsS0FBSzRQLGVBQUwsRUFBMEI1TixHQUUxQmhDLEtBQUs0UCxlQUFpQixDQUFDNU4sR0FKdkJoQyxLQUFLNFAsZUFBaUIsR0FPeEIsSUFBSStELEVBQVczVCxLQUFLOEgsU0FDaEI5SCxLQUFLNFAsZUFDTDVQLEtBQUs0UCxlQUFlLElBQU0sR0FDOUI1UCxLQUFLSCxLQUFLbUMsTUFBUTJSLEVBQ2xCM1QsS0FBS3lKLGFBQWF6SCxNQUFRMlIsRUFDMUIzVCxLQUFLNFQsdUJBQ0g1VCxLQUFLd1AsV0FBYXhQLEtBQUt3UCxXQUFheFAsS0FBSzRQLGVBQWV4TixRQUcxRHBDLEtBQUs2VCxlQUNMalUsdUJBQ0VJLEtBQUsrSSxTQUNMLFlBQ0FwRyxtQkFBaUIzQyxLQUFLNFAsaUJBRXhCaFEsdUJBQ0VJLEtBQUsrSSxTQUNMLHFCQUNBL0ksS0FBSzRULHFCQUdIRixHQUNGMVQsS0FBSzZNLGNBQWM3TSxLQUFLSCxLQUFNLFlBbDhCcEMscUNBdThCSSxJQUFJaVUsRUFBWSxHQUNabE0sRUFBZSxHQUNmZ0ksRUFBaUI1UCxLQUFLNFAsZUFDdEJtRSxFQUFpQm5FLEVBQWV4TixPQUNoQ2tOLEVBQW9CdFAsS0FBS3NQLGtCQUV6QjBFLEVBQXNCLEVBRTFCLEdBQUloVSxLQUFLcUgsY0FDUHJILEtBQUt3SixXQUFXWCxVQUFoQixlQUFvQ2tMLEVBQXBDLFNBQ0ssV0FDUy9ULEtBQUtxRixTQURkLElBQ0wsMkJBQTRCLEtBQW5CM0IsRUFBbUIsUUFDMUIsSUFBSUEsRUFBRTBILGFBQU4sQ0FJQSxHQUFJNEksRUFYa0IsR0FZcEIsTUFHRixJQUFJaFMsRUFBUTBCLEVBQUUxQixNQUVkLElBQXVDLElBQW5DNE4sRUFBZXJNLFFBQVF2QixHQUFlLENBQ3hDLElBQUkwSSxFQUFRaEgsRUFBRWdILE1BQ2RvSixFQUFVek4sS0FBS3FFLEtBQ2ZzSixHQUUyQjFFLEdBQ3pCMUgsRUFBYXZCLEtBQWIseUNBQW9EcUUsRUFBcEQsZUFsQkQsOEJBdUJMLElBQUl1SixFQUFzQkYsRUFBaUJ6RSxFQUV2QzJFLEVBQXNCLEdBQ3hCck0sRUFBYXZCLEtBQWIsNERBQ3VENE4sRUFEdkQsb0JBS0YsSUFBTUMsRUFBc0JKLEVBQVVLLEtBQUssTUFFM0MsR0FBNEIsS0FBeEJELEVBQ0ZsVSxLQUFLd0osV0FBV1gsVUFBWTdJLEtBQUswSSxpQkFJakMsR0FGQTFJLEtBQUt3SixXQUFXWCxVQUFZcUwsRUFFeEJsVSxLQUFLOEgsU0FBVSxDQUNqQixJQUFJMEgsRUFBWXhQLEtBQUt3UCxVQUVyQixHQUFJNVAsdUJBQXFCSSxLQUFLd0osYUFBZWdHLEVBQVcsQ0FDdEQsSUFBSTRFLEVBQVksR0FBSCxPQUFNTCxHQUVmdkUsSUFDRjRFLEdBQWEsTUFBSixPQUFVNUUsSUFJckJ4UCxLQUFLd0osV0FBV1gsVUFBaEIsVUFBK0J1TCxFQUEvQixrQkFDcUIsSUFBbkJMLEVBQXVCLEdBQUssSUFEOUIsa0JBS0FuTSxFQUFlLElBTXZCaEksbUJBQWlCSSxLQUFLd0osV0FBWSxVQUFXNUIsRUFBYXVNLEtBQUssU0E3Z0NuRSxxQ0FnaENpQm5TLEVBQU9xUyxHQUNwQixHQUFJclMsSUFBVWhDLEtBQUtnUSxvQkFBbkIsQ0FJS3FFLElBQ0hyVSxLQUFLOEwsYUFBYTlKLE1BQVFBLEdBRzVCLElBQUltSSxFQUFjbkksRUFBTXNTLGNBQWNDLE9BTXRDLEdBTEF2VSxLQUFLbUssWUFBY0EsRUFDbkJuSyxLQUFLZ1Esb0JBQXNCaE8sRUFFM0JwQyx1QkFBcUJJLEtBQUsrSSxTQUFVLG1CQUFvQi9HLEdBRXBEaEMsS0FBS2lRLGdCQUNQalEsS0FBS3dVLGFBQWFySyxPQURwQixDQUtBLElBRUlzSyxFQUZBaEMsRUFBc0IsRUFDdEJpQyxHQUFpQixFQUVqQkMsRUFBa0IzVSxLQUFLMlUsZ0JBRXZCM1UsS0FBS2tTLGlCQUNQdUMsRUFBNkJ6VSxLQUFLNFUsOEJBQ2hDekssSUFJSm5LLEtBQUtxRixRQUFRbkYsU0FBUSxTQUFDd0QsR0FDcEIsSUFBSUEsRUFBRTBILGFBQU4sQ0FJQSxJQUFJN0ksRUFBU29TLEVBQ1hqUixFQUNBeUcsRUFDQXVLLEVBQ0FELEdBR0VsUyxFQUFPZ1EsV0FDVEUsSUFHR2lDLElBQ0hBLEVBQWlCblMsRUFBT21TLG9CQUl4QjFVLEtBQUt1SyxpQkFDSEosSUFBZ0J1SyxHQUNsQjFVLEtBQUs2VSxlQUNMcEMsS0FFQXpTLEtBQUs4VSxtQkFJVDlVLEtBQUt5UyxvQkFBc0JBLEVBRTNCelMsS0FBSytVLGNBQ0wvVSxLQUFLaU8sbUJBQ0xqTyxLQUFLd04sd0JBamxDVCxvQ0FvbENnQmxLLEVBQU9ZLEVBQUtsQyxHQUNuQmhDLEtBQUtxRixRQUFRL0IsS0FJbEJ0RCxLQUFLcUYsUUFBUS9CLEdBQU9ZLEdBQU9sQyxLQXpsQy9CLHlDQTZsQ0loQyxLQUFLc0osYUFBYW5ILE1BQU1OLE9BQ3RCN0IsS0FBS3FLLGFBQWVySyxLQUFLeVMsb0JBQXNCLE9BOWxDckQsZ0RBaW1DNEIzTCxHQUN4QixJQUFJeUosRUFFQXpKLEVBQ0U5RyxLQUFLdUksY0FDUHZJLEtBQUtrUSxhQUFlbFEsS0FBS21RLGtCQUN6QkksRUFBZ0J2USxLQUFLd1EsbUJBQ3JCeFEsS0FBS3VRLGNBQWdCQSxJQUd2QkEsRUFBZ0J2USxLQUFLdVEsY0FFakJ2USxLQUFLc0ksaUJBQ1AxSSxvQkFBa0JJLEtBQUswSixXQUFZLFNBQVU2RyxHQUM3QzNRLG9CQUFrQkksS0FBSzJKLGlCQUFrQixTQUFVNEcsS0FJdkQzUSxvQkFBa0JJLEtBQUtxSixrQkFBbUIsYUFBY2tILEdBRXhEdlEsS0FBS2dWLCtCQUErQmxPLEtBcm5DeEMsMkNBeW5DSSxHQUFzQixTQUFsQjlHLEtBQUtvSSxTQUFULENBSUEsSUFBSTZNLEVBQW1CclYsK0JBQTZCSSxLQUFLK0ksVUFDckRtTSxHQUFhLEVBR2pCLEdBQUlsVixLQUFLd0ksYUFBYyxDQUNyQixJQUFJMk0sRUFBZW5WLEtBQUtnSixjQUFjaEksd0JBQ2xDb1UsRUFBZ0JsVSxPQUFPQyxXQUN2QnFILEVBQWV0RyxXQUFXbEMsS0FBS3dJLGNBQy9CNk0sRUFBZ0JGLEVBQWE1VCxLQUFPaUgsRUFBZTRNLEVBQ25ERSxFQUFlOU0sRUFBZTJNLEVBQWFJLE1BRTNDRixJQUFrQkMsSUFDcEJKLEdBQWEsR0FJakJ0Vix1QkFDRUksS0FBSytJLFNBQ0wsZUFDOEIsUUFBOUJrTSxFQUFpQnJULFVBRW5CaEMsdUJBQXFCSSxLQUFLK0ksU0FBVSxnQkFBaUJtTSxNQWxwQ3pELHFDQXNwQ0ksSUFBSWxULEVBQVFoQyxLQUFLZ1Esb0JBQW9CdUUsT0FFckMsR0FBS3ZTLEVBQUwsQ0FJQSxJQUFJa1IsRUFBWWxULEtBQUttVCxlQUVyQixHQUFJRCxFQUFXLENBQ2IsSUFBSXNDLEVBQVd0QyxFQUFVNVAsTUFFekJ0RCxLQUFLeVYsY0FBY0QsRUFBVSxRQUFTeFQsR0FDdENoQyxLQUFLeVYsY0FBY0QsRUFBVSxRQUFTeFQsT0FDakMsQ0FDTCxJQUFJUyxFQUFPLENBQ1RULFFBQ0EwSSxNQUFPMUksRUFDUG9KLGNBQWMsR0FHaEJwTCxLQUFLc0gsVUFBVTdFLE9BMXFDckIsd0NBK3FDSSxJQUFJbU4sRUFBaUI1UCxLQUFLNFAsZUFFMUI1UCxLQUFLcUYsUUFBUW5GLFNBQVEsU0FBQ3dELElBQ3FCLElBQXJDa00sRUFBZXJNLFFBQVFHLEVBQUUxQixTQUMzQjBCLEVBQUV5RCxZQUFhLFFBbnJDdkIsMENBMnJDSSxPQUFPbkgsS0FBSzhKLGdCQUFrQixLQTNyQ2xDLGlDQStyQ0ksT0FBTzlKLEtBQUs4SCxTQUFXOUgsS0FBSzRQLGVBQWlCNVAsS0FBSzRQLGVBQWUsS0EvckNyRSxtREFtc0NJLE9BQU9TLEtBQUtDLEtBQUt0USxLQUFLcUosa0JBQWtCcU0sVUFBWTFWLEtBQUtxSyxnQkFuc0M3RCw2Q0F1c0NJLElBQ0kySSxFQUQwQmhULEtBQUsyViw2QkFDUTNWLEtBQUtvUSxpQkFNaEQsT0FKSTRDLEVBQWEsSUFDZkEsRUFBYSxHQUdSQSxJQTlzQ1gseUNBaXRDcUJwUSxHQUErQyxJQUF6Q2dULEVBQXlDLHdEQUFuQkMsRUFBbUIsd0RBQzVEcFQsRUFBTyxDQUNULGVBQWdCRyxHQUFRLEdBQ3hCLDJCQUE0QjVDLEtBQUs4UCxrQkFDakMsdUJBQXdCOVAsS0FBS2lJLE9BQzdCLHlCQUEwQmpJLEtBQUttUCxnQkFDL0IseUJBQTBCblAsS0FBS29QLGlCQUMvQix5QkFBMEJwUCxLQUFLcVAsZ0JBQy9CLDZCQUE4QnVHLEVBQzlCLDBCQUEyQkMsR0FHN0IsT0FBT2pXLDZCQUEyQjZDLEtBN3RDdEMsbUNBZ3VDZUEsR0FDWCxHQUFLQSxFQUFMLENBSUEsSUFBSXVQLEVBQVlyUCxrQkFXaEIsTUFWZ0IsQ0FDZFcsTUFBT2IsRUFBS2EsTUFDWnRCLE1BQU9nUSxFQUFVdlAsRUFBS1QsT0FDdEIwSSxNQUFPc0gsRUFBVXZQLEVBQUtpSSxPQUN0QkssWUFBYWlILEVBQVV2UCxFQUFLc0ksYUFDNUJ1SCxNQUFPdFMsS0FBS2lTLFNBQVN4UCxFQUFLNlAsT0FDMUJsSCxhQUFjM0ksRUFBSzJJLGVBQWdCLEVBQ25DbUgsV0FBVyxNQTd1Q2pCLHFDQW92Q0ksSUFBSXVELEVBQWE5VixLQUFLcUYsUUFBUXJGLEtBQUswUyxpQkFFbkMsR0FBS29ELEdBQWVBLEVBQVcxSyxhQUkvQixPQUFPMEssSUExdkNYLHFDQTZ2Q2lCOVQsR0FDYixJQUFJc0IsRUFZSixPQVZJdEIsR0FDRmhDLEtBQUtxRixRQUFRMFEsTUFBSyxTQUFDclMsR0FDakIsR0FBSUEsRUFBRTFCLE9BQVNBLEVBR2IsT0FGQXNCLEVBQVFJLEVBQUVKLE9BRUgsS0FLTkEsSUExd0NYLG9DQTh3Q0ksSUFBSXVNLEVBQVk3UCxLQUFLNlAsVUFDakJ0TixFQUFTdkMsS0FBSzRQLGVBQWVuTSxRQUFPLFNBQUNDLEdBQUQsT0FBaUMsSUFBMUJtTSxFQUFVdE0sUUFBUUcsTUFFakUsT0FBTzFELEtBQUs4SCxTQUFXdkYsRUFBU0EsRUFBTyxLQWp4QzNDLCtCQW94Q1crUCxHQWFQLE9BTEVBLEVBUEVBLEdBRUFBLEVBREV2UCxNQUFNQyxRQUFRc1AsR0FDUkEsRUFBTTZCLEtBQUssS0FFWDdCLEVBQU16UCxXQUFXMFIsUUFHYkQsY0FFTixLQTl4Q2Qsd0NBcXlDSSxJQURnQixFQUNaMEIsRUFBZ0IsR0FDaEJwRyxFQUFpQjVQLEtBQUs0UCxlQUZWLElBSUY1UCxLQUFLcUYsU0FKSCxJQUloQiwyQkFBNEIsS0FBbkIzQixFQUFtQixTQUNlLElBQXJDa00sRUFBZXJNLFFBQVFHLEVBQUUxQixRQUMzQmdVLEVBQWMzUCxLQUFLM0MsRUFBRWdILFFBTlQsOEJBVWhCLE9BQU8xSyxLQUFLOEgsU0FBV2tPLEVBQWdCQSxFQUFjLElBQU0sS0E5eUMvRCxvREFpekNnQzdMLEdBQzVCLElBQUk5RSxFQUFVckYsS0FBS3FGLFFBQ2Y5QyxFQUFTLEdBQ1RvUyxFQUFrQjNVLEtBQUsyVSxnQkFTM0IsT0FSQXRQLEVBQVVyRixLQUFLaVcscUJBQXFCNVEsSUFFNUJuRixTQUFRLFNBQUN3RCxHQUNmbkIsRUFBT21CLEVBQUVKLE9BQVNJLEVBQUUyQixRQUFRMFEsTUFDMUIsU0FBQ3BRLEdBQUQsT0FBT2dQLEVBQWdCaFAsRUFBR3dFLEdBQWFvSSxnQkFJcENoUSxJQTd6Q1gsc0NBZzBDa0IyVCxHQUNkLEdBQUlsVyxLQUFLdUksWUFBYSxDQUNwQixJQUFJbkgsRUFDb0IsR0FBckJGLE9BQU9HLFlBQW9CLElBOTBDQyxHQWcxQzNCckIsS0FBSzJMLHFCQUNQdkssR0FoMUNhLElBbTFDZjhVLEVBQVE3RixLQUFLOEYsTUFBTS9VLEVBQWtCcEIsS0FBS3FLLG1CQUUxQzZMLEVBQVEzRyxTQUFTMkcsR0FHbkIsT0FBT0EsSUE5MENYLHlDQWsxQ0ksT0FBT2xXLEtBQUtrUSxhQUFlbFEsS0FBS3FLLGFBQWUsT0FsMUNuRCxpQ0FxMUNheEssRUFBTXVXLEdBQ2YsSUFBSUMsRUFDWSxTQUFkRCxFQUF1QixxQkFBdUIseUJBRWhELEdBQ012VyxJQUNGQSxFQUFPQSxFQUFLd1csVUFHZHpXLG9CQUFrQkMsRUFBTSxhQUN4QkQsb0JBQWtCQyxFQUFNLGdCQUcxQixPQUFPQSxJQWwyQ1gsa0NBczJDY3lXLEdBQVUsV0FDcEJ0VyxLQUFLdVcscUJBQ0wzVyx1QkFBcUJJLEtBQUsrSSxTQUFVLFVBRXBDNkQsWUFBVyxXQUNUaE4sb0JBQWtCLEVBQUttSixTQUFVLFVBRTVCdU4sSUFDSCxFQUFLRSwyQkFDTDVXLG9CQUFrQixFQUFLbUosU0FBVSxXQUU3QixFQUFLUixhQUNQM0ksb0JBQWtCLEVBQUtrSixNQUFPLHVCQUM5QixFQUFLMk4sZUFBZ0IsR0FFckIsRUFBSzVJLHNCQUdSLEtBeDNDUCxtQ0EyM0NleUksR0FBVSxXQUNyQixHQUFJdFcsS0FBS3NJLGVBQ1B0SSxLQUFLME4sd0JBRFAsQ0FLQSxJQUFJcUMsRUFBcUJ1RyxFQUFXLEVBQUl0VyxLQUFLK1AsbUJBRTdDbkQsWUFBVyxXQUNUaE4sdUJBQXFCLEVBQUttSixTQUFVLGtCQUNwQyxFQUFLMkUsb0JBRUE0SSxHQUNDLEVBQUtHLGdCQUNQN1csdUJBQXFCLEVBQUtrSixNQUFPLHVCQUNqQyxFQUFLMk4sZUFBZ0IsS0FHeEIsR0FFSDdKLFlBQVcsV0FDVGhOLG9CQUFrQixFQUFLbUosU0FBVSxZQUNoQ2dILE1BajVDUCxpREFxNUNTL1AsS0FBS2lQLDJCQUlWalAsS0FBSzJTLG1CQUVBM1MsS0FBS3FKLGtCQUFrQnFNLFdBQWMxVixLQUFLNFAsZUFBZXhOLE9BRzVEcEMsS0FBSytVLGNBRkwvVSxLQUFLd04sdUJBNTVDWCxzQ0FtNkNReE4sS0FBS21OLFdBQ1BuTixLQUFLMEcsZUFFTDFHLEtBQUt5SCxnQkF0NkNYLGlDQTI2Q0ksT0FBTzdILG9CQUFrQkksS0FBSytJLFNBQVUsWUEzNkM1Qyx5Q0ErNkNJLElBQUlsSixFQUFPRyxLQUFLOEwsYUFFWmpNLEdBQ0ZBLEVBQUs2VyxVQWw3Q1gsa0NBczdDY04sRUFBV3BRLEdBQ3JCLElBR0kyUSxFQUhBQyxFQUFjNVcsS0FBS2tKLGtCQUFrQi9DLGNBQ3ZDLDBCQUlGLEdBQUlILEVBQ0YyUSxFQUFpQjNRLE9BQ1osR0FBSzRRLEVBY1ZELEVBQWlCM1csS0FBSzZXLFdBQVdELEVBQWFSLE9BZHZCLENBRXZCLElBQUlVLEVBQTBCOVcsS0FBSzJWLDZCQUNuQ2dCLEVBQWlCM1csS0FBS2tKLGtCQUFrQi9DLGNBQXZCLDZDQUN1QjJRLEVBRHZCLFFBS2ZsWCxvQkFBa0IrVyxFQUFnQixhQUNsQy9XLG9CQUFrQitXLEVBQWdCLGtCQUVsQ0EsRUFBaUIzVyxLQUFLNlcsV0FBV0YsRUFBZ0IsU0FNakRBLEdBQWtCQSxJQUFtQkMsSUFDbkNBLEdBQ0ZoWCx1QkFBcUJnWCxFQUFhLFdBR3BDaFgsb0JBQWtCK1csRUFBZ0IsV0FDbEMzVyxLQUFLK1csa0JBQWtCblgsbUJBQWlCK1csRUFBZ0IsVUFBVSxHQUNsRTNXLEtBQUtnWCx3QkFBd0JMLE1BdDlDbkMsOENBMDlDMEJDLEdBT3RCLEdBTktBLElBQ0hBLEVBQWM1VyxLQUFLa0osa0JBQWtCL0MsY0FDbkMsMkJBSUN5USxFQUFMLENBSUEsSUFBSUssRUFDQUMsRUFBZ0JsWCxLQUFLcUosa0JBQWtCckksd0JBQ3ZDbVcsRUFBYVAsRUFBWTVWLHdCQUN6Qm9XLEVBQWVGLEVBQWN6VixJQUM3QjRWLEVBQWtCSCxFQUFjSSxPQUNoQ0MsRUFBa0JMLEVBQWNyVixPQUNoQzJWLEVBQVlMLEVBQVcxVixJQUN2QmdXLEVBQWVOLEVBQVdHLE9BQzFCak4sRUFBZThNLEVBQVd0VixPQUMxQjZWLEVBQWtCZCxFQUFZZSxVQUM5QkMsRUFBYWhZLG1CQUFpQkksS0FBS3VKLFNBQVUsTUFBTyxVQUdwRDZOLEVBQWVJLEVBQ2pCUCxFQUFlUyxFQUFrQkUsRUFDeEJQLEVBQWtCSSxJQUUzQlIsRUFDRVMsRUFBa0JILEVBQWtCbE4sRUFBZXVOLEdBR3ZEaFMsUUFBUWlTLElBQUksV0FDWmpTLFFBQVFpUyxJQUFJLE1BQVFaLFFBRUN4VyxJQUFqQndXLElBQ0ZqWCxLQUFLcUosa0JBQWtCcU0sVUFBWXVCLE1BOS9DekMsMENBbWdESSxJQUFJTCxFQUFjNVcsS0FBS2tKLGtCQUFrQi9DLGNBQ3ZDLDBCQUdHeVEsSUFJTGhYLHVCQUFxQmdYLEVBQWEsV0FDbEM1VyxLQUFLK1csa0JBQWtCLFNBNWdEM0IsbUNBK2dEZWxYLEdBQ1gsR0FBS0EsRUFBTCxDQUlBLElBQUlpWSxHQUFZbFksb0JBQWtCQyxFQUFNLFlBRXhDLEdBQUlpWSxHQUNGLEdBQUk5WCxLQUFLOEgsVUFBWTlILEtBQUs0VCxvQkFDeEIsWUFJRixJQUFLNVQsS0FBSzhILFNBRVIsWUFEQTlILEtBQUswRyxlQUtULElBQUlrSixFQUFpQjVQLEtBQUs0UCxlQUN0QkgsRUFBZ0I3UCxtQkFBaUJDLEVBQU0sU0FDdkNrWSxFQUFnQm5ZLG1CQUFpQkMsRUFBTSxTQUkzQyxHQUZBRyxLQUFLZ1ksbUJBQW1CRCxFQUFlRCxHQUVuQ0EsRUFBVSxDQUNaLEdBQUk5WCxLQUFLOEgsU0FDUDhILEVBQWV2SixLQUFLb0osR0FDcEJ6UCxLQUFLaVksNEJBQ0EsQ0FDRHJJLEVBQWV4TixRQUNqQnBDLEtBQUtnWSxtQkFDSGhZLEtBQUtrWSxlQUFldEksRUFBZSxLQUNuQyxHQUlKQSxFQUFpQixDQUFDSCxHQUNsQixJQUFJMEksRUFBc0JuWSxLQUFLSCxLQUFLc0csY0FDbEMsMkJBR0VnUyxHQUNGdlksdUJBQXFCdVksRUFBcUIsWUFBWSxHQUd4RG5ZLEtBQUswRyxlQUdQOUcsdUJBQXFCQyxFQUFNLGlCQUV2QkcsS0FBSzhILFdBQ1BsSSx1QkFBcUJDLEVBQU0sWUFDM0I4Qyw0QkFBMEJpTixFQUFnQkgsR0FDMUN6UCxLQUFLaVksdUJBQXNCLElBSTNCclksb0JBQWtCQyxFQUFNLGdCQUMxQkcsS0FBS29ZLHVCQUdQcFksS0FBSzZRLFNBQVNqQixHQUFnQixNQTdrRGxDLDRDQWlsREk1UCxLQUFLeU4sYUFDSHpOLEtBQUtrSixrQkFBa0IvQyxjQUFjLDZCQWxsRDNDLHVDQXNsRG1CZ0IsR0FDZixHQUFLbkgsS0FBSzhILFdBQVk5SCxLQUFLbUksaUJBQTNCLENBSTBCLGtCQUFmaEIsSUFDVEEsR0FBY3ZILG9CQUFrQkksS0FBS2lNLG1CQUFvQixZQUczRCxJQUFJMkQsRUFBaUIsR0FFckI1UCxLQUFLcUYsUUFBUW5GLFNBQVEsU0FBQ3dELEdBQ2hCQSxFQUFFdUgsWUFBY3ZILEVBQUUwSCxjQUFnQjFILEVBQUV3SCxlQUl4Q3hILEVBQUV5RCxXQUFhQSxFQUVYQSxHQUNGeUksRUFBZXZKLEtBQUszQyxFQUFFMUIsV0FJMUJoQyxLQUFLaVksc0JBQXNCOVEsR0FDM0JuSCxLQUFLNlEsU0FBU2pCLEdBQWdCLEdBQzlCNVAsS0FBS3VULG1CQS9tRFQsNENBa25Ed0JsTSxHQUNTLGtCQUFsQkEsSUFDVEEsR0FBZ0IsRUFFWnJILEtBQUtxRixRQUFRakQsU0FDZmlGLEdBQWlCckgsS0FBS3FGLFFBQVEwUSxNQUFLLFNBQUNyUyxHQUNsQyxPQUFRQSxFQUFFeUQsYUFBZXpELEVBQUV1SCxhQUFldkgsRUFBRXdILGtCQUtsRHRMLHVCQUFxQkksS0FBS2lNLG1CQUFvQixVQUFXNUUsR0FDekRySCxLQUFLcUgsY0FBZ0JBLElBOW5EekIsd0NBaW9Eb0IvRCxHQUEwQixJQUFuQjBILEVBQW1CLHdEQUN0Q2hMLEtBQUtxWSxvQkFDUHJZLEtBQUt5VixjQUFjelYsS0FBS3FZLG1CQUFvQixhQUFhLEdBRzNEclksS0FBS3lWLGNBQWNuUyxFQUFPLFlBQWEwSCxHQUN2Q2hMLEtBQUtxWSxtQkFBcUIvVSxJQXZvRDlCLHlDQTBvRHFCQSxHQUEyQixJQUFwQjZELEVBQW9CLHdEQUM1Q25ILEtBQUt5VixjQUFjblMsRUFBTyxhQUFjNkQsS0Ezb0Q1QyxvQ0Erb0RJLElBQUltUixHQUFZdFksS0FBS21OLFdBRWpCbUwsR0FDRnRZLEtBQUt5SCxhQUFZLEdBR0h6SCxLQUFLcUosa0JBQWtCcU0sVUFFdkIsSUFDZDFWLEtBQUtxSixrQkFBa0JxTSxVQUFZLEdBR2pDNEMsR0FDRnRZLEtBQUswRyxjQUFhLEtBNXBEeEIsOEJBaXFESTFHLEtBQUtxRixRQUFRbkYsU0FBUSxTQUFDd0QsR0FDcEJBLEVBQUV5RCxZQUFhLEtBR2pCbkgsS0FBS3lSLGdCQUFlLEdBQ3BCelIsS0FBSzZRLFNBQVMsTUFBTSxHQUNwQjdRLEtBQUswUixrQkF2cURULHFDQTBxRGlCNkcsR0FDYnZZLEtBQUtpWSx1QkFBc0JNLFFBQWtCOVgsS0EzcURqRCxzQ0ErcURJVCxLQUFLK1UsY0FDTC9VLEtBQUs0TixlQUFlLElBQ3BCNU4sS0FBS3VULGtCQWpyRFQsc0NBb3JEa0I1QixHQUNWQSxHQUNGM1IsS0FBS3dZLGtCQUdQeFksS0FBS2lPLG1CQUNMak8sS0FBS3dOLG9CQUVBbUUsR0FDSDNSLEtBQUs4RyxVQTdyRFgsZ0NBaXNEWXJFLEVBQU1nVyxHQUNkLEdBQUtoVyxFQUFMLENBSUF6QyxLQUFLMFMsa0JBQ0xqUSxFQUFLYSxNQUFRdEQsS0FBSzBTLGdCQUNsQixJQUFJUSxFQUFZbFQsS0FBSzBZLGFBQWFqVyxHQUVsQ3pDLEtBQUtxRixRQUFRZ0IsS0FBSzZNLEdBQ2xCbFQsS0FBSzRTLGNBQWN2TSxLQUFLNk0sR0FFcEJ1RixJQUNGelksS0FBS3lTLHNCQUNMelMsS0FBSzRSLHNCQS9zRFgsbUNBbXREZXRPLElBQ05BLEdBQWtCLEdBQVRBLEtBSWR0RCxLQUFLcUYsUUFBUTdCLE9BQU9GLEVBQU8sR0FDM0J0RCxLQUFLMFMscUJBenREVCx3Q0E2dERJLElBQUlRLEVBQVlsVCxLQUFLbVQsZUFFakJELEdBQ0ZsVCxLQUFLMlksYUFBYXpGLEVBQVU1UCxTQWh1RGxDLDZDQW91RHlCLFdBQ2pCNFAsRUFBWWxULEtBQUttVCxlQUNqQnFDLEVBQVd0QyxFQUFVNVAsTUFFekJ0RCxLQUFLNlAsVUFBVXhKLEtBQUs2TSxFQUFVbFIsT0FDOUJoQyxLQUFLeVYsY0FBY0QsRUFBVSxnQkFBZ0IsR0FDN0N4VixLQUFLeVYsY0FBY0QsRUFBVSxTQUFTLEdBR3RDNUksWUFBVyxXQUNULEVBQUtnQixlQUFlLElBQ3BCLEVBQUtDLHFCQUNKLEtBaHZEUCxrQ0FtdkRjeEksR0FDVixPQUFPQSxFQUFRdVQsTUFBSyxTQUFDQyxFQUFHQyxHQUN0QixPQUFLRCxFQUFFMVIsWUFBZTJSLEVBQUUzUixXQUViMFIsRUFBRTFSLGNBQWdCMlIsRUFBRTNSLFlBQWMwUixFQUFFdlYsTUFBUXdWLEVBQUV4VixRQUMvQyxFQUVELEVBSkEsT0F0dkRmLHVDQSt2RG1CK0IsR0FDZixJQUFJeU4sRUFBYzlTLEtBQUs4UyxZQWN2QixPQWJBek4sRUFBVXJGLEtBQUtpVyxxQkFBcUI1USxJQUU1Qm5GLFNBQVEsU0FBQ3dELEdBQ2YsSUFBSTBPLEVBQWUxTyxFQUFFMkIsUUFDckIzQixFQUFFeUQsV0FBYWlMLEVBQWEyRCxNQUFLLFNBQUNwUSxHQUFELE9BQU9BLEVBQUV3QixjQUV0Q3pELEVBQUV5RCxZQUNKMkwsRUFBWVYsTUFJaEJVLEVBQVl6TixHQUVMckYsS0FBSytZLHVCQUF1QjFULEtBOXdEdkMsc0NBaXhEa0IzQixFQUFHeUcsRUFBYXVLLEVBQWdCRCxHQUM5QyxJQUFJelMsRUFBUTBCLEVBQUVnSCxNQUFNNEosY0FDaEJ2SixFQUFjckgsRUFBRXFILFlBQ2hCdUgsRUFBUTVPLEVBQUU0TyxNQUNWQyxHQUE0QyxJQUFoQ3ZRLEVBQU11QixRQUFRNEcsR0FvQjlCLE9BbEJJekcsRUFBRXdILGVBQ0pxSCxFQUFZa0MsRUFBMkIvUSxFQUFFSixRQUd2Q2dQLElBQVVDLElBQ1pBLEdBQTRDLElBQWhDRCxFQUFNL08sUUFBUTRHLElBR3hCWSxJQUFnQndILElBQ2xCQSxHQUFnRSxJQUFwRHhILEVBQVl1SixjQUFjL1EsUUFBUTRHLElBR2hEekcsRUFBRTZPLFVBQVlBLEVBRVRtQyxJQUNIQSxFQUFpQjFTLElBQVVtSSxHQUd0QixDQUNMb0ksWUFDQW1DLG9CQTN5RE4sMkNBK3lEdUJyUCxHQUNuQixJQUFJOUMsRUFBUyxHQUNUNlAsRUFBZSxHQW9CbkIsT0FqQkEvTSxFQUFRbkYsU0FBUSxTQUFDd0QsR0FDZixHQUFJQSxFQUFFd0gsYUFBYyxDQUNsQixJQUFJOE4sRUFBYSxHQUNqQnRWLEVBQUUyQixRQUFVMlQsRUFDWjVHLEVBQWExTyxFQUFFSixPQUFTMFYsRUFFeEJ6VyxFQUFPOEQsS0FBSzNDLE9BS2hCMkIsRUFBUW5GLFNBQVEsU0FBQ3dELEdBQ1hBLEVBQUV5SCxlQUNKaUgsRUFBYTFPLEVBQUU4TyxZQUFZbk0sS0FBSzNDLE1BSTdCbkIsSUFyMERYLDZDQXcwRHlCOEMsR0FDckIsSUFBSTlDLEVBQVMsR0FPYixPQUxBOEMsRUFBUW5GLFNBQVEsU0FBQ3dELEdBQ2ZuQixFQUFPOEQsS0FBSzNDLEdBQ1puQixFQUFTQSxFQUFPMFcsT0FBT3ZWLEVBQUUyQixZQUdwQjlDLElBaDFEWCxtQ0FtMURlNEgsR0FDWHZLLHVCQUFxQkksS0FBSytJLFNBQVUsa0JBQ3BDbkosb0JBQWtCSSxLQUFLK0ksU0FBVSxvQkFDakMvSSxLQUFLMlAsZUFBZXhGLEVBQWFuSyxXLDJCQXQxRHJDLEtBdThEQWtHLFNBQVN3RyxpQkFBaUIsUUFBU3RILEVBQWM4VCxXQUNqRGhZLE9BQU93TCxpQkFBaUIsU0FBVXRILEVBQWMrVCxnQkFFaERqWSxPQUFPa0UsY0FBZ0JBLEciLCJmaWxlIjoidmlydHVhbC1zZWxlY3QubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIERvbVV0aWxzIHtcclxuICBzdGF0aWMgYWRkQ2xhc3MoJGVsZSwgY2xhc3NOYW1lKSB7XHJcbiAgICBpZiAoISRlbGUpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5zcGxpdCgnICcpO1xyXG5cclxuICAgIHRoaXMuZ2V0RWxlbWVudHMoJGVsZSkuZm9yRWFjaCgoX3RoaXMpID0+IHtcclxuICAgICAgX3RoaXMuY2xhc3NMaXN0LmFkZCguLi5jbGFzc05hbWUpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgcmVtb3ZlQ2xhc3MoJGVsZSwgY2xhc3NOYW1lKSB7XHJcbiAgICBpZiAoISRlbGUpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGNsYXNzTmFtZSA9IGNsYXNzTmFtZS5zcGxpdCgnICcpO1xyXG5cclxuICAgIHRoaXMuZ2V0RWxlbWVudHMoJGVsZSkuZm9yRWFjaCgoX3RoaXMpID0+IHtcclxuICAgICAgX3RoaXMuY2xhc3NMaXN0LnJlbW92ZSguLi5jbGFzc05hbWUpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgdG9nZ2xlQ2xhc3MoJGVsZSwgY2xhc3NOYW1lLCBpc0FkZCkge1xyXG4gICAgaWYgKCEkZWxlKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoaXNBZGQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBpc0FkZCA9IEJvb2xlYW4oaXNBZGQpO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBpc0FkZGVkO1xyXG5cclxuICAgIHRoaXMuZ2V0RWxlbWVudHMoJGVsZSkuZm9yRWFjaCgoX3RoaXMpID0+IHtcclxuICAgICAgaXNBZGRlZCA9IF90aGlzLmNsYXNzTGlzdC50b2dnbGUoY2xhc3NOYW1lLCBpc0FkZCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gaXNBZGRlZDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBoYXNDbGFzcygkZWxlLCBjbGFzc05hbWUpIHtcclxuICAgIGlmICghJGVsZSkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuICRlbGUuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgaGFzRWxsaXBzaXMoJGVsZSkge1xyXG4gICAgaWYgKCEkZWxlKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gJGVsZS5zY3JvbGxXaWR0aCA+ICRlbGUub2Zmc2V0V2lkdGg7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZ2V0TW9yZVZpc2libGVTaWRlcygkZWxlKSB7XHJcbiAgICBpZiAoISRlbGUpIHtcclxuICAgICAgcmV0dXJuIHt9O1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBib3ggPSAkZWxlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgbGV0IGF2YWlsYWJsZVdpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XHJcbiAgICBsZXQgYXZhaWxhYmxlSGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xyXG4gICAgbGV0IGxlZnRBcmVhID0gYm94LmxlZnQ7XHJcbiAgICBsZXQgdG9wQXJlYSA9IGJveC50b3A7XHJcbiAgICBsZXQgcmlnaHRBcmVhID0gYXZhaWxhYmxlV2lkdGggLSBsZWZ0QXJlYSAtIGJveC53aWR0aDtcclxuICAgIGxldCBib3R0b21BcmVhID0gYXZhaWxhYmxlSGVpZ2h0IC0gdG9wQXJlYSAtIGJveC5oZWlnaHQ7XHJcbiAgICBsZXQgaG9yaXpvbnRhbCA9IGxlZnRBcmVhID4gcmlnaHRBcmVhID8gJ2xlZnQnIDogJ3JpZ2h0JztcclxuICAgIGxldCB2ZXJ0aWNhbCA9IHRvcEFyZWEgPiBib3R0b21BcmVhID8gJ3RvcCcgOiAnYm90dG9tJztcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBob3Jpem9udGFsLFxyXG4gICAgICB2ZXJ0aWNhbCxcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZ2V0RGF0YSgkZWxlLCBuYW1lLCB0eXBlKSB7XHJcbiAgICBpZiAoISRlbGUpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCB2YWx1ZSA9ICRlbGUgPyAkZWxlLmRhdGFzZXRbbmFtZV0gOiAnJztcclxuXHJcbiAgICBpZiAodHlwZSA9PT0gJ251bWJlcicpIHtcclxuICAgICAgdmFsdWUgPSBwYXJzZUZsb2F0KHZhbHVlKSB8fCAwO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKHZhbHVlID09PSAndHJ1ZScpIHtcclxuICAgICAgICB2YWx1ZSA9IHRydWU7XHJcbiAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09ICdmYWxzZScpIHtcclxuICAgICAgICB2YWx1ZSA9IGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHNldERhdGEoJGVsZSwgbmFtZSwgdmFsdWUpIHtcclxuICAgIGlmICghJGVsZSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgJGVsZS5kYXRhc2V0W25hbWVdID0gdmFsdWU7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgc2V0U3R5bGUoJGVsZSwgbmFtZSwgdmFsdWUpIHtcclxuICAgIGlmICghJGVsZSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgJGVsZS5zdHlsZVtuYW1lXSA9IHZhbHVlO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldEVsZW1lbnRzKCRlbGUpIHtcclxuICAgIGlmICghJGVsZSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCRlbGUubGVuZ3RoID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgJGVsZSA9IFskZWxlXTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gJGVsZTtcclxuICB9XHJcblxyXG4gIC8qKiBjb252ZXJ0IG9iamVjdCB0byBzdHlsZSBhdHRyaWJ1dGUgKi9cclxuICBzdGF0aWMgZ2V0U3R5bGVUZXh0KHByb3BzLCBza2lwQXR0ck5hbWUpIHtcclxuICAgIGxldCByZXN1bHQgPSAnJztcclxuXHJcbiAgICBmb3IgKGxldCBrIGluIHByb3BzKSB7XHJcbiAgICAgIHJlc3VsdCArPSBgJHtrfTogJHtwcm9wc1trXX07YDtcclxuICAgIH1cclxuXHJcbiAgICBpZiAocmVzdWx0ICYmICFza2lwQXR0ck5hbWUpIHtcclxuICAgICAgcmVzdWx0ID0gYHN0eWxlPVwiJHtyZXN1bHR9XCJgO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG5cclxuICAvKiogY29udmVydCBvYmplY3QgdG8gZG9tIGF0dHJpYnV0ZXMgKi9cclxuICBzdGF0aWMgZ2V0QXR0cmlidXRlc1RleHQoZGF0YSkge1xyXG4gICAgbGV0IGh0bWwgPSAnJztcclxuXHJcbiAgICBpZiAoIWRhdGEpIHtcclxuICAgICAgcmV0dXJuIGh0bWw7XHJcbiAgICB9XHJcblxyXG4gICAgZm9yIChsZXQgayBpbiBkYXRhKSB7XHJcbiAgICAgIGxldCB2YWx1ZSA9IGRhdGFba107XHJcblxyXG4gICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIGh0bWwgKz0gYCAke2t9PVwiJHt2YWx1ZX1cIiBgO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGh0bWw7XHJcbiAgfVxyXG59XHJcbiIsImV4cG9ydCBjbGFzcyBVdGlscyB7XHJcbiAgc3RhdGljIGdldFN0cmluZyh0ZXh0KSB7XHJcbiAgICByZXR1cm4gdGV4dCB8fCB0ZXh0ID09PSAwID8gdGV4dC50b1N0cmluZygpIDogJyc7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgY29udmVydFRvQm9vbGVhbih2YWx1ZSwgZGVmYXVsdFZhbHVlID0gZmFsc2UpIHtcclxuICAgIGlmICh2YWx1ZSA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gJ3RydWUnKSB7XHJcbiAgICAgIHZhbHVlID0gdHJ1ZTtcclxuICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IGZhbHNlIHx8IHZhbHVlID09PSAnZmFsc2UnKSB7XHJcbiAgICAgIHZhbHVlID0gZmFsc2U7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB2YWx1ZSA9IGRlZmF1bHRWYWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgaXNFbXB0eSh2YWx1ZSkge1xyXG4gICAgbGV0IHJlc3VsdCA9IGZhbHNlO1xyXG5cclxuICAgIGlmICghdmFsdWUpIHtcclxuICAgICAgcmVzdWx0ID0gdHJ1ZTtcclxuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHJlc3VsdCA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xyXG4gICAgICBpZiAoT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHJlc3VsdCA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGlzTm90RW1wdHkodmFsdWUpIHtcclxuICAgIHJldHVybiAhdGhpcy5pc0VtcHR5KHZhbHVlKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyByZW1vdmVJdGVtRnJvbUFycmF5KGFycmF5LCB2YWx1ZSwgY2xvbmVBcnJheSkge1xyXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGFycmF5KSB8fCAhYXJyYXkubGVuZ3RoIHx8ICF2YWx1ZSkge1xyXG4gICAgICByZXR1cm4gYXJyYXk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGNsb25lQXJyYXkpIHtcclxuICAgICAgYXJyYXkgPSBbLi4uYXJyYXldO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBpbmRleCA9IGFycmF5LmluZGV4T2YodmFsdWUpO1xyXG5cclxuICAgIGlmIChpbmRleCAhPT0gLTEpIHtcclxuICAgICAgYXJyYXkuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYXJyYXk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgcmVtb3ZlQXJyYXlFbXB0eShhcnJheSkge1xyXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGFycmF5KSB8fCAhYXJyYXkubGVuZ3RoKSB7XHJcbiAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYXJyYXkuZmlsdGVyKChkKSA9PiAhIWQpO1xyXG4gIH1cclxufVxyXG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHRpZihfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdKSB7XG5cdFx0cmV0dXJuIF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0uZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJpbXBvcnQgeyBVdGlscywgRG9tVXRpbHMgfSBmcm9tICcuL3V0aWxzJztcclxuXHJcbmNvbnN0IHZpcnR1YWxTZWxlY3RWZXJzaW9uID0gJ3YxLjAuNic7XHJcbmNvbnN0IGRyb3Bib3hDbG9zZUJ1dHRvbkZ1bGxIZWlnaHQgPSA0ODtcclxuY29uc3Qgc2VhcmNoSGVpZ2h0ID0gNDA7XHJcblxyXG5jb25zdCBrZXlEb3duTWV0aG9kTWFwcGluZyA9IHtcclxuICAxMzogJ29uRW50ZXJQcmVzcycsXHJcbiAgMjc6ICdvbkVzY1ByZXNzJyxcclxuICAzODogJ29uVXBBcnJvd1ByZXNzJyxcclxuICA0MDogJ29uRG93bkFycm93UHJlc3MnLFxyXG59O1xyXG5cclxuLyoqIENsYXNzIHJlcHJlc2VudGluZyBWaXJ0dWFsU2VsZWN0ICovXHJcbmV4cG9ydCBjbGFzcyBWaXJ0dWFsU2VsZWN0IHtcclxuICAvKipcclxuICAgKiBDcmVhdGUgYSBWaXJ0dWFsU2VsZWN0XHJcbiAgICogQHByb3BlcnR5IHsoZWxlbWVudHxzdHJpbmcpfSBlbGUgLSBQYXJlbnQgZWxlbWVudCB0byByZW5kZXIgVmlydHVhbFNlbGVjdFxyXG4gICAqIEBwcm9wZXJ0eSB7b2JqZWN0W119IG9wdGlvbnMgLSBBcnJheSBvZiBvYmplY3QgdG8gc2hvdyBhcyBvcHRpb25zXHJcbiAgICogQHByb3BlcnR5IHsoc3RyaW5nfG51bWJlcil9IG9wdGlvbnNbXS52YWx1ZSAtIFZhbHVlIG9mIHRoZSBvcHRpb25cclxuICAgKiBAcHJvcGVydHkgeyhzdHJpbmd8bnVtYmVyKX0gb3B0aW9uc1tdLmxhYmVsIC0gRGlzcGxheSB0ZXh0IG9mIHRoZSBvcHRpb25cclxuICAgKiBAcHJvcGVydHkgeyhzdHJpbmd8bnVtYmVyKX0gb3B0aW9uc1tdLmRlc2NyaXB0aW9uIC0gVGV4dCB0byBzaG93IGFsb25nIHdpdGggbGFiZWxcclxuICAgKiBAcHJvcGVydHkgeyhzdHJpbmd8YXJyYXkpfSBvcHRpb25zW10uYWxpYXMgLSBBbHRlcm5hdGl2ZSBsYWJlbHMgdG8gdXNlIG9uIHNlYXJjaC4gQXJyYXkgb2Ygc3RyaW5nIG9yIGNvbW1hIHNlcGFyYXRlZCBzdHJpbmcuXHJcbiAgICogQHByb3BlcnR5IHthcnJheX0gb3B0aW9uc1tdLm9wdGlvbnMgLSBMaXN0IG9mIG9wdGlvbnMgZm9yIG9wdGlvbiBncm91cFxyXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbdmFsdWVLZXk9dmFsdWVdIC0gT2JqZWN0IGtleSB0byB1c2UgdG8gZ2V0IHZhbHVlIGZyb20gb3B0aW9ucyBhcnJheVxyXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbbGFiZWxLZXk9bGFiZWxdIC0gT2JqZWN0IGtleSB0byB1c2UgdG8gZ2V0IGxhYmVsIGZyb20gb3B0aW9ucyBhcnJheVxyXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbZGVzY3JpcHRpb25LZXk9ZGVzY3JpcHRpb25dIC0gT2JqZWN0IGtleSB0byB1c2UgdG8gZ2V0IGRlc2NyaXB0aW9uIGZyb20gb3B0aW9ucyBhcnJheVxyXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbYWxpYXNLZXk9YWxpYXNdIC0gS2V5IG5hbWUgdG8gZ2V0IGFsaWFzIGZyb20gb3B0aW9ucyBvYmplY3RcclxuICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFttdWx0aXBsZT1mYWxzZV0gLSBFbmFibGUgbXVsdGlzZWxlY3RcclxuICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtzZWFyY2g9ZmFsc2VdIC0gRW5hYmxlIHNlYXJjaFxyXG4gICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2hpZGVDbGVhckJ1dHRvbj1mYWxzZV0gLSBIaWRlIGNsZWFyIGJ1dHRvblxyXG4gICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2F1dG9TZWxlY3RGaXJzdE9wdGlvbj1mYWxzZV0gLSBTZWxlY3QgZmlyc3Qgb3B0aW9uIGJ5IGRlZmF1bHQgb24gbG9hZFxyXG4gICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2hhc09wdGlvbkRlc2NyaXB0aW9uPWZhbHNlXSAtIEhhcyBkZXNjcmlwdGlvbiB0byBzaG93IGFsb25nIHdpdGggbGFiZWxcclxuICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtkaXNhYmxlU2VsZWN0QWxsPWZhbHNlXSAtIERpc2FibGUgc2VsZWN0IGFsbCBmZWF0dXJlIG9mIG11bHRpcGxlIHNlbGVjdFxyXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbb3B0aW9uc0NvdW50PTV8NF0gLSBOby5vZiBvcHRpb25zIHRvIHNob3cgb24gdmlld3BvcnRcclxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gW29wdGlvbkhlaWdodD00MHB4fDYwcHhdIC0gSGVpZ2h0IG9mIGVhY2ggZHJvcGRvd24gb3B0aW9uc1xyXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbcG9zaXRpb249YXV0b10gLSBQb3NpdGlvbiBvZiBkcm9wYm94ICh0b3AsIGJvdHRvbSwgYXV0bylcclxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gW3BsYWNlaG9sZGVyPVNlbGVjdF0gLSBUZXh0IHRvIHNob3cgd2hlbiBubyBvcHRpb25zIHNlbGVjdGVkXHJcbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtub09wdGlvbnNUZXh0PU5vIG9wdGlvbnMgZm91bmRdIC0gVGV4dCB0byBzaG93IHdoZW4gbm8gb3B0aW9ucyB0byBzaG93XHJcbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtub1NlYXJjaFJlc3VsdHNUZXh0PU5vIHJlc3VsdHMgZm91bmRdIC0gVGV4dCB0byBzaG93IHdoZW4gbm8gcmVzdWx0cyBvbiBzZWFyY2hcclxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gW3NlbGVjdEFsbFRleHQ9U2VsZWN0IGFsbF0gLSBUZXh0IHRvIHNob3cgbmVhciBzZWxlY3QgYWxsIGNoZWNrYm94IHdoZW4gc2VhcmNoIGlzIGRpc2FibGVkXHJcbiAgICogQHByb3BlcnR5IHthcnJheX0gW2Rpc2FibGVkT3B0aW9uc10gLSBPcHRpb25zIHRvIGRpc2FibGUgKGFycmF5IG9mIHZhbHVlcylcclxuICAgKiBAcHJvcGVydHkgeyhzdHJpbmd8YXJyYXkpfSBbc2VsZWN0ZWRWYWx1ZV0gLSBTaW5nbGUgdmFsdWUgb3IgYXJyYXkgb2YgdmFsdWVzIHRvIHNlbGVjdCBvbiBpbml0XHJcbiAgICogQHByb3BlcnR5IHtib29sZWFufSBbc2lsZW50SW5pdGlhbFZhbHVlU2V0PWZhbHNlXSAtIFRvIGF2b2lkIFwiY2hhbmdlIGV2ZW50XCIgdHJpZ2dlciBvbiBzZXR0aW5nIGluaXRpYWwgdmFsdWVcclxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gW2Ryb3Bib3hXaWR0aF0gLSBDdXN0b20gd2lkdGggZm9yIGRyb3Bib3hcclxuICAgKiBAcHJvcGVydHkge251bWJlcn0gW3pJbmRleD0xXSAtIENTUyB6LWluZGV4IHZhbHVlIGZvciBkcm9wYm94XHJcbiAgICogQHByb3BlcnR5IHtudW1iZXJ9IFtub09mRGlzcGxheVZhbHVlcz01MF0gLSBNYXhpbXVtIG5vLm9mIHZhbHVlcyB0byBzaG93IGluIHRoZSB0b29sdGlwIGZvciBtdWx0aS1zZWxlY3RcclxuICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFthbGxvd05ld09wdGlvbj1mYWxzZV0gLSBBbGxvdyB0byBhZGQgbmV3IG9wdGlvbiBieSBzZWFyY2hpbmdcclxuICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFttYXJrU2VhcmNoUmVzdWx0cz1mYWxzZV0gLSBNYXJrIG1hdGNoZWQgdGVybSBpbiBsYWJlbFxyXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbdG9vbHRpcEZvbnRTaXplPTE0cHhdIC0gRm9udCBzaXplIGZvciB0b29sdGlwXHJcbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IFt0b29sdGlwQWxpZ25tZW50PWNlbnRlcl0gLSBDU1MgVGV4dCBhbGlnbm1lbnQgZm9yIHRvb2x0aXBcclxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gW3Rvb2x0aXBNYXhXaWR0aD0zMDBweF0gLSBDU1MgbWF4IHdpZHRoIGZvciB0b29sdGlwXHJcbiAgICogQHByb3BlcnR5IHtib29sZWFufSBbc2hvd1NlbGVjdGVkT3B0aW9uc0ZpcnN0PWZhbHNlXSAtIFNob3cgc2VsZWN0ZWQgb3B0aW9ucyBhdCB0aGUgdG9wIG9mIHRoZSBkcm9wYm94XHJcbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtuYW1lXSAtIE5hbWUgYXR0cmlidXRlIGZvciBoaWRkZW4gaW5wdXRcclxuICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtrZWVwQWx3YXlzT3Blbl0gLSBLZWVwIGRyb3Bib3ggYWx3YXlzIG9wZW4gd2l0aCBmaXhlZCBoZWlnaHRcclxuICAgKiBAcHJvcGVydHkge251bWJlcn0gW21heFZhbHVlcz0wXSAtIE1heGltdW0gbm8ub2Ygb3B0aW9ucyBhbGxvd2VkIHRvIGNob29zZSBpbiBtdWx0aXBsZSBzZWxlY3RcclxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gW2FkZGl0aW9uYWxDbGFzc2VzXSAtIEFkZGl0aW9uYWwgY2xhc3NlcyBmb3Igd3JhcHBlciBlbGVtZW50XHJcbiAgICogQHByb3BlcnR5IHtib29sZWFufSBbc2hvd0Ryb3Bib3hBc1BvcHVwPXRydWVdIC0gU2hvdyBkcm9wYm94IGFzIHBvcHVwIG9uIHNtYWxsIHNjcmVlbiBsaWtlIG1vYmlsZVxyXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbcG9wdXBEcm9wYm94QnJlYWtwb2ludD01NzZweF0gLSBNYXhpbXVtIHNjcmVlbiB3aWR0aCB0aGF0IGFsbG93ZWQgdG8gc2hvdyBkcm9wYm94IGFzIHBvcHVwXHJcbiAgICogQHByb3BlcnR5IHtmdW5jdGlvbn0gW29uU2VydmVyU2VhcmNoXSAtIENhbGxiYWNrIGZ1bmN0aW9uIHRvIGludGVncmF0ZSBzZXJ2ZXIgc2VhcmNoXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xyXG4gICAgdHJ5IHtcclxuICAgICAgdGhpcy5zZXRQcm9wcyhvcHRpb25zKTtcclxuICAgICAgdGhpcy5zZXREaXNhYmxlZE9wdGlvbnMob3B0aW9ucy5kaXNhYmxlZE9wdGlvbnMpO1xyXG4gICAgICB0aGlzLnNldE9wdGlvbnMob3B0aW9ucy5vcHRpb25zKTtcclxuICAgICAgdGhpcy5yZW5kZXIoKTtcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgY29uc29sZS53YXJuKGBDb3VsZG4ndCBpbml0aWF0ZSBWaXJ0dWFsIFNlbGVjdGApO1xyXG4gICAgICBjb25zb2xlLmVycm9yKGUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqIHJlbmRlciBtZXRob2RzIC0gc3RhcnQgKi9cclxuICByZW5kZXIoKSB7XHJcbiAgICBpZiAoIXRoaXMuJGVsZSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHdyYXBwZXJDbGFzc2VzID0gJ3ZzY29tcC13cmFwcGVyJztcclxuICAgIGxldCB2YWx1ZVRvb2x0aXAgPSB0aGlzLmdldFRvb2x0aXBBdHRyVGV4dCgnJywgIXRoaXMubXVsdGlwbGUsIHRydWUpO1xyXG4gICAgbGV0IGNsZWFyQnV0dG9uVG9vbHRpcCA9IHRoaXMuZ2V0VG9vbHRpcEF0dHJUZXh0KCdDbGVhcicpO1xyXG5cclxuICAgIGxldCBkcm9wYm94Q29udGFpbmVyU3R5bGUgPSB7XHJcbiAgICAgICd6LWluZGV4JzogdGhpcy56SW5kZXgsXHJcbiAgICB9O1xyXG5cclxuICAgIGlmICh0aGlzLmFkZGl0aW9uYWxDbGFzc2VzKSB7XHJcbiAgICAgIHdyYXBwZXJDbGFzc2VzICs9ICcgJyArIHRoaXMuYWRkaXRpb25hbENsYXNzZXM7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMubXVsdGlwbGUpIHtcclxuICAgICAgd3JhcHBlckNsYXNzZXMgKz0gJyBtdWx0aXBsZSc7XHJcblxyXG4gICAgICBpZiAoIXRoaXMuZGlzYWJsZVNlbGVjdEFsbCkge1xyXG4gICAgICAgIHdyYXBwZXJDbGFzc2VzICs9ICcgaGFzLXNlbGVjdC1hbGwnO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMucG9zaXRpb24gPT09ICd0b3AnKSB7XHJcbiAgICAgIHdyYXBwZXJDbGFzc2VzICs9ICcgcG9zaXRpb24tdG9wJztcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIXRoaXMuaGlkZUNsZWFyQnV0dG9uKSB7XHJcbiAgICAgIHdyYXBwZXJDbGFzc2VzICs9ICcgaGFzLWNsZWFyLWJ1dHRvbic7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMua2VlcEFsd2F5c09wZW4pIHtcclxuICAgICAgd3JhcHBlckNsYXNzZXMgKz0gJyBrZWVwLWFsd2F5cy1vcGVuIG9wZW5lZCc7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB3cmFwcGVyQ2xhc3NlcyArPSAnIGNsb3NlZCc7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuc2hvd0FzUG9wdXApIHtcclxuICAgICAgd3JhcHBlckNsYXNzZXMgKz0gJyBzaG93LWFzLXBvcHVwJztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmICh0aGlzLmRyb3Bib3hXaWR0aCkge1xyXG4gICAgICAgIGRyb3Bib3hDb250YWluZXJTdHlsZS53aWR0aCA9IHRoaXMuZHJvcGJveFdpZHRoO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuaGFzU2VhcmNoKSB7XHJcbiAgICAgIHdyYXBwZXJDbGFzc2VzICs9ICcgaGFzLXNlYXJjaC1pbnB1dCc7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGh0bWwgPSBgPGRpdiBjbGFzcz1cIiR7d3JhcHBlckNsYXNzZXN9XCIgdGFiaW5kZXg9XCIwXCI+XHJcbiAgICAgICAgPGlucHV0IHR5cGU9XCJoaWRkZW5cIiBuYW1lPVwiJHt0aGlzLm5hbWV9XCIgY2xhc3M9XCJ2c2NvbXAtaGlkZGVuLWlucHV0XCI+XHJcblxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJ2c2NvbXAtdG9nZ2xlLWJ1dHRvblwiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cInZzY29tcC12YWx1ZVwiICR7dmFsdWVUb29sdGlwfT5cclxuICAgICAgICAgICAgJHt0aGlzLnBsYWNlaG9sZGVyfVxyXG4gICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cInZzY29tcC1hcnJvd1wiPjwvZGl2PlxyXG5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJ2c2NvbXAtY2xlYXItYnV0dG9uIHRvZ2dsZS1idXR0b24tY2hpbGRcIiAke2NsZWFyQnV0dG9uVG9vbHRpcH0+XHJcbiAgICAgICAgICAgIDxpIGNsYXNzPVwidnNjb21wLWNsZWFyLWljb25cIj48L2k+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgPGRpdiBjbGFzcz1cInZzY29tcC1kcm9wYm94LWNvbnRhaW5lclwiICR7RG9tVXRpbHMuZ2V0U3R5bGVUZXh0KFxyXG4gICAgICAgICAgZHJvcGJveENvbnRhaW5lclN0eWxlXHJcbiAgICAgICAgKX0+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwidnNjb21wLWRyb3Bib3hcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInZzY29tcC1zZWFyY2gtd3JhcHBlclwiPjwvZGl2PlxyXG5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInZzY29tcC1vcHRpb25zLWNvbnRhaW5lclwiPlxyXG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ2c2NvbXAtb3B0aW9ucy1sb2FkZXJcIj48L2Rpdj5cclxuXHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInZzY29tcC1vcHRpb25zLWxpc3RcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ2c2NvbXAtb3B0aW9uc1wiPjwvZGl2PlxyXG4gICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ2c2NvbXAtbm8tb3B0aW9uc1wiPiR7dGhpcy5ub09wdGlvbnNUZXh0fTwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwidnNjb21wLW5vLXNlYXJjaC1yZXN1bHRzXCI+JHtcclxuICAgICAgICAgICAgICB0aGlzLm5vU2VhcmNoUmVzdWx0c1RleHRcclxuICAgICAgICAgICAgfTwvZGl2PlxyXG5cclxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ2c2NvbXAtZHJvcGJveC1jbG9zZS1idXR0b25cIj48aSBjbGFzcz1cInZzY29tcC1jbGVhci1pY29uXCI+PC9pPjwvc3Bhbj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5gO1xyXG5cclxuICAgIHRoaXMuJGVsZS5pbm5lckhUTUwgPSBodG1sO1xyXG4gICAgdGhpcy4kYm9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKTtcclxuICAgIHRoaXMuJHdyYXBwZXIgPSB0aGlzLiRlbGUucXVlcnlTZWxlY3RvcignLnZzY29tcC13cmFwcGVyJyk7XHJcbiAgICB0aGlzLiR0b2dnbGVCdXR0b24gPSB0aGlzLiRlbGUucXVlcnlTZWxlY3RvcignLnZzY29tcC10b2dnbGUtYnV0dG9uJyk7XHJcbiAgICB0aGlzLiRjbGVhckJ1dHRvbiA9IHRoaXMuJGVsZS5xdWVyeVNlbGVjdG9yKCcudnNjb21wLWNsZWFyLWJ1dHRvbicpO1xyXG4gICAgdGhpcy4kZHJvcGJveENvbnRhaW5lciA9IHRoaXMuJGVsZS5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAnLnZzY29tcC1kcm9wYm94LWNvbnRhaW5lcidcclxuICAgICk7XHJcbiAgICB0aGlzLiRkcm9wYm94Q2xvc2VCdXR0b24gPSB0aGlzLiRlbGUucXVlcnlTZWxlY3RvcihcclxuICAgICAgJy52c2NvbXAtZHJvcGJveC1jbG9zZS1idXR0b24nXHJcbiAgICApO1xyXG4gICAgdGhpcy4kc2VhcmNoID0gdGhpcy4kZWxlLnF1ZXJ5U2VsZWN0b3IoJy52c2NvbXAtc2VhcmNoLXdyYXBwZXInKTtcclxuICAgIHRoaXMuJG9wdGlvbnNDb250YWluZXIgPSB0aGlzLiRlbGUucXVlcnlTZWxlY3RvcihcclxuICAgICAgJy52c2NvbXAtb3B0aW9ucy1jb250YWluZXInXHJcbiAgICApO1xyXG4gICAgdGhpcy4kb3B0aW9uc0xpc3QgPSB0aGlzLiRlbGUucXVlcnlTZWxlY3RvcignLnZzY29tcC1vcHRpb25zLWxpc3QnKTtcclxuICAgIHRoaXMuJG9wdGlvbnMgPSB0aGlzLiRlbGUucXVlcnlTZWxlY3RvcignLnZzY29tcC1vcHRpb25zJyk7XHJcbiAgICB0aGlzLiR2YWx1ZVRleHQgPSB0aGlzLiRlbGUucXVlcnlTZWxlY3RvcignLnZzY29tcC12YWx1ZScpO1xyXG4gICAgdGhpcy4kaGlkZGVuSW5wdXQgPSB0aGlzLiRlbGUucXVlcnlTZWxlY3RvcignLnZzY29tcC1oaWRkZW4taW5wdXQnKTtcclxuICAgIHRoaXMuJG5vT3B0aW9ucyA9IHRoaXMuJGVsZS5xdWVyeVNlbGVjdG9yKCcudnNjb21wLW5vLW9wdGlvbnMnKTtcclxuICAgIHRoaXMuJG5vU2VhcmNoUmVzdWx0cyA9IHRoaXMuJGVsZS5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAnLnZzY29tcC1uby1zZWFyY2gtcmVzdWx0cydcclxuICAgICk7XHJcblxyXG4gICAgdGhpcy5hZnRlclJlbmRlcldyYXBwZXIoKTtcclxuICB9XHJcblxyXG4gIHJlbmRlck9wdGlvbnMoKSB7XHJcbiAgICBsZXQgaHRtbCA9ICcnO1xyXG4gICAgbGV0IHZpc2libGVPcHRpb25zID0gdGhpcy5nZXRWaXNpYmxlT3B0aW9ucygpO1xyXG4gICAgbGV0IGNoZWNrYm94SHRtbCA9ICcnO1xyXG4gICAgbGV0IG5ld09wdGlvbkljb25IdG1sID0gJyc7XHJcbiAgICBsZXQgbWFya1NlYXJjaFJlc3VsdHMgPVxyXG4gICAgICB0aGlzLm1hcmtTZWFyY2hSZXN1bHRzICYmIHRoaXMuc2VhcmNoVmFsdWUgPyB0cnVlIDogZmFsc2U7XHJcbiAgICBsZXQgc2VhcmNoUmVnZXg7XHJcblxyXG4gICAgbGV0IHN0eWxlVGV4dCA9IERvbVV0aWxzLmdldFN0eWxlVGV4dCh7XHJcbiAgICAgIGhlaWdodDogdGhpcy5vcHRpb25IZWlnaHQgKyAncHgnLFxyXG4gICAgfSk7XHJcblxyXG4gICAgaWYgKG1hcmtTZWFyY2hSZXN1bHRzKSB7XHJcbiAgICAgIHNlYXJjaFJlZ2V4ID0gbmV3IFJlZ0V4cChgKCR7dGhpcy5zZWFyY2hWYWx1ZX0pYCwgJ2dpJyk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMubXVsdGlwbGUpIHtcclxuICAgICAgY2hlY2tib3hIdG1sID0gJzxzcGFuIGNsYXNzPVwiY2hlY2tib3gtaWNvblwiPjwvc3Bhbj4nO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLmFsbG93TmV3T3B0aW9uKSB7XHJcbiAgICAgIGxldCBuZXdPcHRpb25Ub29sdGlwID0gdGhpcy5nZXRUb29sdGlwQXR0clRleHQoJ05ldyBPcHRpb24nKTtcclxuICAgICAgbmV3T3B0aW9uSWNvbkh0bWwgPSBgPHNwYW4gY2xhc3M9XCJ2c2NvbXAtbmV3LW9wdGlvbi1pY29uXCIgJHtuZXdPcHRpb25Ub29sdGlwfT48L3NwYW4+YDtcclxuICAgIH1cclxuXHJcbiAgICB2aXNpYmxlT3B0aW9ucy5mb3JFYWNoKChkKSA9PiB7XHJcbiAgICAgIGxldCBvcHRpb25MYWJlbCA9IGQubGFiZWw7XHJcbiAgICAgIGxldCBvcHRpb25DbGFzc2VzID0gJ3ZzY29tcC1vcHRpb24nO1xyXG4gICAgICBsZXQgb3B0aW9uVG9vbHRpcCA9IHRoaXMuZ2V0VG9vbHRpcEF0dHJUZXh0KCcnLCB0cnVlKTtcclxuICAgICAgbGV0IGxlZnRTZWN0aW9uID0gY2hlY2tib3hIdG1sO1xyXG4gICAgICBsZXQgcmlnaHRTZWN0aW9uID0gJyc7XHJcbiAgICAgIGxldCBkZXNjcmlwdGlvbiA9ICcnO1xyXG5cclxuICAgICAgaWYgKGQuaXNGb2N1c2VkKSB7XHJcbiAgICAgICAgb3B0aW9uQ2xhc3NlcyArPSAnIGZvY3VzZWQnO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoZC5pc0Rpc2FibGVkKSB7XHJcbiAgICAgICAgb3B0aW9uQ2xhc3NlcyArPSAnIGRpc2FibGVkJztcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGQuaXNHcm91cFRpdGxlKSB7XHJcbiAgICAgICAgb3B0aW9uQ2xhc3NlcyArPSAnIGdyb3VwLXRpdGxlJztcclxuICAgICAgICBsZWZ0U2VjdGlvbiA9ICcnO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmIChkLmlzU2VsZWN0ZWQpIHtcclxuICAgICAgICAgIG9wdGlvbkNsYXNzZXMgKz0gJyBzZWxlY3RlZCc7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoZC5pc0dyb3VwT3B0aW9uKSB7XHJcbiAgICAgICAgb3B0aW9uQ2xhc3NlcyArPSAnIGdyb3VwLW9wdGlvbic7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChkLmRlc2NyaXB0aW9uKSB7XHJcbiAgICAgICAgZGVzY3JpcHRpb24gPSBgPGRpdiBjbGFzcz1cInZzY29tcC1vcHRpb24tZGVzY3JpcHRpb25cIiAke29wdGlvblRvb2x0aXB9PiR7ZC5kZXNjcmlwdGlvbn08L2Rpdj5gO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoZC5pc0N1cnJlbnROZXcpIHtcclxuICAgICAgICBvcHRpb25DbGFzc2VzICs9ICcgY3VycmVudC1uZXcnO1xyXG4gICAgICAgIHJpZ2h0U2VjdGlvbiArPSBuZXdPcHRpb25JY29uSHRtbDtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAobWFya1NlYXJjaFJlc3VsdHMgJiYgIWQuaXNHcm91cFRpdGxlKSB7XHJcbiAgICAgICAgICBvcHRpb25MYWJlbCA9IG9wdGlvbkxhYmVsLnJlcGxhY2Uoc2VhcmNoUmVnZXgsICc8bWFyaz4kMTwvbWFyaz4nKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGh0bWwgKz0gYDxkaXYgY2xhc3M9XCIke29wdGlvbkNsYXNzZXN9XCIgZGF0YS12YWx1ZT1cIiR7ZC52YWx1ZX1cIiBkYXRhLWluZGV4PVwiJHtkLmluZGV4fVwiIGRhdGEtdmlzaWJsZS1pbmRleD1cIiR7ZC52aXNpYmxlSW5kZXh9XCIgJHtzdHlsZVRleHR9PlxyXG4gICAgICAgICAgJHtsZWZ0U2VjdGlvbn1cclxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwidnNjb21wLW9wdGlvbi10ZXh0XCIgJHtvcHRpb25Ub29sdGlwfT5cclxuICAgICAgICAgICAgJHtvcHRpb25MYWJlbH1cclxuICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICR7ZGVzY3JpcHRpb259XHJcbiAgICAgICAgICAke3JpZ2h0U2VjdGlvbn1cclxuICAgICAgICA8L2Rpdj5gO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy4kb3B0aW9ucy5pbm5lckhUTUwgPSBodG1sO1xyXG4gICAgbGV0IGhhc05vT3B0aW9ucyA9ICF0aGlzLm9wdGlvbnMubGVuZ3RoO1xyXG4gICAgbGV0IGhhc05vU2VhcmNoUmVzdWx0cyA9ICFoYXNOb09wdGlvbnMgJiYgIXZpc2libGVPcHRpb25zLmxlbmd0aDtcclxuXHJcbiAgICBpZiAoIXRoaXMuYWxsb3dOZXdPcHRpb24pIHtcclxuICAgICAgRG9tVXRpbHMudG9nZ2xlQ2xhc3MoXHJcbiAgICAgICAgdGhpcy4kd3JhcHBlcixcclxuICAgICAgICAnaGFzLW5vLXNlYXJjaC1yZXN1bHRzJyxcclxuICAgICAgICBoYXNOb1NlYXJjaFJlc3VsdHNcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBEb21VdGlscy50b2dnbGVDbGFzcyh0aGlzLiR3cmFwcGVyLCAnaGFzLW5vLW9wdGlvbnMnLCBoYXNOb09wdGlvbnMpO1xyXG4gICAgdGhpcy5zZXRPcHRpb25zUG9zaXRpb24oKTtcclxuICAgIHRoaXMuc2V0T3B0aW9uc1Rvb2x0aXAoKTtcclxuICAgIC8vdGhpcy5tb3ZlRm9jdXNlZE9wdGlvblRvVmlldygpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyU2VhcmNoKCkge1xyXG4gICAgaWYgKCF0aGlzLmhhc1NlYXJjaENvbnRhaW5lcikge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGNoZWNrYm94SHRtbCA9ICcnO1xyXG4gICAgbGV0IHNlYXJjaElucHV0ID0gJyc7XHJcblxyXG4gICAgaWYgKHRoaXMubXVsdGlwbGUgJiYgIXRoaXMuZGlzYWJsZVNlbGVjdEFsbCkge1xyXG4gICAgICBjaGVja2JveEh0bWwgPSBgPHNwYW4gY2xhc3M9XCJ2c2NvbXAtdG9nZ2xlLWFsbC1idXR0b25cIj5cclxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiY2hlY2tib3gtaWNvbiB2c2NvbXAtdG9nZ2xlLWFsbC1jaGVja2JveFwiPjwvc3Bhbj5cclxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwidnNjb21wLXRvZ2dsZS1hbGwtbGFiZWxcIj4ke3RoaXMuc2VsZWN0QWxsVGV4dH08L3NwYW4+XHJcbiAgICAgICAgPC9zcGFuPmA7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuaGFzU2VhcmNoKSB7XHJcbiAgICAgIHNlYXJjaElucHV0ID0gYDxpbnB1dCB0eXBlPVwidGV4dFwiIGNsYXNzPVwidnNjb21wLXNlYXJjaC1pbnB1dFwiIHBsYWNlaG9sZGVyPVwiU2VhcmNoLi4uXCI+XHJcbiAgICAgIDxzcGFuIGNsYXNzPVwidnNjb21wLXNlYXJjaC1jbGVhclwiPiZ0aW1lczs8L3NwYW4+YDtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgaHRtbCA9IGA8ZGl2IGNsYXNzPVwidnNjb21wLXNlYXJjaC1jb250YWluZXJcIj5cclxuICAgICAgICAke2NoZWNrYm94SHRtbH1cclxuICAgICAgICAke3NlYXJjaElucHV0fVxyXG4gICAgICA8L2Rpdj5gO1xyXG5cclxuICAgIHRoaXMuJHNlYXJjaC5pbm5lckhUTUwgPSBodG1sO1xyXG4gICAgdGhpcy4kc2VhcmNoSW5wdXQgPSB0aGlzLiRlbGUucXVlcnlTZWxlY3RvcignLnZzY29tcC1zZWFyY2gtaW5wdXQnKTtcclxuICAgIHRoaXMuJHNlYXJjaENsZWFyID0gdGhpcy4kZWxlLnF1ZXJ5U2VsZWN0b3IoJy52c2NvbXAtc2VhcmNoLWNsZWFyJyk7XHJcbiAgICB0aGlzLiR0b2dnbGVBbGxCdXR0b24gPSB0aGlzLiRlbGUucXVlcnlTZWxlY3RvcihcclxuICAgICAgJy52c2NvbXAtdG9nZ2xlLWFsbC1idXR0b24nXHJcbiAgICApO1xyXG4gICAgdGhpcy4kdG9nZ2xlQWxsQ2hlY2tib3ggPSB0aGlzLiRlbGUucXVlcnlTZWxlY3RvcihcclxuICAgICAgJy52c2NvbXAtdG9nZ2xlLWFsbC1jaGVja2JveCdcclxuICAgICk7XHJcblxyXG4gICAgdGhpcy5hZGRFdmVudCh0aGlzLiRzZWFyY2hJbnB1dCwgJ2tleXVwIGNoYW5nZScsICdvblNlYXJjaCcpO1xyXG4gICAgdGhpcy5hZGRFdmVudCh0aGlzLiRzZWFyY2hDbGVhciwgJ2NsaWNrJywgJ29uU2VhcmNoQ2xlYXInKTtcclxuICAgIHRoaXMuYWRkRXZlbnQodGhpcy4kdG9nZ2xlQWxsQnV0dG9uLCAnY2xpY2snLCAnb25Ub2dnbGVBbGxPcHRpb25zJyk7XHJcbiAgfVxyXG4gIC8qKiByZW5kZXIgbWV0aG9kcyAtIGVuZCAqL1xyXG5cclxuICAvKiogZG9tIGV2ZW50IG1ldGhvZHMgLSBzdGFydCAqL1xyXG4gIGFkZEV2ZW50cygpIHtcclxuICAgIHRoaXMuYWRkRXZlbnQoZG9jdW1lbnQsICdjbGljaycsICdvbkRvY3VtZW50Q2xpY2snKTtcclxuICAgIHRoaXMuYWRkRXZlbnQodGhpcy4kd3JhcHBlciwgJ2tleWRvd24nLCAnb25LZXlEb3duJyk7XHJcbiAgICB0aGlzLmFkZEV2ZW50KHRoaXMuJHRvZ2dsZUJ1dHRvbiwgJ2NsaWNrJywgJ29uVG9nZ2xlQnV0dG9uQ2xpY2snKTtcclxuICAgIHRoaXMuYWRkRXZlbnQodGhpcy4kY2xlYXJCdXR0b24sICdjbGljaycsICdvbkNsZWFyQnV0dG9uQ2xpY2snKTtcclxuICAgIHRoaXMuYWRkRXZlbnQodGhpcy4kZHJvcGJveENvbnRhaW5lciwgJ2NsaWNrJywgJ29uRHJvcGJveENvbnRhaW5lckNsaWNrJyk7XHJcbiAgICB0aGlzLmFkZEV2ZW50KFxyXG4gICAgICB0aGlzLiRkcm9wYm94Q2xvc2VCdXR0b24sXHJcbiAgICAgICdjbGljaycsXHJcbiAgICAgICdvbkRyb3Bib3hDbG9zZUJ1dHRvbkNsaWNrJ1xyXG4gICAgKTtcclxuICAgIGlmICh0aGlzLm92ZXJyaWRlU2Nyb2xsRXZlbnRTZWxlY3Rvcikge1xyXG4gICAgICB0aGlzLmFkZEV2ZW50KFxyXG4gICAgICAgIHRoaXMuJGVsZS5xdWVyeVNlbGVjdG9yKHRoaXMub3ZlcnJpZGVTY3JvbGxFdmVudFNlbGVjdG9yKSxcclxuICAgICAgICAnc2Nyb2xsJyxcclxuICAgICAgICAnb25PcHRpb25zU2Nyb2xsJ1xyXG4gICAgICApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5hZGRFdmVudCh0aGlzLiRvcHRpb25zQ29udGFpbmVyLCAnc2Nyb2xsJywgJ29uT3B0aW9uc1Njcm9sbCcpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5hZGRFdmVudCh0aGlzLiRvcHRpb25zLCAnY2xpY2snLCAnb25PcHRpb25zQ2xpY2snKTtcclxuICAgIHRoaXMuYWRkRXZlbnQodGhpcy4kb3B0aW9ucywgJ21vdXNlb3ZlcicsICdvbk9wdGlvbnNNb3VzZU92ZXInKTtcclxuICAgIHRoaXMuYWRkRXZlbnQodGhpcy4kb3B0aW9ucywgJ3RvdWNobW92ZScsICdvbk9wdGlvbnNUb3VjaE1vdmUnKTtcclxuICB9XHJcblxyXG4gIGFkZEV2ZW50KCRlbGUsIGV2ZW50cywgbWV0aG9kKSB7XHJcbiAgICBpZiAoISRlbGUpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGV2ZW50cyA9IFV0aWxzLnJlbW92ZUFycmF5RW1wdHkoZXZlbnRzLnNwbGl0KCcgJykpO1xyXG5cclxuICAgIGV2ZW50cy5mb3JFYWNoKChldmVudCkgPT4ge1xyXG4gICAgICBsZXQgZXZlbnRzS2V5ID0gYCR7bWV0aG9kfS0ke2V2ZW50fWA7XHJcbiAgICAgIGxldCBjYWxsYmFjayA9IHRoaXMuZXZlbnRzW2V2ZW50c0tleV07XHJcblxyXG4gICAgICBpZiAoIWNhbGxiYWNrKSB7XHJcbiAgICAgICAgY2FsbGJhY2sgPSB0aGlzW21ldGhvZF0uYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLmV2ZW50c1tldmVudHNLZXldID0gY2FsbGJhY2s7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgICRlbGUgPSBEb21VdGlscy5nZXRFbGVtZW50cygkZWxlKTtcclxuXHJcbiAgICAgICRlbGUuZm9yRWFjaCgoX3RoaXMpID0+IHtcclxuICAgICAgICBfdGhpcy5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBjYWxsYmFjayk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBkaXNwYXRjaEV2ZW50KCRlbGUsIGV2ZW50TmFtZSkge1xyXG4gICAgaWYgKCEkZWxlKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAkZWxlID0gRG9tVXRpbHMuZ2V0RWxlbWVudHMoJGVsZSk7XHJcblxyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICRlbGUuZm9yRWFjaCgoX3RoaXMpID0+IHtcclxuICAgICAgICBfdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChldmVudE5hbWUsIHsgYnViYmxlczogdHJ1ZSB9KSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSwgMCk7XHJcbiAgfVxyXG5cclxuICBvbkRvY3VtZW50Q2xpY2soZSkge1xyXG4gICAgVmlydHVhbFNlbGVjdC5jbG9zZUFsbERyb3Bib3goZS50YXJnZXQuY2xvc2VzdCgnLnZzY29tcC13cmFwcGVyJykpO1xyXG4gIH1cclxuXHJcbiAgb25LZXlEb3duKGUpIHtcclxuICAgIGxldCBrZXkgPSBlLndoaWNoIHx8IGUua2V5Q29kZTtcclxuICAgIGxldCBtZXRob2QgPSBrZXlEb3duTWV0aG9kTWFwcGluZ1trZXldO1xyXG5cclxuICAgIGlmIChtZXRob2QpIHtcclxuICAgICAgdGhpc1ttZXRob2RdKGUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgb25FbnRlclByZXNzKCkge1xyXG4gICAgaWYgKCF0aGlzLmlzT3BlbmVkKCkpIHtcclxuICAgICAgdGhpcy5vcGVuRHJvcGJveCgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5zZWxlY3RGb2N1c2VkT3B0aW9uKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvbkVzY1ByZXNzKCkge1xyXG4gICAgaWYgKHRoaXMuaXNPcGVuZWQoKSkge1xyXG4gICAgICB0aGlzLmNsb3NlRHJvcGJveCgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgb25Eb3duQXJyb3dQcmVzcyhlKSB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgaWYgKHRoaXMuaXNPcGVuZWQoKSkge1xyXG4gICAgICB0aGlzLmZvY3VzT3B0aW9uKCduZXh0Jyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLm9wZW5Ecm9wYm94KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvblVwQXJyb3dQcmVzcyhlKSB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcblxyXG4gICAgaWYgKHRoaXMuaXNPcGVuZWQoKSkge1xyXG4gICAgICB0aGlzLmZvY3VzT3B0aW9uKCdwcmV2aW91cycpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5vcGVuRHJvcGJveCgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgb25Ub2dnbGVCdXR0b25DbGljayhlKSB7XHJcbiAgICBsZXQgY2hpbGRFbGUgPSBlLnRhcmdldC5jbG9zZXN0KCcudG9nZ2xlLWJ1dHRvbi1jaGlsZCcpO1xyXG5cclxuICAgIGlmIChjaGlsZEVsZSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy50b2dnbGVEcm9wYm94KCk7XHJcbiAgfVxyXG5cclxuICBvbkNsZWFyQnV0dG9uQ2xpY2soKSB7XHJcbiAgICB0aGlzLnJlc2V0KCk7XHJcbiAgfVxyXG5cclxuICBvbk9wdGlvbnNTY3JvbGwoKSB7XHJcbiAgICB0aGlzLnNldFZpc2libGVPcHRpb25zKCk7XHJcbiAgfVxyXG5cclxuICBvbk9wdGlvbnNDbGljayhlKSB7XHJcbiAgICB0aGlzLnNlbGVjdE9wdGlvbihcclxuICAgICAgZS50YXJnZXQuY2xvc2VzdCgnLnZzY29tcC1vcHRpb246bm90KC5kaXNhYmxlZCk6bm90KC5ncm91cC10aXRsZSknKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIG9uRHJvcGJveENvbnRhaW5lckNsaWNrKGUpIHtcclxuICAgIGlmICghZS50YXJnZXQuY2xvc2VzdCgnLnZzY29tcC1kcm9wYm94JykpIHtcclxuICAgICAgdGhpcy5jbG9zZURyb3Bib3goKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG9uRHJvcGJveENsb3NlQnV0dG9uQ2xpY2soKSB7XHJcbiAgICB0aGlzLmNsb3NlRHJvcGJveCgpO1xyXG4gIH1cclxuXHJcbiAgb25PcHRpb25zTW91c2VPdmVyKGUpIHtcclxuICAgIGxldCAkZWxlID0gZS50YXJnZXQuY2xvc2VzdChcclxuICAgICAgJy52c2NvbXAtb3B0aW9uOm5vdCguZGlzYWJsZWQpOm5vdCguZ3JvdXAtdGl0bGUpJ1xyXG4gICAgKTtcclxuXHJcbiAgICBpZiAoJGVsZSkge1xyXG4gICAgICB0aGlzLmZvY3VzT3B0aW9uKG51bGwsICRlbGUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgb25PcHRpb25zVG91Y2hNb3ZlKCkge1xyXG4gICAgdGhpcy5yZW1vdmVPcHRpb25Gb2N1cygpO1xyXG4gIH1cclxuXHJcbiAgb25TZWFyY2goZSkge1xyXG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgIHRoaXMuc2V0U2VhcmNoVmFsdWUoZS50YXJnZXQudmFsdWUsIHRydWUpO1xyXG4gIH1cclxuXHJcbiAgb25TZWFyY2hDbGVhcigpIHtcclxuICAgIHRoaXMuc2V0U2VhcmNoVmFsdWUoJycpO1xyXG4gICAgdGhpcy5mb2N1c1NlYXJjaElucHV0KCk7XHJcbiAgfVxyXG5cclxuICBvblRvZ2dsZUFsbE9wdGlvbnMoKSB7XHJcbiAgICB0aGlzLnRvZ2dsZUFsbE9wdGlvbnMoKTtcclxuICB9XHJcblxyXG4gIG9uUmVzaXplKCkge1xyXG4gICAgdGhpcy5zZXRPcHRpb25zQ29udGFpbmVySGVpZ2h0KHRydWUpO1xyXG4gIH1cclxuICAvKiogZG9tIGV2ZW50IG1ldGhvZHMgLSBlbmQgKi9cclxuXHJcbiAgLyoqIGFmdGVyIGV2ZW50IG1ldGhvZHMgLSBzdGFydCAqL1xyXG4gIGFmdGVyUmVuZGVyV3JhcHBlcigpIHtcclxuICAgIHRoaXMuJGVsZS5zZXRBdHRyaWJ1dGUoJ25hbWUnLCB0aGlzLm5hbWUpO1xyXG5cclxuICAgIERvbVV0aWxzLmFkZENsYXNzKHRoaXMuJGVsZSwgJ3ZzY29tcC1lbGUnKTtcclxuICAgIHRoaXMucmVuZGVyU2VhcmNoKCk7XHJcbiAgICB0aGlzLnNldE9wdGlvbnNIZWlnaHQoKTtcclxuICAgIHRoaXMuc2V0VmlzaWJsZU9wdGlvbnMoKTtcclxuICAgIHRoaXMuc2V0T3B0aW9uc0NvbnRhaW5lckhlaWdodCgpO1xyXG4gICAgdGhpcy5hZGRFdmVudHMoKTtcclxuICAgIHRoaXMuc2V0TWV0aG9kcygpO1xyXG5cclxuICAgIGlmICh0aGlzLmluaXRpYWxTZWxlY3RlZFZhbHVlKSB7XHJcbiAgICAgIHRoaXMuc2V0VmFsdWVNZXRob2QoXHJcbiAgICAgICAgdGhpcy5pbml0aWFsU2VsZWN0ZWRWYWx1ZSxcclxuICAgICAgICB0aGlzLnNpbGVudEluaXRpYWxWYWx1ZVNldFxyXG4gICAgICApO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLmF1dG9TZWxlY3RGaXJzdE9wdGlvbiAmJiB0aGlzLnZpc2libGVPcHRpb25zLmxlbmd0aCkge1xyXG4gICAgICB0aGlzLnNldFZhbHVlTWV0aG9kKFxyXG4gICAgICAgIHRoaXMudmlzaWJsZU9wdGlvbnNbMF0udmFsdWUsXHJcbiAgICAgICAgdGhpcy5zaWxlbnRJbml0aWFsVmFsdWVTZXRcclxuICAgICAgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFmdGVyU2V0T3B0aW9uc0NvbnRhaW5lckhlaWdodChyZXNldCkge1xyXG4gICAgaWYgKHJlc2V0KSB7XHJcbiAgICAgIGlmICh0aGlzLnNob3dBc1BvcHVwKSB7XHJcbiAgICAgICAgdGhpcy5zZXRWaXNpYmxlT3B0aW9ucygpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8qKiBhZnRlciBldmVudCBtZXRob2RzIC0gZW5kICovXHJcblxyXG4gIC8qKiBzZXQgbWV0aG9kcyAtIHN0YXJ0ICovXHJcbiAgc2V0UHJvcHMob3B0aW9ucykge1xyXG4gICAgb3B0aW9ucyA9IHRoaXMuc2V0RGVmYXVsdFByb3BzKG9wdGlvbnMpO1xyXG4gICAgdGhpcy5zZXRQcm9wc0Zyb21FbGVtZW50QXR0cihvcHRpb25zKTtcclxuXHJcbiAgICBsZXQgY29udmVydFRvQm9vbGVhbiA9IFV0aWxzLmNvbnZlcnRUb0Jvb2xlYW47XHJcblxyXG4gICAgdGhpcy4kZWxlID0gb3B0aW9ucy5lbGU7XHJcbiAgICB0aGlzLnZhbHVlS2V5ID0gb3B0aW9ucy52YWx1ZUtleTtcclxuICAgIHRoaXMubGFiZWxLZXkgPSBvcHRpb25zLmxhYmVsS2V5O1xyXG4gICAgdGhpcy5kZXNjcmlwdGlvbktleSA9IG9wdGlvbnMuZGVzY3JpcHRpb25LZXk7XHJcbiAgICB0aGlzLmFsaWFzS2V5ID0gb3B0aW9ucy5hbGlhc0tleTtcclxuICAgIHRoaXMub3B0aW9uSGVpZ2h0VGV4dCA9IG9wdGlvbnMub3B0aW9uSGVpZ2h0O1xyXG4gICAgdGhpcy5vcHRpb25IZWlnaHQgPSBwYXJzZUZsb2F0KHRoaXMub3B0aW9uSGVpZ2h0VGV4dCk7XHJcbiAgICB0aGlzLm11bHRpcGxlID0gY29udmVydFRvQm9vbGVhbihvcHRpb25zLm11bHRpcGxlKTtcclxuICAgIHRoaXMuaGFzU2VhcmNoID0gY29udmVydFRvQm9vbGVhbihvcHRpb25zLnNlYXJjaCk7XHJcbiAgICB0aGlzLmhpZGVDbGVhckJ1dHRvbiA9IGNvbnZlcnRUb0Jvb2xlYW4ob3B0aW9ucy5oaWRlQ2xlYXJCdXR0b24pO1xyXG4gICAgdGhpcy5hdXRvU2VsZWN0Rmlyc3RPcHRpb24gPSBjb252ZXJ0VG9Cb29sZWFuKFxyXG4gICAgICBvcHRpb25zLmF1dG9TZWxlY3RGaXJzdE9wdGlvblxyXG4gICAgKTtcclxuICAgIHRoaXMuaGFzT3B0aW9uRGVzY3JpcHRpb24gPSBjb252ZXJ0VG9Cb29sZWFuKG9wdGlvbnMuaGFzT3B0aW9uRGVzY3JpcHRpb24pO1xyXG4gICAgdGhpcy5zaWxlbnRJbml0aWFsVmFsdWVTZXQgPSBjb252ZXJ0VG9Cb29sZWFuKFxyXG4gICAgICBvcHRpb25zLnNpbGVudEluaXRpYWxWYWx1ZVNldFxyXG4gICAgKTtcclxuICAgIHRoaXMuYWxsb3dOZXdPcHRpb24gPSBjb252ZXJ0VG9Cb29sZWFuKG9wdGlvbnMuYWxsb3dOZXdPcHRpb24pO1xyXG4gICAgdGhpcy5tYXJrU2VhcmNoUmVzdWx0cyA9IGNvbnZlcnRUb0Jvb2xlYW4ob3B0aW9ucy5tYXJrU2VhcmNoUmVzdWx0cyk7XHJcbiAgICB0aGlzLnNob3dTZWxlY3RlZE9wdGlvbnNGaXJzdCA9IGNvbnZlcnRUb0Jvb2xlYW4oXHJcbiAgICAgIG9wdGlvbnMuc2hvd1NlbGVjdGVkT3B0aW9uc0ZpcnN0XHJcbiAgICApO1xyXG4gICAgdGhpcy5kaXNhYmxlU2VsZWN0QWxsID0gY29udmVydFRvQm9vbGVhbihvcHRpb25zLmRpc2FibGVTZWxlY3RBbGwpO1xyXG4gICAgdGhpcy5rZWVwQWx3YXlzT3BlbiA9IGNvbnZlcnRUb0Jvb2xlYW4ob3B0aW9ucy5rZWVwQWx3YXlzT3Blbik7XHJcbiAgICB0aGlzLnNob3dEcm9wYm94QXNQb3B1cCA9IGNvbnZlcnRUb0Jvb2xlYW4ob3B0aW9ucy5zaG93RHJvcGJveEFzUG9wdXApO1xyXG4gICAgdGhpcy5ub09wdGlvbnNUZXh0ID0gb3B0aW9ucy5ub09wdGlvbnNUZXh0O1xyXG4gICAgdGhpcy5ub1NlYXJjaFJlc3VsdHNUZXh0ID0gb3B0aW9ucy5ub1NlYXJjaFJlc3VsdHNUZXh0O1xyXG4gICAgdGhpcy5zZWxlY3RBbGxUZXh0ID0gb3B0aW9ucy5zZWxlY3RBbGxUZXh0O1xyXG4gICAgdGhpcy5wbGFjZWhvbGRlciA9IG9wdGlvbnMucGxhY2Vob2xkZXI7XHJcbiAgICB0aGlzLnBvc2l0aW9uID0gb3B0aW9ucy5wb3NpdGlvbjtcclxuICAgIHRoaXMuZHJvcGJveFdpZHRoID0gb3B0aW9ucy5kcm9wYm94V2lkdGg7XHJcbiAgICB0aGlzLnRvb2x0aXBGb250U2l6ZSA9IG9wdGlvbnMudG9vbHRpcEZvbnRTaXplO1xyXG4gICAgdGhpcy50b29sdGlwQWxpZ25tZW50ID0gb3B0aW9ucy50b29sdGlwQWxpZ25tZW50O1xyXG4gICAgdGhpcy50b29sdGlwTWF4V2lkdGggPSBvcHRpb25zLnRvb2x0aXBNYXhXaWR0aDtcclxuICAgIHRoaXMubm9PZkRpc3BsYXlWYWx1ZXMgPSBwYXJzZUludChvcHRpb25zLm5vT2ZEaXNwbGF5VmFsdWVzKTtcclxuICAgIHRoaXMuekluZGV4ID0gcGFyc2VJbnQob3B0aW9ucy56SW5kZXgpO1xyXG4gICAgdGhpcy5tYXhWYWx1ZXMgPSBwYXJzZUludChvcHRpb25zLm1heFZhbHVlcyk7XHJcbiAgICB0aGlzLm5hbWUgPSBvcHRpb25zLm5hbWU7XHJcbiAgICB0aGlzLmFkZGl0aW9uYWxDbGFzc2VzID0gb3B0aW9ucy5hZGRpdGlvbmFsQ2xhc3NlcztcclxuICAgIHRoaXMuaW5pdGlhbFNlbGVjdGVkVmFsdWUgPSBvcHRpb25zLnNlbGVjdGVkVmFsdWU7XHJcbiAgICB0aGlzLnBvcHVwRHJvcGJveEJyZWFrcG9pbnQgPSBvcHRpb25zLnBvcHVwRHJvcGJveEJyZWFrcG9pbnQ7XHJcbiAgICB0aGlzLm9uU2VydmVyU2VhcmNoID0gb3B0aW9ucy5vblNlcnZlclNlYXJjaDtcclxuXHJcbiAgICB0aGlzLnNlbGVjdGVkVmFsdWVzID0gW107XHJcbiAgICB0aGlzLm5ld1ZhbHVlcyA9IFtdO1xyXG4gICAgdGhpcy5ldmVudHMgPSB7fTtcclxuICAgIHRoaXMudG9vbHRpcEVudGVyRGVsYXkgPSAyMDA7XHJcbiAgICB0aGlzLnRyYW5zaXRpb25EdXJhdGlvbiA9IDI1MDtcclxuICAgIHRoaXMuc2VhcmNoVmFsdWUgPSAnJztcclxuICAgIHRoaXMuc2VhcmNoVmFsdWVPcmlnaW5hbCA9ICcnO1xyXG4gICAgdGhpcy5pc0FsbFNlbGVjdGVkID0gZmFsc2U7XHJcblxyXG4gICAgaWYgKFxyXG4gICAgICAob3B0aW9ucy5zZWFyY2ggPT09IHVuZGVmaW5lZCAmJiB0aGlzLm11bHRpcGxlKSB8fFxyXG4gICAgICB0aGlzLmFsbG93TmV3T3B0aW9uXHJcbiAgICApIHtcclxuICAgICAgdGhpcy5oYXNTZWFyY2ggPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLm1heFZhbHVlcykge1xyXG4gICAgICB0aGlzLmRpc2FibGVTZWxlY3RBbGwgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuaGFzU2VydmVyU2VhcmNoID0gdHlwZW9mIHRoaXMub25TZXJ2ZXJTZWFyY2ggPT09ICdmdW5jdGlvbic7XHJcbiAgICB0aGlzLnNob3dBc1BvcHVwID1cclxuICAgICAgdGhpcy5zaG93RHJvcGJveEFzUG9wdXAgJiZcclxuICAgICAgIXRoaXMua2VlcEFsd2F5c09wZW4gJiZcclxuICAgICAgd2luZG93LmlubmVyV2lkdGggPD0gcGFyc2VGbG9hdCh0aGlzLnBvcHVwRHJvcGJveEJyZWFrcG9pbnQpO1xyXG4gICAgdGhpcy5oYXNTZWFyY2hDb250YWluZXIgPVxyXG4gICAgICB0aGlzLmhhc1NlYXJjaCB8fCAodGhpcy5tdWx0aXBsZSAmJiAhdGhpcy5kaXNhYmxlU2VsZWN0QWxsKTtcclxuICAgIHRoaXMub3B0aW9uc0NvdW50ID0gdGhpcy5nZXRPcHRpb25zQ291bnQob3B0aW9ucy5vcHRpb25zQ291bnQpO1xyXG4gICAgdGhpcy5oYWxmT3B0aW9uc0NvdW50ID0gTWF0aC5jZWlsKHRoaXMub3B0aW9uc0NvdW50IC8gMik7XHJcbiAgICB0aGlzLm9wdGlvbnNIZWlnaHQgPSB0aGlzLmdldE9wdGlvbnNIZWlnaHQoKTtcclxuICB9XHJcblxyXG4gIHNldERlZmF1bHRQcm9wcyhvcHRpb25zKSB7XHJcbiAgICBsZXQgZGVmYXVsdE9wdGlvbnMgPSB7XHJcbiAgICAgIHZhbHVlS2V5OiAndmFsdWUnLFxyXG4gICAgICBsYWJlbEtleTogJ2xhYmVsJyxcclxuICAgICAgZGVzY3JpcHRpb25LZXk6ICdkZXNjcmlwdGlvbicsXHJcbiAgICAgIGFsaWFzS2V5OiAnYWxpYXMnLFxyXG4gICAgICBvcHRpb25zQ291bnQ6IDUsXHJcbiAgICAgIG5vT2ZEaXNwbGF5VmFsdWVzOiA1MCxcclxuICAgICAgb3B0aW9uSGVpZ2h0OiAnNDBweCcsXHJcbiAgICAgIG11bHRpcGxlOiBmYWxzZSxcclxuICAgICAgaGlkZUNsZWFyQnV0dG9uOiBmYWxzZSxcclxuICAgICAgYXV0b1NlbGVjdEZpcnN0T3B0aW9uOiBmYWxzZSxcclxuICAgICAgaGFzT3B0aW9uRGVzY3JpcHRpb246IGZhbHNlLFxyXG4gICAgICBzaWxlbnRJbml0aWFsVmFsdWVTZXQ6IGZhbHNlLFxyXG4gICAgICBkaXNhYmxlU2VsZWN0QWxsOiBmYWxzZSxcclxuICAgICAgbm9PcHRpb25zVGV4dDogJ05vIG9wdGlvbnMgZm91bmQnLFxyXG4gICAgICBub1NlYXJjaFJlc3VsdHNUZXh0OiAnTm8gcmVzdWx0cyBmb3VuZCcsXHJcbiAgICAgIHNlbGVjdEFsbFRleHQ6ICdTZWxlY3QgQWxsJyxcclxuICAgICAgcGxhY2Vob2xkZXI6ICdTZWxlY3QnLFxyXG4gICAgICBwb3NpdGlvbjogJ2F1dG8nLFxyXG4gICAgICB6SW5kZXg6IDEsXHJcbiAgICAgIGFsbG93TmV3T3B0aW9uOiBmYWxzZSxcclxuICAgICAgbWFya1NlYXJjaFJlc3VsdHM6IGZhbHNlLFxyXG4gICAgICB0b29sdGlwRm9udFNpemU6ICcxNHB4JyxcclxuICAgICAgdG9vbHRpcEFsaWdubWVudDogJ2NlbnRlcicsXHJcbiAgICAgIHRvb2x0aXBNYXhXaWR0aDogJzMwMHB4JyxcclxuICAgICAgc2hvd1NlbGVjdGVkT3B0aW9uc0ZpcnN0OiBmYWxzZSxcclxuICAgICAgbmFtZTogJycsXHJcbiAgICAgIGFkZGl0aW9uYWxDbGFzc2VzOiAnJyxcclxuICAgICAga2VlcEFsd2F5c09wZW46IGZhbHNlLFxyXG4gICAgICBtYXhWYWx1ZXM6IDAsXHJcbiAgICAgIHNob3dEcm9wYm94QXNQb3B1cDogdHJ1ZSxcclxuICAgICAgcG9wdXBEcm9wYm94QnJlYWtwb2ludDogJzU3NnB4JyxcclxuICAgIH07XHJcblxyXG4gICAgaWYgKG9wdGlvbnMuaGFzT3B0aW9uRGVzY3JpcHRpb24pIHtcclxuICAgICAgZGVmYXVsdE9wdGlvbnMub3B0aW9uc0NvdW50ID0gNDtcclxuICAgICAgZGVmYXVsdE9wdGlvbnMub3B0aW9uSGVpZ2h0ID0gJzYwcHgnO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKGRlZmF1bHRPcHRpb25zLCBvcHRpb25zKTtcclxuICB9XHJcblxyXG4gIHNldFByb3BzRnJvbUVsZW1lbnRBdHRyKG9wdGlvbnMpIHtcclxuICAgIGxldCAkZWxlID0gb3B0aW9ucy5lbGU7XHJcbiAgICBsZXQgbWFwcGluZyA9IHtcclxuICAgICAgbXVsdGlwbGU6ICdtdWx0aXBsZScsXHJcbiAgICAgIHBsYWNlaG9sZGVyOiAncGxhY2Vob2xkZXInLFxyXG4gICAgICBuYW1lOiAnbmFtZScsXHJcbiAgICAgICdkYXRhLXZhbHVlLWtleSc6ICd2YWx1ZUtleScsXHJcbiAgICAgICdkYXRhLWxhYmVsLWtleSc6ICdsYWJlbEtleScsXHJcbiAgICAgICdkYXRhLWRlc2NyaXB0aW9uLWtleSc6ICdkZXNjcmlwdGlvbktleScsXHJcbiAgICAgICdkYXRhLWFsaWFzLWtleSc6ICdhbGlhc0tleScsXHJcbiAgICAgICdkYXRhLXNlYXJjaCc6ICdzZWFyY2gnLFxyXG4gICAgICAnZGF0YS1oaWRlLWNsZWFyLWJ1dHRvbic6ICdoaWRlQ2xlYXJCdXR0b24nLFxyXG4gICAgICAnZGF0YS1hdXRvLXNlbGVjdC1maXJzdC1vcHRpb24nOiAnYXV0b1NlbGVjdEZpcnN0T3B0aW9uJyxcclxuICAgICAgJ2RhdGEtaGFzLW9wdGlvbi1kZXNjcmlwdGlvbic6ICdoYXNPcHRpb25EZXNjcmlwdGlvbicsXHJcbiAgICAgICdkYXRhLW9wdGlvbnMtY291bnQnOiAnb3B0aW9uc0NvdW50JyxcclxuICAgICAgJ2RhdGEtb3B0aW9uLWhlaWdodCc6ICdvcHRpb25IZWlnaHQnLFxyXG4gICAgICAnZGF0YS1wb3NpdGlvbic6ICdwb3NpdGlvbicsXHJcbiAgICAgICdkYXRhLW5vLW9wdGlvbnMtdGV4dCc6ICdub09wdGlvbnNUZXh0JyxcclxuICAgICAgJ2RhdGEtbm8tc2VhcmNoLXJlc3VsdHMtdGV4dCc6ICdub1NlYXJjaFJlc3VsdHNUZXh0JyxcclxuICAgICAgJ2RhdGEtc2VsZWN0LWFsbC10ZXh0JzogJ3NlbGVjdEFsbFRleHQnLFxyXG4gICAgICAnZGF0YS1zaWxlbnQtaW5pdGlhbC12YWx1ZS1zZXQnOiAnc2lsZW50SW5pdGlhbFZhbHVlU2V0JyxcclxuICAgICAgJ2RhdGEtZHJvcGJveC13aWR0aCc6ICdkcm9wYm94V2lkdGgnLFxyXG4gICAgICAnZGF0YS16LWluZGV4JzogJ3pJbmRleCcsXHJcbiAgICAgICdkYXRhLW5vLW9mLWRpc3BsYXktdmFsdWVzJzogJ25vT2ZEaXNwbGF5VmFsdWVzJyxcclxuICAgICAgJ2RhdGEtYWxsb3ctbmV3LW9wdGlvbic6ICdhbGxvd05ld09wdGlvbicsXHJcbiAgICAgICdkYXRhLW1hcmstc2VhcmNoLXJlc3VsdHMnOiAnbWFya1NlYXJjaFJlc3VsdHMnLFxyXG4gICAgICAnZGF0YS10b29sdGlwLWZvbnQtc2l6ZSc6ICd0b29sdGlwRm9udFNpemUnLFxyXG4gICAgICAnZGF0YS10b29sdGlwLWFsaWdubWVudCc6ICd0b29sdGlwQWxpZ25tZW50JyxcclxuICAgICAgJ2RhdGEtdG9vbHRpcC1tYXgtd2lkdGgnOiAndG9vbHRpcE1heFdpZHRoJyxcclxuICAgICAgJ2RhdGEtc2hvdy1zZWxlY3RlZC1vcHRpb25zLWZpcnN0JzogJ3Nob3dTZWxlY3RlZE9wdGlvbnNGaXJzdCcsXHJcbiAgICAgICdkYXRhLWRpc2FibGUtc2VsZWN0LWFsbCc6ICdkaXNhYmxlU2VsZWN0QWxsJyxcclxuICAgICAgJ2RhdGEta2VlcC1hbHdheXMtb3Blbic6ICdrZWVwQWx3YXlzT3BlbicsXHJcbiAgICAgICdkYXRhLW1heC12YWx1ZXMnOiAnbWF4VmFsdWVzJyxcclxuICAgICAgJ2RhdGEtYWRkaXRpb25hbC1jbGFzc2VzJzogJ2FkZGl0aW9uYWxDbGFzc2VzJyxcclxuICAgICAgJ2RhdGEtc2hvdy1kcm9wYm94LWFzLXBvcHVwJzogJ3Nob3dEcm9wYm94QXNQb3B1cCcsXHJcbiAgICAgICdkYXRhLXBvcHVwLWRyb3Bib3gtYnJlYWtwb2ludCc6ICdwb3B1cERyb3Bib3hCcmVha3BvaW50JyxcclxuICAgIH07XHJcblxyXG4gICAgZm9yIChsZXQgayBpbiBtYXBwaW5nKSB7XHJcbiAgICAgIGxldCB2YWx1ZSA9ICRlbGUuZ2V0QXR0cmlidXRlKGspO1xyXG5cclxuICAgICAgaWYgKGsgPT09ICdtdWx0aXBsZScgJiYgKHZhbHVlID09PSAnJyB8fCB2YWx1ZSA9PT0gJ3RydWUnKSkge1xyXG4gICAgICAgIHZhbHVlID0gdHJ1ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgICAgb3B0aW9uc1ttYXBwaW5nW2tdXSA9IHZhbHVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXRNZXRob2RzKCkge1xyXG4gICAgbGV0ICRlbGUgPSB0aGlzLiRlbGU7XHJcbiAgICAkZWxlLnZpcnR1YWxTZWxlY3QgPSB0aGlzO1xyXG4gICAgJGVsZS52YWx1ZSA9IHRoaXMubXVsdGlwbGUgPyBbXSA6ICcnO1xyXG4gICAgJGVsZS5yZXNldCA9IFZpcnR1YWxTZWxlY3QucmVzZXQ7XHJcbiAgICAkZWxlLnNldFZhbHVlID0gVmlydHVhbFNlbGVjdC5zZXRWYWx1ZU1ldGhvZDtcclxuICAgICRlbGUuc2V0T3B0aW9ucyA9IFZpcnR1YWxTZWxlY3Quc2V0T3B0aW9uc01ldGhvZDtcclxuICAgICRlbGUuc2V0RGlzYWJsZWRPcHRpb25zID0gVmlydHVhbFNlbGVjdC5zZXREaXNhYmxlZE9wdGlvbnNNZXRob2Q7XHJcbiAgICAkZWxlLnRvZ2dsZVNlbGVjdEFsbCA9IFZpcnR1YWxTZWxlY3QudG9nZ2xlU2VsZWN0QWxsO1xyXG4gICAgJGVsZS5pc0FsbFNlbGVjdGVkID0gVmlydHVhbFNlbGVjdC5pc0FsbFNlbGVjdGVkO1xyXG4gICAgJGVsZS5hZGRPcHRpb24gPSBWaXJ0dWFsU2VsZWN0LmFkZE9wdGlvbk1ldGhvZDtcclxuICAgICRlbGUuZ2V0TmV3VmFsdWUgPSBWaXJ0dWFsU2VsZWN0LmdldE5ld1ZhbHVlTWV0aG9kO1xyXG4gICAgJGVsZS5nZXREaXNwbGF5VmFsdWUgPSBWaXJ0dWFsU2VsZWN0LmdldERpc3BsYXlWYWx1ZU1ldGhvZDtcclxuICAgICRlbGUub3BlbiA9IFZpcnR1YWxTZWxlY3Qub3Blbk1ldGhvZDtcclxuICAgICRlbGUuY2xvc2UgPSBWaXJ0dWFsU2VsZWN0LmNsb3NlTWV0aG9kO1xyXG4gIH1cclxuXHJcbiAgc2V0VmFsdWVNZXRob2QodmFsdWUsIHNpbGVudENoYW5nZSkge1xyXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICB2YWx1ZSA9IFt2YWx1ZV07XHJcbiAgICB9XHJcblxyXG4gICAgdmFsdWUgPSB2YWx1ZS5tYXAoKHYpID0+IHtcclxuICAgICAgcmV0dXJuIHYgfHwgdiA9PSAwID8gdi50b1N0cmluZygpIDogJyc7XHJcbiAgICB9KTtcclxuXHJcbiAgICBsZXQgdmFsaWRWYWx1ZXMgPSBbXTtcclxuXHJcbiAgICB0aGlzLm9wdGlvbnMuZm9yRWFjaCgoZCkgPT4ge1xyXG4gICAgICBsZXQgaXNTZWxlY3RlZCA9IHZhbHVlLmluZGV4T2YoZC52YWx1ZSkgIT09IC0xO1xyXG5cclxuICAgICAgaWYgKGlzU2VsZWN0ZWQgJiYgIWQuaXNEaXNhYmxlZCAmJiAhZC5pc0dyb3VwVGl0bGUpIHtcclxuICAgICAgICBkLmlzU2VsZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgIHZhbGlkVmFsdWVzLnB1c2goZC52YWx1ZSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZC5pc1NlbGVjdGVkID0gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGlmICghdGhpcy5tdWx0aXBsZSkge1xyXG4gICAgICB2YWxpZFZhbHVlcyA9IHZhbGlkVmFsdWVzWzBdO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuYmVmb3JlVmFsdWVTZXQoKTtcclxuICAgIHRoaXMuc2V0VmFsdWUodmFsaWRWYWx1ZXMsICFzaWxlbnRDaGFuZ2UpO1xyXG4gICAgdGhpcy5hZnRlclZhbHVlU2V0KCk7XHJcbiAgfVxyXG5cclxuICBzZXRPcHRpb25zTWV0aG9kKG9wdGlvbnMsIGtlZXBWYWx1ZSkge1xyXG4gICAgdGhpcy5zZXRPcHRpb25zKG9wdGlvbnMpO1xyXG4gICAgdGhpcy5hZnRlclNldE9wdGlvbnMoa2VlcFZhbHVlKTtcclxuICB9XHJcblxyXG4gIHNldERpc2FibGVkT3B0aW9uc01ldGhvZChkaXNhYmxlZE9wdGlvbnMpIHtcclxuICAgIHRoaXMuc2V0RGlzYWJsZWRPcHRpb25zKGRpc2FibGVkT3B0aW9ucywgdHJ1ZSk7XHJcbiAgICB0aGlzLnNldFZhbHVlTWV0aG9kKG51bGwpO1xyXG4gICAgdGhpcy5zZXRWaXNpYmxlT3B0aW9ucygpO1xyXG4gIH1cclxuXHJcbiAgc2V0RGlzYWJsZWRPcHRpb25zKGRpc2FibGVkT3B0aW9ucyA9IFtdLCBzZXRPcHRpb25zUHJvcCA9IGZhbHNlKSB7XHJcbiAgICBkaXNhYmxlZE9wdGlvbnMgPSBkaXNhYmxlZE9wdGlvbnMubWFwKChkKSA9PiBkLnRvU3RyaW5nKCkpO1xyXG4gICAgdGhpcy5kaXNhYmxlZE9wdGlvbnMgPSBkaXNhYmxlZE9wdGlvbnM7XHJcblxyXG4gICAgaWYgKHNldE9wdGlvbnNQcm9wICYmIGRpc2FibGVkT3B0aW9ucy5sZW5ndGgpIHtcclxuICAgICAgdGhpcy5vcHRpb25zLmZvckVhY2goKGQpID0+IHtcclxuICAgICAgICBkLmlzRGlzYWJsZWQgPSBkaXNhYmxlZE9wdGlvbnMuaW5kZXhPZihkLnZhbHVlKSAhPT0gLTE7XHJcblxyXG4gICAgICAgIHJldHVybiBkO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNldE9wdGlvbnMob3B0aW9ucykge1xyXG4gICAgaWYgKCFvcHRpb25zKSB7XHJcbiAgICAgIG9wdGlvbnMgPSBbXTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgcHJlcGFyZWRPcHRpb25zID0gW107XHJcbiAgICBsZXQgZGlzYWJsZWRPcHRpb25zID0gdGhpcy5kaXNhYmxlZE9wdGlvbnM7XHJcbiAgICBsZXQgaGFzRGlzYWJsZWRPcHRpb25zID0gZGlzYWJsZWRPcHRpb25zLmxlbmd0aDtcclxuICAgIGxldCB2YWx1ZUtleSA9IHRoaXMudmFsdWVLZXk7XHJcbiAgICBsZXQgbGFiZWxLZXkgPSB0aGlzLmxhYmVsS2V5O1xyXG4gICAgbGV0IGRlc2NyaXB0aW9uS2V5ID0gdGhpcy5kZXNjcmlwdGlvbktleTtcclxuICAgIGxldCBhbGlhc0tleSA9IHRoaXMuYWxpYXNLZXk7XHJcbiAgICBsZXQgaGFzT3B0aW9uRGVzY3JpcHRpb24gPSB0aGlzLmhhc09wdGlvbkRlc2NyaXB0aW9uO1xyXG4gICAgbGV0IGdldFN0cmluZyA9IFV0aWxzLmdldFN0cmluZztcclxuICAgIGxldCBnZXRBbGlhcyA9IHRoaXMuZ2V0QWxpYXM7XHJcbiAgICBsZXQgaW5kZXggPSAwO1xyXG4gICAgbGV0IGhhc09wdGlvbkdyb3VwID0gZmFsc2U7XHJcblxyXG4gICAgbGV0IHByZXBhcmVPcHRpb24gPSAoZCkgPT4ge1xyXG4gICAgICBsZXQgdmFsdWUgPSBnZXRTdHJpbmcoZFt2YWx1ZUtleV0pO1xyXG4gICAgICBsZXQgY2hpbGRPcHRpb25zID0gZC5vcHRpb25zO1xyXG4gICAgICBsZXQgaXNHcm91cFRpdGxlID0gY2hpbGRPcHRpb25zID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICBsZXQgb3B0aW9uID0ge1xyXG4gICAgICAgIGluZGV4LFxyXG4gICAgICAgIHZhbHVlLFxyXG4gICAgICAgIGxhYmVsOiBnZXRTdHJpbmcoZFtsYWJlbEtleV0pLFxyXG4gICAgICAgIGFsaWFzOiBnZXRBbGlhcyhkW2FsaWFzS2V5XSksXHJcbiAgICAgICAgaXNWaXNpYmxlOiB0cnVlLFxyXG4gICAgICAgIGlzR3JvdXBUaXRsZSxcclxuICAgICAgfTtcclxuXHJcbiAgICAgIGlmIChoYXNEaXNhYmxlZE9wdGlvbnMpIHtcclxuICAgICAgICBvcHRpb24uaXNEaXNhYmxlZCA9IGRpc2FibGVkT3B0aW9ucy5pbmRleE9mKHZhbHVlKSAhPT0gLTE7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChkLmlzR3JvdXBPcHRpb24pIHtcclxuICAgICAgICBvcHRpb24uaXNHcm91cE9wdGlvbiA9IHRydWU7XHJcbiAgICAgICAgb3B0aW9uLmdyb3VwSW5kZXggPSBkLmdyb3VwSW5kZXg7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChoYXNPcHRpb25EZXNjcmlwdGlvbikge1xyXG4gICAgICAgIG9wdGlvbi5kZXNjcmlwdGlvbiA9IGdldFN0cmluZyhkW2Rlc2NyaXB0aW9uS2V5XSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHByZXBhcmVkT3B0aW9ucy5wdXNoKG9wdGlvbik7XHJcbiAgICAgIGluZGV4Kys7XHJcblxyXG4gICAgICBpZiAoaXNHcm91cFRpdGxlKSB7XHJcbiAgICAgICAgbGV0IGdyb3VwSW5kZXggPSBvcHRpb24uaW5kZXg7XHJcbiAgICAgICAgaGFzT3B0aW9uR3JvdXAgPSB0cnVlO1xyXG5cclxuICAgICAgICBjaGlsZE9wdGlvbnMuZm9yRWFjaCgoZCkgPT4ge1xyXG4gICAgICAgICAgZC5pc0dyb3VwT3B0aW9uID0gdHJ1ZTtcclxuICAgICAgICAgIGQuZ3JvdXBJbmRleCA9IGdyb3VwSW5kZXg7XHJcblxyXG4gICAgICAgICAgcHJlcGFyZU9wdGlvbihkKTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBvcHRpb25zLmZvckVhY2gocHJlcGFyZU9wdGlvbik7XHJcblxyXG4gICAgdGhpcy5vcHRpb25zID0gcHJlcGFyZWRPcHRpb25zO1xyXG4gICAgdGhpcy52aXNpYmxlT3B0aW9uc0NvdW50ID0gcHJlcGFyZWRPcHRpb25zLmxlbmd0aDtcclxuICAgIHRoaXMubGFzdE9wdGlvbkluZGV4ID0gdGhpcy5vcHRpb25zLmxlbmd0aCAtIDE7XHJcbiAgICB0aGlzLm5ld1ZhbHVlcyA9IFtdO1xyXG4gICAgdGhpcy5oYXNPcHRpb25Hcm91cCA9IGhhc09wdGlvbkdyb3VwO1xyXG4gICAgdGhpcy5zZXRTb3J0ZWRPcHRpb25zKCk7XHJcbiAgfVxyXG5cclxuICBzZXRTZXJ2ZXJPcHRpb25zKG9wdGlvbnMpIHtcclxuICAgIHRoaXMuc2V0T3B0aW9uc01ldGhvZChvcHRpb25zLCB0cnVlKTtcclxuICAgIERvbVV0aWxzLnJlbW92ZUNsYXNzKHRoaXMuJHdyYXBwZXIsICdzZXJ2ZXItc2VhcmNoaW5nJyk7XHJcbiAgfVxyXG5cclxuICBzZXRTb3J0ZWRPcHRpb25zKCkge1xyXG4gICAgbGV0IHNvcnRlZE9wdGlvbnMgPSBbLi4udGhpcy5vcHRpb25zXTtcclxuXHJcbiAgICBpZiAodGhpcy5zaG93U2VsZWN0ZWRPcHRpb25zRmlyc3QgJiYgdGhpcy5zZWxlY3RlZFZhbHVlcy5sZW5ndGgpIHtcclxuICAgICAgaWYgKHRoaXMuaGFzT3B0aW9uR3JvdXApIHtcclxuICAgICAgICBzb3J0ZWRPcHRpb25zID0gdGhpcy5zb3J0T3B0aW9uc0dyb3VwKHNvcnRlZE9wdGlvbnMpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHNvcnRlZE9wdGlvbnMgPSB0aGlzLnNvcnRPcHRpb25zKHNvcnRlZE9wdGlvbnMpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5zb3J0ZWRPcHRpb25zID0gc29ydGVkT3B0aW9ucztcclxuICB9XHJcblxyXG4gIHNldFZpc2libGVPcHRpb25zKCkge1xyXG4gICAgbGV0IHZpc2libGVPcHRpb25zID0gWy4uLnRoaXMuc29ydGVkT3B0aW9uc107XHJcbiAgICBsZXQgbWF4T3B0aW9uc1RvU2hvdyA9IHRoaXMub3B0aW9uc0NvdW50ICogMjtcclxuICAgIGxldCBzdGFydEluZGV4ID0gdGhpcy5nZXRWaXNpYmxlU3RhcnRJbmRleCgpO1xyXG4gICAgbGV0IG5ld09wdGlvbiA9IHRoaXMuZ2V0TmV3T3B0aW9uKCk7XHJcbiAgICBsZXQgZW5kSW5kZXggPSBzdGFydEluZGV4ICsgbWF4T3B0aW9uc1RvU2hvdyAtIDE7XHJcbiAgICBsZXQgaSA9IDA7XHJcblxyXG4gICAgaWYgKG5ld09wdGlvbikge1xyXG4gICAgICBuZXdPcHRpb24udmlzaWJsZUluZGV4ID0gaTtcclxuICAgICAgaSsrO1xyXG4gICAgfVxyXG5cclxuICAgIHZpc2libGVPcHRpb25zID0gdmlzaWJsZU9wdGlvbnMuZmlsdGVyKChkKSA9PiB7XHJcbiAgICAgIGxldCBpblZpZXcgPSBmYWxzZTtcclxuXHJcbiAgICAgIGlmIChkLmlzVmlzaWJsZSAmJiAhZC5pc0N1cnJlbnROZXcpIHtcclxuICAgICAgICBpblZpZXcgPSBpID49IHN0YXJ0SW5kZXggJiYgaSA8PSBlbmRJbmRleDtcclxuICAgICAgICBkLnZpc2libGVJbmRleCA9IGk7XHJcbiAgICAgICAgaSsrO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gaW5WaWV3O1xyXG4gICAgfSk7XHJcblxyXG4gICAgaWYgKG5ld09wdGlvbikge1xyXG4gICAgICB2aXNpYmxlT3B0aW9ucyA9IFtuZXdPcHRpb24sIC4uLnZpc2libGVPcHRpb25zXTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnZpc2libGVPcHRpb25zID0gdmlzaWJsZU9wdGlvbnM7XHJcbiAgICB0aGlzLnJlbmRlck9wdGlvbnMoKTtcclxuICB9XHJcblxyXG4gIHNldE9wdGlvbnNQb3NpdGlvbihzdGFydEluZGV4KSB7XHJcbiAgICBpZiAoc3RhcnRJbmRleCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHN0YXJ0SW5kZXggPSB0aGlzLmdldFZpc2libGVTdGFydEluZGV4KCk7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHRvcCA9IHN0YXJ0SW5kZXggKiB0aGlzLm9wdGlvbkhlaWdodDtcclxuICAgIHRoaXMuJG9wdGlvbnMuc3R5bGUudHJhbnNmb3JtID0gYHRyYW5zbGF0ZTNkKDAsICR7dG9wfXB4LCAwKWA7XHJcbiAgICBEb21VdGlscy5zZXREYXRhKHRoaXMuJG9wdGlvbnMsICd0b3AnLCB0b3ApO1xyXG4gIH1cclxuXHJcbiAgc2V0T3B0aW9uc1Rvb2x0aXAoKSB7XHJcbiAgICBsZXQgdmlzaWJsZU9wdGlvbnMgPSB0aGlzLmdldFZpc2libGVPcHRpb25zKCk7XHJcbiAgICBsZXQgaGFzT3B0aW9uRGVzY3JpcHRpb24gPSB0aGlzLmhhc09wdGlvbkRlc2NyaXB0aW9uO1xyXG5cclxuICAgIHZpc2libGVPcHRpb25zLmZvckVhY2goKGQpID0+IHtcclxuICAgICAgbGV0ICRvcHRpb25FbGUgPSB0aGlzLiRkcm9wYm94Q29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgICAgYC52c2NvbXAtb3B0aW9uW2RhdGEtaW5kZXg9XCIke2QuaW5kZXh9XCJdYFxyXG4gICAgICApO1xyXG5cclxuICAgICAgRG9tVXRpbHMuc2V0RGF0YShcclxuICAgICAgICAkb3B0aW9uRWxlLnF1ZXJ5U2VsZWN0b3IoJy52c2NvbXAtb3B0aW9uLXRleHQnKSxcclxuICAgICAgICAndG9vbHRpcCcsXHJcbiAgICAgICAgZC5sYWJlbFxyXG4gICAgICApO1xyXG5cclxuICAgICAgaWYgKGhhc09wdGlvbkRlc2NyaXB0aW9uKSB7XHJcbiAgICAgICAgRG9tVXRpbHMuc2V0RGF0YShcclxuICAgICAgICAgICRvcHRpb25FbGUucXVlcnlTZWxlY3RvcignLnZzY29tcC1vcHRpb24tZGVzY3JpcHRpb24nKSxcclxuICAgICAgICAgICd0b29sdGlwJyxcclxuICAgICAgICAgIGQuZGVzY3JpcHRpb25cclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHNldFZhbHVlKHZhbHVlLCB0cmlnZ2VyRXZlbnQpIHtcclxuICAgIGlmICghdmFsdWUpIHtcclxuICAgICAgdGhpcy5zZWxlY3RlZFZhbHVlcyA9IFtdO1xyXG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICB0aGlzLnNlbGVjdGVkVmFsdWVzID0gWy4uLnZhbHVlXTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuc2VsZWN0ZWRWYWx1ZXMgPSBbdmFsdWVdO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBuZXdWYWx1ZSA9IHRoaXMubXVsdGlwbGVcclxuICAgICAgPyB0aGlzLnNlbGVjdGVkVmFsdWVzXHJcbiAgICAgIDogdGhpcy5zZWxlY3RlZFZhbHVlc1swXSB8fCAnJztcclxuICAgIHRoaXMuJGVsZS52YWx1ZSA9IG5ld1ZhbHVlO1xyXG4gICAgdGhpcy4kaGlkZGVuSW5wdXQudmFsdWUgPSBuZXdWYWx1ZTtcclxuICAgIHRoaXMuaXNNYXhWYWx1ZXNTZWxlY3RlZCA9XHJcbiAgICAgIHRoaXMubWF4VmFsdWVzICYmIHRoaXMubWF4VmFsdWVzIDw9IHRoaXMuc2VsZWN0ZWRWYWx1ZXMubGVuZ3RoXHJcbiAgICAgICAgPyB0cnVlXHJcbiAgICAgICAgOiBmYWxzZTtcclxuICAgIHRoaXMuc2V0VmFsdWVUZXh0KCk7XHJcbiAgICBEb21VdGlscy50b2dnbGVDbGFzcyhcclxuICAgICAgdGhpcy4kd3JhcHBlcixcclxuICAgICAgJ2hhcy12YWx1ZScsXHJcbiAgICAgIFV0aWxzLmlzTm90RW1wdHkodGhpcy5zZWxlY3RlZFZhbHVlcylcclxuICAgICk7XHJcbiAgICBEb21VdGlscy50b2dnbGVDbGFzcyhcclxuICAgICAgdGhpcy4kd3JhcHBlcixcclxuICAgICAgJ21heC12YWx1ZS1zZWxlY3RlZCcsXHJcbiAgICAgIHRoaXMuaXNNYXhWYWx1ZXNTZWxlY3RlZFxyXG4gICAgKTtcclxuXHJcbiAgICBpZiAodHJpZ2dlckV2ZW50KSB7XHJcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCh0aGlzLiRlbGUsICdjaGFuZ2UnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNldFZhbHVlVGV4dCgpIHtcclxuICAgIGxldCB2YWx1ZVRleHQgPSBbXTtcclxuICAgIGxldCB2YWx1ZVRvb2x0aXAgPSBbXTtcclxuICAgIGxldCBzZWxlY3RlZFZhbHVlcyA9IHRoaXMuc2VsZWN0ZWRWYWx1ZXM7XHJcbiAgICBsZXQgc2VsZWN0ZWRMZW5ndGggPSBzZWxlY3RlZFZhbHVlcy5sZW5ndGg7XHJcbiAgICBsZXQgbm9PZkRpc3BsYXlWYWx1ZXMgPSB0aGlzLm5vT2ZEaXNwbGF5VmFsdWVzO1xyXG4gICAgbGV0IG1heGltdW1WYWx1ZXNUb1Nob3cgPSA1MDtcclxuICAgIGxldCBzZWxlY3RlZFZhbHVlc0NvdW50ID0gMDtcclxuXHJcbiAgICBpZiAodGhpcy5pc0FsbFNlbGVjdGVkKSB7XHJcbiAgICAgIHRoaXMuJHZhbHVlVGV4dC5pbm5lckhUTUwgPSBgQWxsICgke3NlbGVjdGVkTGVuZ3RofSlgO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZm9yIChsZXQgZCBvZiB0aGlzLm9wdGlvbnMpIHtcclxuICAgICAgICBpZiAoZC5pc0N1cnJlbnROZXcpIHtcclxuICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHNlbGVjdGVkVmFsdWVzQ291bnQgPiBtYXhpbXVtVmFsdWVzVG9TaG93KSB7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCB2YWx1ZSA9IGQudmFsdWU7XHJcblxyXG4gICAgICAgIGlmIChzZWxlY3RlZFZhbHVlcy5pbmRleE9mKHZhbHVlKSAhPT0gLTEpIHtcclxuICAgICAgICAgIGxldCBsYWJlbCA9IGQubGFiZWw7XHJcbiAgICAgICAgICB2YWx1ZVRleHQucHVzaChsYWJlbCk7XHJcbiAgICAgICAgICBzZWxlY3RlZFZhbHVlc0NvdW50Kys7XHJcblxyXG4gICAgICAgICAgaWYgKHNlbGVjdGVkVmFsdWVzQ291bnQgPD0gbm9PZkRpc3BsYXlWYWx1ZXMpIHtcclxuICAgICAgICAgICAgdmFsdWVUb29sdGlwLnB1c2goYDxzcGFuIGNsYXNzPVwidnNjb21wLXZhbHVlLXRhZ1wiPiR7bGFiZWx9PC9zcGFuPmApO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IG1vcmVTZWxlY3RlZE9wdGlvbnMgPSBzZWxlY3RlZExlbmd0aCAtIG5vT2ZEaXNwbGF5VmFsdWVzO1xyXG5cclxuICAgICAgaWYgKG1vcmVTZWxlY3RlZE9wdGlvbnMgPiAwKSB7XHJcbiAgICAgICAgdmFsdWVUb29sdGlwLnB1c2goXHJcbiAgICAgICAgICBgPHNwYW4gY2xhc3M9XCJ2c2NvbXAtdmFsdWUtdGFnIG1vcmUtdmFsdWUtY291bnRcIj4rICR7bW9yZVNlbGVjdGVkT3B0aW9uc30gbW9yZS4uLjwvc3Bhbj5gXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgYWdncmVnYXRlZFZhbHVlVGV4dCA9IHZhbHVlVGV4dC5qb2luKCcsICcpO1xyXG5cclxuICAgICAgaWYgKGFnZ3JlZ2F0ZWRWYWx1ZVRleHQgPT09ICcnKSB7XHJcbiAgICAgICAgdGhpcy4kdmFsdWVUZXh0LmlubmVySFRNTCA9IHRoaXMucGxhY2Vob2xkZXI7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy4kdmFsdWVUZXh0LmlubmVySFRNTCA9IGFnZ3JlZ2F0ZWRWYWx1ZVRleHQ7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm11bHRpcGxlKSB7XHJcbiAgICAgICAgICBsZXQgbWF4VmFsdWVzID0gdGhpcy5tYXhWYWx1ZXM7XHJcblxyXG4gICAgICAgICAgaWYgKERvbVV0aWxzLmhhc0VsbGlwc2lzKHRoaXMuJHZhbHVlVGV4dCkgfHwgbWF4VmFsdWVzKSB7XHJcbiAgICAgICAgICAgIGxldCBjb3VudFRleHQgPSBgJHtzZWxlY3RlZExlbmd0aH1gO1xyXG5cclxuICAgICAgICAgICAgaWYgKG1heFZhbHVlcykge1xyXG4gICAgICAgICAgICAgIGNvdW50VGV4dCArPSBgIC8gJHttYXhWYWx1ZXN9YDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLyoqIHJlcGxhY2UgY29tbWEgZGVsaW1pdHRlZCBsaXN0IG9mIHNlbGVjdGlvbnMgd2l0aCBzaG9ydGVyIHRleHQgaW5kaWNhdGluZyBzZWxlY3Rpb24gY291bnQgKi9cclxuICAgICAgICAgICAgdGhpcy4kdmFsdWVUZXh0LmlubmVySFRNTCA9IGAke2NvdW50VGV4dH0gb3B0aW9uJHtcclxuICAgICAgICAgICAgICBzZWxlY3RlZExlbmd0aCA9PT0gMSA/ICcnIDogJ3MnXHJcbiAgICAgICAgICAgIH0gc2VsZWN0ZWRgO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLyoqIHJlbW92aW5nIHRvb2x0aXAgaWYgZnVsbCB2YWx1ZSB0ZXh0IGlzIHZpc2libGUgKi9cclxuICAgICAgICAgICAgdmFsdWVUb29sdGlwID0gW107XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgRG9tVXRpbHMuc2V0RGF0YSh0aGlzLiR2YWx1ZVRleHQsICd0b29sdGlwJywgdmFsdWVUb29sdGlwLmpvaW4oJywgJykpO1xyXG4gIH1cclxuXHJcbiAgc2V0U2VhcmNoVmFsdWUodmFsdWUsIHNraXBJbnB1dFNldCkge1xyXG4gICAgaWYgKHZhbHVlID09PSB0aGlzLnNlYXJjaFZhbHVlT3JpZ2luYWwpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghc2tpcElucHV0U2V0KSB7XHJcbiAgICAgIHRoaXMuJHNlYXJjaElucHV0LnZhbHVlID0gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHNlYXJjaFZhbHVlID0gdmFsdWUudG9Mb3dlckNhc2UoKS50cmltKCk7XHJcbiAgICB0aGlzLnNlYXJjaFZhbHVlID0gc2VhcmNoVmFsdWU7XHJcbiAgICB0aGlzLnNlYXJjaFZhbHVlT3JpZ2luYWwgPSB2YWx1ZTtcclxuXHJcbiAgICBEb21VdGlscy50b2dnbGVDbGFzcyh0aGlzLiR3cmFwcGVyLCAnaGFzLXNlYXJjaC12YWx1ZScsIHZhbHVlKTtcclxuXHJcbiAgICBpZiAodGhpcy5oYXNTZXJ2ZXJTZWFyY2gpIHtcclxuICAgICAgdGhpcy5zZXJ2ZXJTZWFyY2goc2VhcmNoVmFsdWUpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHZpc2libGVPcHRpb25zQ291bnQgPSAwO1xyXG4gICAgbGV0IGhhc0V4YWN0T3B0aW9uID0gZmFsc2U7XHJcbiAgICBsZXQgdmlzaWJsZU9wdGlvbkdyb3Vwc01hcHBpbmc7XHJcbiAgICBsZXQgaXNPcHRpb25WaXNpYmxlID0gdGhpcy5pc09wdGlvblZpc2libGU7XHJcblxyXG4gICAgaWYgKHRoaXMuaGFzT3B0aW9uR3JvdXApIHtcclxuICAgICAgdmlzaWJsZU9wdGlvbkdyb3Vwc01hcHBpbmcgPSB0aGlzLmdldFZpc2libGVPcHRpb25Hcm91cHNNYXBwaW5nKFxyXG4gICAgICAgIHNlYXJjaFZhbHVlXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5vcHRpb25zLmZvckVhY2goKGQpID0+IHtcclxuICAgICAgaWYgKGQuaXNDdXJyZW50TmV3KSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBsZXQgcmVzdWx0ID0gaXNPcHRpb25WaXNpYmxlKFxyXG4gICAgICAgIGQsXHJcbiAgICAgICAgc2VhcmNoVmFsdWUsXHJcbiAgICAgICAgaGFzRXhhY3RPcHRpb24sXHJcbiAgICAgICAgdmlzaWJsZU9wdGlvbkdyb3Vwc01hcHBpbmdcclxuICAgICAgKTtcclxuXHJcbiAgICAgIGlmIChyZXN1bHQuaXNWaXNpYmxlKSB7XHJcbiAgICAgICAgdmlzaWJsZU9wdGlvbnNDb3VudCsrO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIWhhc0V4YWN0T3B0aW9uKSB7XHJcbiAgICAgICAgaGFzRXhhY3RPcHRpb24gPSByZXN1bHQuaGFzRXhhY3RPcHRpb247XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGlmICh0aGlzLmFsbG93TmV3T3B0aW9uKSB7XHJcbiAgICAgIGlmIChzZWFyY2hWYWx1ZSAmJiAhaGFzRXhhY3RPcHRpb24pIHtcclxuICAgICAgICB0aGlzLnNldE5ld09wdGlvbigpO1xyXG4gICAgICAgIHZpc2libGVPcHRpb25zQ291bnQrKztcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB0aGlzLnJlbW92ZU5ld09wdGlvbigpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy52aXNpYmxlT3B0aW9uc0NvdW50ID0gdmlzaWJsZU9wdGlvbnNDb3VudDtcclxuXHJcbiAgICB0aGlzLnNjcm9sbFRvVG9wKCk7XHJcbiAgICB0aGlzLnNldE9wdGlvbnNIZWlnaHQoKTtcclxuICAgIHRoaXMuc2V0VmlzaWJsZU9wdGlvbnMoKTtcclxuICB9XHJcblxyXG4gIHNldE9wdGlvblByb3AoaW5kZXgsIGtleSwgdmFsdWUpIHtcclxuICAgIGlmICghdGhpcy5vcHRpb25zW2luZGV4XSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5vcHRpb25zW2luZGV4XVtrZXldID0gdmFsdWU7XHJcbiAgfVxyXG5cclxuICBzZXRPcHRpb25zSGVpZ2h0KCkge1xyXG4gICAgdGhpcy4kb3B0aW9uc0xpc3Quc3R5bGUuaGVpZ2h0ID1cclxuICAgICAgdGhpcy5vcHRpb25IZWlnaHQgKiB0aGlzLnZpc2libGVPcHRpb25zQ291bnQgKyAncHgnO1xyXG4gIH1cclxuXHJcbiAgc2V0T3B0aW9uc0NvbnRhaW5lckhlaWdodChyZXNldCkge1xyXG4gICAgbGV0IG9wdGlvbnNIZWlnaHQ7XHJcblxyXG4gICAgaWYgKHJlc2V0KSB7XHJcbiAgICAgIGlmICh0aGlzLnNob3dBc1BvcHVwKSB7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zQ291bnQgPSB0aGlzLmdldE9wdGlvbnNDb3VudCgpO1xyXG4gICAgICAgIG9wdGlvbnNIZWlnaHQgPSB0aGlzLmdldE9wdGlvbnNIZWlnaHQoKTtcclxuICAgICAgICB0aGlzLm9wdGlvbnNIZWlnaHQgPSBvcHRpb25zSGVpZ2h0O1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBvcHRpb25zSGVpZ2h0ID0gdGhpcy5vcHRpb25zSGVpZ2h0O1xyXG5cclxuICAgICAgaWYgKHRoaXMua2VlcEFsd2F5c09wZW4pIHtcclxuICAgICAgICBEb21VdGlscy5zZXRTdHlsZSh0aGlzLiRub09wdGlvbnMsICdoZWlnaHQnLCBvcHRpb25zSGVpZ2h0KTtcclxuICAgICAgICBEb21VdGlscy5zZXRTdHlsZSh0aGlzLiRub1NlYXJjaFJlc3VsdHMsICdoZWlnaHQnLCBvcHRpb25zSGVpZ2h0KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIERvbVV0aWxzLnNldFN0eWxlKHRoaXMuJG9wdGlvbnNDb250YWluZXIsICdtYXgtaGVpZ2h0Jywgb3B0aW9uc0hlaWdodCk7XHJcblxyXG4gICAgdGhpcy5hZnRlclNldE9wdGlvbnNDb250YWluZXJIZWlnaHQocmVzZXQpO1xyXG4gIH1cclxuXHJcbiAgc2V0RHJvcGJveFBvc2l0aW9uKCkge1xyXG4gICAgaWYgKHRoaXMucG9zaXRpb24gIT09ICdhdXRvJykge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IG1vcmVWaXNpYmxlU2lkZXMgPSBEb21VdGlscy5nZXRNb3JlVmlzaWJsZVNpZGVzKHRoaXMuJHdyYXBwZXIpO1xyXG4gICAgbGV0IHNob3dPbkxlZnQgPSBmYWxzZTtcclxuXHJcbiAgICAvKiogY2hlY2sgdGhhdCBpcyBkcm9wYm94IGhpZGRlbiBvbiByaWdodCBlZGdlIC0gb25seSBpZiBjdXN0b20gd2lkdGggZ2l2ZW4gKi9cclxuICAgIGlmICh0aGlzLmRyb3Bib3hXaWR0aCkge1xyXG4gICAgICBsZXQgYnV0dG9uQ29vcmRzID0gdGhpcy4kdG9nZ2xlQnV0dG9uLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICBsZXQgdmlld3BvcnRXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xyXG4gICAgICBsZXQgZHJvcGJveFdpZHRoID0gcGFyc2VGbG9hdCh0aGlzLmRyb3Bib3hXaWR0aCk7XHJcbiAgICAgIGxldCBoaWRkZW5PblJpZ2h0ID0gYnV0dG9uQ29vcmRzLmxlZnQgKyBkcm9wYm94V2lkdGggPiB2aWV3cG9ydFdpZHRoO1xyXG4gICAgICBsZXQgaGlkZGVuT25MZWZ0ID0gZHJvcGJveFdpZHRoID4gYnV0dG9uQ29vcmRzLnJpZ2h0O1xyXG5cclxuICAgICAgaWYgKGhpZGRlbk9uUmlnaHQgJiYgIWhpZGRlbk9uTGVmdCkge1xyXG4gICAgICAgIHNob3dPbkxlZnQgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgRG9tVXRpbHMudG9nZ2xlQ2xhc3MoXHJcbiAgICAgIHRoaXMuJHdyYXBwZXIsXHJcbiAgICAgICdwb3NpdGlvbi10b3AnLFxyXG4gICAgICBtb3JlVmlzaWJsZVNpZGVzLnZlcnRpY2FsID09PSAndG9wJ1xyXG4gICAgKTtcclxuICAgIERvbVV0aWxzLnRvZ2dsZUNsYXNzKHRoaXMuJHdyYXBwZXIsICdwb3NpdGlvbi1sZWZ0Jywgc2hvd09uTGVmdCk7XHJcbiAgfVxyXG5cclxuICBzZXROZXdPcHRpb24oKSB7XHJcbiAgICBsZXQgdmFsdWUgPSB0aGlzLnNlYXJjaFZhbHVlT3JpZ2luYWwudHJpbSgpO1xyXG5cclxuICAgIGlmICghdmFsdWUpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBuZXdPcHRpb24gPSB0aGlzLmdldE5ld09wdGlvbigpO1xyXG5cclxuICAgIGlmIChuZXdPcHRpb24pIHtcclxuICAgICAgbGV0IG5ld0luZGV4ID0gbmV3T3B0aW9uLmluZGV4O1xyXG5cclxuICAgICAgdGhpcy5zZXRPcHRpb25Qcm9wKG5ld0luZGV4LCAndmFsdWUnLCB2YWx1ZSk7XHJcbiAgICAgIHRoaXMuc2V0T3B0aW9uUHJvcChuZXdJbmRleCwgJ2xhYmVsJywgdmFsdWUpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbGV0IGRhdGEgPSB7XHJcbiAgICAgICAgdmFsdWUsXHJcbiAgICAgICAgbGFiZWw6IHZhbHVlLFxyXG4gICAgICAgIGlzQ3VycmVudE5ldzogdHJ1ZSxcclxuICAgICAgfTtcclxuXHJcbiAgICAgIHRoaXMuYWRkT3B0aW9uKGRhdGEpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2V0U2VsZWN0ZWRQcm9wKCkge1xyXG4gICAgbGV0IHNlbGVjdGVkVmFsdWVzID0gdGhpcy5zZWxlY3RlZFZhbHVlcztcclxuXHJcbiAgICB0aGlzLm9wdGlvbnMuZm9yRWFjaCgoZCkgPT4ge1xyXG4gICAgICBpZiAoc2VsZWN0ZWRWYWx1ZXMuaW5kZXhPZihkLnZhbHVlKSAhPT0gLTEpIHtcclxuICAgICAgICBkLmlzU2VsZWN0ZWQgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcbiAgLyoqIHNldCBtZXRob2RzIC0gZW5kICovXHJcblxyXG4gIC8qKiBnZXQgbWV0aG9kcyAtIHN0YXJ0ICovXHJcbiAgZ2V0VmlzaWJsZU9wdGlvbnMoKSB7XHJcbiAgICByZXR1cm4gdGhpcy52aXNpYmxlT3B0aW9ucyB8fCBbXTtcclxuICB9XHJcblxyXG4gIGdldFZhbHVlKCkge1xyXG4gICAgcmV0dXJuIHRoaXMubXVsdGlwbGUgPyB0aGlzLnNlbGVjdGVkVmFsdWVzIDogdGhpcy5zZWxlY3RlZFZhbHVlc1swXTtcclxuICB9XHJcblxyXG4gIGdldEZpcnN0VmlzaWJsZU9wdGlvbkluZGV4KCkge1xyXG4gICAgcmV0dXJuIE1hdGguY2VpbCh0aGlzLiRvcHRpb25zQ29udGFpbmVyLnNjcm9sbFRvcCAvIHRoaXMub3B0aW9uSGVpZ2h0KTtcclxuICB9XHJcblxyXG4gIGdldFZpc2libGVTdGFydEluZGV4KCkge1xyXG4gICAgbGV0IGZpcnN0VmlzaWJsZU9wdGlvbkluZGV4ID0gdGhpcy5nZXRGaXJzdFZpc2libGVPcHRpb25JbmRleCgpO1xyXG4gICAgbGV0IHN0YXJ0SW5kZXggPSBmaXJzdFZpc2libGVPcHRpb25JbmRleCAtIHRoaXMuaGFsZk9wdGlvbnNDb3VudDtcclxuXHJcbiAgICBpZiAoc3RhcnRJbmRleCA8IDApIHtcclxuICAgICAgc3RhcnRJbmRleCA9IDA7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHN0YXJ0SW5kZXg7XHJcbiAgfVxyXG5cclxuICBnZXRUb29sdGlwQXR0clRleHQodGV4dCwgZWxsaXBzaXNPbmx5ID0gZmFsc2UsIGFsbG93SHRtbCA9IGZhbHNlKSB7XHJcbiAgICBsZXQgZGF0YSA9IHtcclxuICAgICAgJ2RhdGEtdG9vbHRpcCc6IHRleHQgfHwgJycsXHJcbiAgICAgICdkYXRhLXRvb2x0aXAtZW50ZXItZGVsYXknOiB0aGlzLnRvb2x0aXBFbnRlckRlbGF5LFxyXG4gICAgICAnZGF0YS10b29sdGlwLXotaW5kZXgnOiB0aGlzLnpJbmRleCxcclxuICAgICAgJ2RhdGEtdG9vbHRpcC1mb250LXNpemUnOiB0aGlzLnRvb2x0aXBGb250U2l6ZSxcclxuICAgICAgJ2RhdGEtdG9vbHRpcC1hbGlnbm1lbnQnOiB0aGlzLnRvb2x0aXBBbGlnbm1lbnQsXHJcbiAgICAgICdkYXRhLXRvb2x0aXAtbWF4LXdpZHRoJzogdGhpcy50b29sdGlwTWF4V2lkdGgsXHJcbiAgICAgICdkYXRhLXRvb2x0aXAtZWxsaXBzaXMtb25seSc6IGVsbGlwc2lzT25seSxcclxuICAgICAgJ2RhdGEtdG9vbHRpcC1hbGxvdy1odG1sJzogYWxsb3dIdG1sLFxyXG4gICAgfTtcclxuXHJcbiAgICByZXR1cm4gRG9tVXRpbHMuZ2V0QXR0cmlidXRlc1RleHQoZGF0YSk7XHJcbiAgfVxyXG5cclxuICBnZXRPcHRpb25PYmooZGF0YSkge1xyXG4gICAgaWYgKCFkYXRhKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgZ2V0U3RyaW5nID0gVXRpbHMuZ2V0U3RyaW5nO1xyXG4gICAgbGV0IG5ld09wdGlvbiA9IHtcclxuICAgICAgaW5kZXg6IGRhdGEuaW5kZXgsXHJcbiAgICAgIHZhbHVlOiBnZXRTdHJpbmcoZGF0YS52YWx1ZSksXHJcbiAgICAgIGxhYmVsOiBnZXRTdHJpbmcoZGF0YS5sYWJlbCksXHJcbiAgICAgIGRlc2NyaXB0aW9uOiBnZXRTdHJpbmcoZGF0YS5kZXNjcmlwdGlvbiksXHJcbiAgICAgIGFsaWFzOiB0aGlzLmdldEFsaWFzKGRhdGEuYWxpYXMpLFxyXG4gICAgICBpc0N1cnJlbnROZXc6IGRhdGEuaXNDdXJyZW50TmV3IHx8IGZhbHNlLFxyXG4gICAgICBpc1Zpc2libGU6IHRydWUsXHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBuZXdPcHRpb247XHJcbiAgfVxyXG5cclxuICBnZXROZXdPcHRpb24oKSB7XHJcbiAgICBsZXQgbGFzdE9wdGlvbiA9IHRoaXMub3B0aW9uc1t0aGlzLmxhc3RPcHRpb25JbmRleF07XHJcblxyXG4gICAgaWYgKCFsYXN0T3B0aW9uIHx8ICFsYXN0T3B0aW9uLmlzQ3VycmVudE5ldykge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGxhc3RPcHRpb247XHJcbiAgfVxyXG5cclxuICBnZXRPcHRpb25JbmRleCh2YWx1ZSkge1xyXG4gICAgbGV0IGluZGV4O1xyXG5cclxuICAgIGlmICh2YWx1ZSkge1xyXG4gICAgICB0aGlzLm9wdGlvbnMuc29tZSgoZCkgPT4ge1xyXG4gICAgICAgIGlmIChkLnZhbHVlID09IHZhbHVlKSB7XHJcbiAgICAgICAgICBpbmRleCA9IGQuaW5kZXg7XHJcblxyXG4gICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gaW5kZXg7XHJcbiAgfVxyXG5cclxuICBnZXROZXdWYWx1ZSgpIHtcclxuICAgIGxldCBuZXdWYWx1ZXMgPSB0aGlzLm5ld1ZhbHVlcztcclxuICAgIGxldCByZXN1bHQgPSB0aGlzLnNlbGVjdGVkVmFsdWVzLmZpbHRlcigoZCkgPT4gbmV3VmFsdWVzLmluZGV4T2YoZCkgIT09IC0xKTtcclxuXHJcbiAgICByZXR1cm4gdGhpcy5tdWx0aXBsZSA/IHJlc3VsdCA6IHJlc3VsdFswXTtcclxuICB9XHJcblxyXG4gIGdldEFsaWFzKGFsaWFzKSB7XHJcbiAgICBpZiAoYWxpYXMpIHtcclxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYWxpYXMpKSB7XHJcbiAgICAgICAgYWxpYXMgPSBhbGlhcy5qb2luKCcsJyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgYWxpYXMgPSBhbGlhcy50b1N0cmluZygpLnRyaW0oKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgYWxpYXMgPSBhbGlhcy50b0xvd2VyQ2FzZSgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgYWxpYXMgPSAnJztcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gYWxpYXM7XHJcbiAgfVxyXG5cclxuICBnZXREaXNwbGF5VmFsdWUoKSB7XHJcbiAgICBsZXQgZGlzcGxheVZhbHVlcyA9IFtdO1xyXG4gICAgbGV0IHNlbGVjdGVkVmFsdWVzID0gdGhpcy5zZWxlY3RlZFZhbHVlcztcclxuXHJcbiAgICBmb3IgKGxldCBkIG9mIHRoaXMub3B0aW9ucykge1xyXG4gICAgICBpZiAoc2VsZWN0ZWRWYWx1ZXMuaW5kZXhPZihkLnZhbHVlKSAhPT0gLTEpIHtcclxuICAgICAgICBkaXNwbGF5VmFsdWVzLnB1c2goZC5sYWJlbCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gdGhpcy5tdWx0aXBsZSA/IGRpc3BsYXlWYWx1ZXMgOiBkaXNwbGF5VmFsdWVzWzBdIHx8ICcnO1xyXG4gIH1cclxuXHJcbiAgZ2V0VmlzaWJsZU9wdGlvbkdyb3Vwc01hcHBpbmcoc2VhcmNoVmFsdWUpIHtcclxuICAgIGxldCBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xyXG4gICAgbGV0IHJlc3VsdCA9IHt9O1xyXG4gICAgbGV0IGlzT3B0aW9uVmlzaWJsZSA9IHRoaXMuaXNPcHRpb25WaXNpYmxlO1xyXG4gICAgb3B0aW9ucyA9IHRoaXMuc3RydWN0dXJlT3B0aW9uR3JvdXAob3B0aW9ucyk7XHJcblxyXG4gICAgb3B0aW9ucy5mb3JFYWNoKChkKSA9PiB7XHJcbiAgICAgIHJlc3VsdFtkLmluZGV4XSA9IGQub3B0aW9ucy5zb21lKFxyXG4gICAgICAgIChlKSA9PiBpc09wdGlvblZpc2libGUoZSwgc2VhcmNoVmFsdWUpLmlzVmlzaWJsZVxyXG4gICAgICApO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIGdldE9wdGlvbnNDb3VudChjb3VudCkge1xyXG4gICAgaWYgKHRoaXMuc2hvd0FzUG9wdXApIHtcclxuICAgICAgbGV0IGF2YWlsYWJsZUhlaWdodCA9XHJcbiAgICAgICAgKHdpbmRvdy5pbm5lckhlaWdodCAqIDgwKSAvIDEwMCAtIGRyb3Bib3hDbG9zZUJ1dHRvbkZ1bGxIZWlnaHQ7XHJcblxyXG4gICAgICBpZiAodGhpcy5oYXNTZWFyY2hDb250YWluZXIpIHtcclxuICAgICAgICBhdmFpbGFibGVIZWlnaHQgLT0gc2VhcmNoSGVpZ2h0O1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb3VudCA9IE1hdGguZmxvb3IoYXZhaWxhYmxlSGVpZ2h0IC8gdGhpcy5vcHRpb25IZWlnaHQpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY291bnQgPSBwYXJzZUludChjb3VudCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGNvdW50O1xyXG4gIH1cclxuXHJcbiAgZ2V0T3B0aW9uc0hlaWdodCgpIHtcclxuICAgIHJldHVybiB0aGlzLm9wdGlvbnNDb3VudCAqIHRoaXMub3B0aW9uSGVpZ2h0ICsgJ3B4JztcclxuICB9XHJcblxyXG4gIGdldFNpYmxpbmcoJGVsZSwgZGlyZWN0aW9uKSB7XHJcbiAgICBsZXQgcHJvcE5hbWUgPVxyXG4gICAgICBkaXJlY3Rpb24gPT09ICduZXh0JyA/ICduZXh0RWxlbWVudFNpYmxpbmcnIDogJ3ByZXZpb3VzRWxlbWVudFNpYmxpbmcnO1xyXG5cclxuICAgIGRvIHtcclxuICAgICAgaWYgKCRlbGUpIHtcclxuICAgICAgICAkZWxlID0gJGVsZVtwcm9wTmFtZV07XHJcbiAgICAgIH1cclxuICAgIH0gd2hpbGUgKFxyXG4gICAgICBEb21VdGlscy5oYXNDbGFzcygkZWxlLCAnZGlzYWJsZWQnKSB8fFxyXG4gICAgICBEb21VdGlscy5oYXNDbGFzcygkZWxlLCAnZ3JvdXAtdGl0bGUnKVxyXG4gICAgKTtcclxuXHJcbiAgICByZXR1cm4gJGVsZTtcclxuICB9XHJcbiAgLyoqIGdldCBtZXRob2RzIC0gZW5kICovXHJcblxyXG4gIG9wZW5Ecm9wYm94KGlzU2lsZW50KSB7XHJcbiAgICB0aGlzLnNldERyb3Bib3hQb3NpdGlvbigpO1xyXG4gICAgRG9tVXRpbHMucmVtb3ZlQ2xhc3ModGhpcy4kd3JhcHBlciwgJ2Nsb3NlZCcpO1xyXG5cclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICBEb21VdGlscy5hZGRDbGFzcyh0aGlzLiR3cmFwcGVyLCAnb3BlbmVkJyk7XHJcblxyXG4gICAgICBpZiAoIWlzU2lsZW50KSB7XHJcbiAgICAgICAgdGhpcy5tb3ZlU2VsZWN0ZWRPcHRpb25zRmlyc3QoKTtcclxuICAgICAgICBEb21VdGlscy5hZGRDbGFzcyh0aGlzLiR3cmFwcGVyLCAnZm9jdXNlZCcpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5zaG93QXNQb3B1cCkge1xyXG4gICAgICAgICAgRG9tVXRpbHMuYWRkQ2xhc3ModGhpcy4kYm9keSwgJ3ZzY29tcC1wb3B1cC1hY3RpdmUnKTtcclxuICAgICAgICAgIHRoaXMuaXNQb3B1cEFjdGl2ZSA9IHRydWU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMuZm9jdXNTZWFyY2hJbnB1dCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSwgMCk7XHJcbiAgfVxyXG5cclxuICBjbG9zZURyb3Bib3goaXNTaWxlbnQpIHtcclxuICAgIGlmICh0aGlzLmtlZXBBbHdheXNPcGVuKSB7XHJcbiAgICAgIHRoaXMucmVtb3ZlT3B0aW9uRm9jdXMoKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCB0cmFuc2l0aW9uRHVyYXRpb24gPSBpc1NpbGVudCA/IDAgOiB0aGlzLnRyYW5zaXRpb25EdXJhdGlvbjtcclxuXHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgRG9tVXRpbHMucmVtb3ZlQ2xhc3ModGhpcy4kd3JhcHBlciwgJ29wZW5lZCBmb2N1c2VkJyk7XHJcbiAgICAgIHRoaXMucmVtb3ZlT3B0aW9uRm9jdXMoKTtcclxuXHJcbiAgICAgIGlmICghaXNTaWxlbnQpIHtcclxuICAgICAgICBpZiAodGhpcy5pc1BvcHVwQWN0aXZlKSB7XHJcbiAgICAgICAgICBEb21VdGlscy5yZW1vdmVDbGFzcyh0aGlzLiRib2R5LCAndnNjb21wLXBvcHVwLWFjdGl2ZScpO1xyXG4gICAgICAgICAgdGhpcy5pc1BvcHVwQWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9LCAwKTtcclxuXHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgRG9tVXRpbHMuYWRkQ2xhc3ModGhpcy4kd3JhcHBlciwgJ2Nsb3NlZCcpO1xyXG4gICAgfSwgdHJhbnNpdGlvbkR1cmF0aW9uKTtcclxuICB9XHJcblxyXG4gIG1vdmVTZWxlY3RlZE9wdGlvbnNGaXJzdCgpIHtcclxuICAgIGlmICghdGhpcy5zaG93U2VsZWN0ZWRPcHRpb25zRmlyc3QpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuc2V0U29ydGVkT3B0aW9ucygpO1xyXG5cclxuICAgIGlmICghdGhpcy4kb3B0aW9uc0NvbnRhaW5lci5zY3JvbGxUb3AgfHwgIXRoaXMuc2VsZWN0ZWRWYWx1ZXMubGVuZ3RoKSB7XHJcbiAgICAgIHRoaXMuc2V0VmlzaWJsZU9wdGlvbnMoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuc2Nyb2xsVG9Ub3AoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHRvZ2dsZURyb3Bib3goKSB7XHJcbiAgICBpZiAodGhpcy5pc09wZW5lZCgpKSB7XHJcbiAgICAgIHRoaXMuY2xvc2VEcm9wYm94KCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLm9wZW5Ecm9wYm94KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpc09wZW5lZCgpIHtcclxuICAgIHJldHVybiBEb21VdGlscy5oYXNDbGFzcyh0aGlzLiR3cmFwcGVyLCAnb3BlbmVkJyk7XHJcbiAgfVxyXG5cclxuICBmb2N1c1NlYXJjaElucHV0KCkge1xyXG4gICAgbGV0ICRlbGUgPSB0aGlzLiRzZWFyY2hJbnB1dDtcclxuXHJcbiAgICBpZiAoJGVsZSkge1xyXG4gICAgICAkZWxlLmZvY3VzKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmb2N1c09wdGlvbihkaXJlY3Rpb24sIGVsZSkge1xyXG4gICAgbGV0ICRmb2N1c2VkRWxlID0gdGhpcy4kZHJvcGJveENvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAnLnZzY29tcC1vcHRpb24uZm9jdXNlZCdcclxuICAgICk7XHJcbiAgICBsZXQgJG5ld0ZvY3VzZWRFbGU7XHJcblxyXG4gICAgaWYgKGVsZSkge1xyXG4gICAgICAkbmV3Rm9jdXNlZEVsZSA9IGVsZTtcclxuICAgIH0gZWxzZSBpZiAoISRmb2N1c2VkRWxlKSB7XHJcbiAgICAgIC8qIGlmIG5vIGVsZW1lbnQgb24gZm9jdXMgY2hvb3NlIGZpcnN0IHZpc2libGUgb25lICovXHJcbiAgICAgIGxldCBmaXJzdFZpc2libGVPcHRpb25JbmRleCA9IHRoaXMuZ2V0Rmlyc3RWaXNpYmxlT3B0aW9uSW5kZXgoKTtcclxuICAgICAgJG5ld0ZvY3VzZWRFbGUgPSB0aGlzLiRkcm9wYm94Q29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgICAgYC52c2NvbXAtb3B0aW9uW2RhdGEtdmlzaWJsZS1pbmRleD1cIiR7Zmlyc3RWaXNpYmxlT3B0aW9uSW5kZXh9XCJdYFxyXG4gICAgICApO1xyXG5cclxuICAgICAgaWYgKFxyXG4gICAgICAgIERvbVV0aWxzLmhhc0NsYXNzKCRuZXdGb2N1c2VkRWxlLCAnZGlzYWJsZWQnKSB8fFxyXG4gICAgICAgIERvbVV0aWxzLmhhc0NsYXNzKCRuZXdGb2N1c2VkRWxlLCAnZ3JvdXAtdGl0bGUnKVxyXG4gICAgICApIHtcclxuICAgICAgICAkbmV3Rm9jdXNlZEVsZSA9IHRoaXMuZ2V0U2libGluZygkbmV3Rm9jdXNlZEVsZSwgJ25leHQnKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgJG5ld0ZvY3VzZWRFbGUgPSB0aGlzLmdldFNpYmxpbmcoJGZvY3VzZWRFbGUsIGRpcmVjdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCRuZXdGb2N1c2VkRWxlICYmICRuZXdGb2N1c2VkRWxlICE9PSAkZm9jdXNlZEVsZSkge1xyXG4gICAgICBpZiAoJGZvY3VzZWRFbGUpIHtcclxuICAgICAgICBEb21VdGlscy5yZW1vdmVDbGFzcygkZm9jdXNlZEVsZSwgJ2ZvY3VzZWQnKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgRG9tVXRpbHMuYWRkQ2xhc3MoJG5ld0ZvY3VzZWRFbGUsICdmb2N1c2VkJyk7XHJcbiAgICAgIHRoaXMudG9nZ2xlRm9jdXNlZFByb3AoRG9tVXRpbHMuZ2V0RGF0YSgkbmV3Rm9jdXNlZEVsZSwgJ2luZGV4JyksIHRydWUpO1xyXG4gICAgICB0aGlzLm1vdmVGb2N1c2VkT3B0aW9uVG9WaWV3KCRuZXdGb2N1c2VkRWxlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG1vdmVGb2N1c2VkT3B0aW9uVG9WaWV3KCRmb2N1c2VkRWxlKSB7XHJcbiAgICBpZiAoISRmb2N1c2VkRWxlKSB7XHJcbiAgICAgICRmb2N1c2VkRWxlID0gdGhpcy4kZHJvcGJveENvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAgICcudnNjb21wLW9wdGlvbi5mb2N1c2VkJ1xyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghJGZvY3VzZWRFbGUpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBuZXdTY3JvbGxUb3A7XHJcbiAgICBsZXQgY29udGFpbmVyUmVjdCA9IHRoaXMuJG9wdGlvbnNDb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICBsZXQgb3B0aW9uUmVjdCA9ICRmb2N1c2VkRWxlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgbGV0IGNvbnRhaW5lclRvcCA9IGNvbnRhaW5lclJlY3QudG9wO1xyXG4gICAgbGV0IGNvbnRhaW5lckJvdHRvbSA9IGNvbnRhaW5lclJlY3QuYm90dG9tO1xyXG4gICAgbGV0IGNvbnRhaW5lckhlaWdodCA9IGNvbnRhaW5lclJlY3QuaGVpZ2h0O1xyXG4gICAgbGV0IG9wdGlvblRvcCA9IG9wdGlvblJlY3QudG9wO1xyXG4gICAgbGV0IG9wdGlvbkJvdHRvbSA9IG9wdGlvblJlY3QuYm90dG9tO1xyXG4gICAgbGV0IG9wdGlvbkhlaWdodCA9IG9wdGlvblJlY3QuaGVpZ2h0O1xyXG4gICAgbGV0IG9wdGlvbk9mZnNldFRvcCA9ICRmb2N1c2VkRWxlLm9mZnNldFRvcDtcclxuICAgIGxldCBvcHRpb25zVG9wID0gRG9tVXRpbHMuZ2V0RGF0YSh0aGlzLiRvcHRpb25zLCAndG9wJywgJ251bWJlcicpO1xyXG5cclxuICAgIC8qIGlmIG9wdGlvbiBoaWRkZW4gb24gdG9wICovXHJcbiAgICBpZiAoY29udGFpbmVyVG9wID4gb3B0aW9uVG9wKSB7XHJcbiAgICAgIG5ld1Njcm9sbFRvcCA9IG9wdGlvbk9mZnNldFRvcCArIG9wdGlvbnNUb3A7XHJcbiAgICB9IGVsc2UgaWYgKGNvbnRhaW5lckJvdHRvbSA8IG9wdGlvbkJvdHRvbSkge1xyXG4gICAgICAvKiBpZiBvcHRpb24gaGlkZGVuIG9uIGJvdHRvbSAqL1xyXG4gICAgICBuZXdTY3JvbGxUb3AgPVxyXG4gICAgICAgIG9wdGlvbk9mZnNldFRvcCAtIGNvbnRhaW5lckhlaWdodCArIG9wdGlvbkhlaWdodCArIG9wdGlvbnNUb3A7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc29sZS5sb2coJ291YWljaGUnKTtcclxuICAgIGNvbnNvbGUubG9nKCdzdCAnICsgbmV3U2Nyb2xsVG9wKTtcclxuXHJcbiAgICBpZiAobmV3U2Nyb2xsVG9wICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgdGhpcy4kb3B0aW9uc0NvbnRhaW5lci5zY3JvbGxUb3AgPSBuZXdTY3JvbGxUb3A7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZW1vdmVPcHRpb25Gb2N1cygpIHtcclxuICAgIGxldCAkZm9jdXNlZEVsZSA9IHRoaXMuJGRyb3Bib3hDb250YWluZXIucXVlcnlTZWxlY3RvcihcclxuICAgICAgJy52c2NvbXAtb3B0aW9uLmZvY3VzZWQnXHJcbiAgICApO1xyXG5cclxuICAgIGlmICghJGZvY3VzZWRFbGUpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIERvbVV0aWxzLnJlbW92ZUNsYXNzKCRmb2N1c2VkRWxlLCAnZm9jdXNlZCcpO1xyXG4gICAgdGhpcy50b2dnbGVGb2N1c2VkUHJvcChudWxsKTtcclxuICB9XHJcblxyXG4gIHNlbGVjdE9wdGlvbigkZWxlKSB7XHJcbiAgICBpZiAoISRlbGUpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBpc0FkZGluZyA9ICFEb21VdGlscy5oYXNDbGFzcygkZWxlLCAnc2VsZWN0ZWQnKTtcclxuXHJcbiAgICBpZiAoaXNBZGRpbmcpIHtcclxuICAgICAgaWYgKHRoaXMubXVsdGlwbGUgJiYgdGhpcy5pc01heFZhbHVlc1NlbGVjdGVkKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvKiogb24gc2VsZWN0aW5nIHNhbWUgdmFsdWUgaW4gc2luZ2xlIHNlbGVjdCAqL1xyXG4gICAgICBpZiAoIXRoaXMubXVsdGlwbGUpIHtcclxuICAgICAgICB0aGlzLmNsb3NlRHJvcGJveCgpO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGxldCBzZWxlY3RlZFZhbHVlcyA9IHRoaXMuc2VsZWN0ZWRWYWx1ZXM7XHJcbiAgICBsZXQgc2VsZWN0ZWRWYWx1ZSA9IERvbVV0aWxzLmdldERhdGEoJGVsZSwgJ3ZhbHVlJyk7XHJcbiAgICBsZXQgc2VsZWN0ZWRJbmRleCA9IERvbVV0aWxzLmdldERhdGEoJGVsZSwgJ2luZGV4Jyk7XHJcblxyXG4gICAgdGhpcy50b2dnbGVTZWxlY3RlZFByb3Aoc2VsZWN0ZWRJbmRleCwgaXNBZGRpbmcpO1xyXG5cclxuICAgIGlmIChpc0FkZGluZykge1xyXG4gICAgICBpZiAodGhpcy5tdWx0aXBsZSkge1xyXG4gICAgICAgIHNlbGVjdGVkVmFsdWVzLnB1c2goc2VsZWN0ZWRWYWx1ZSk7XHJcbiAgICAgICAgdGhpcy50b2dnbGVBbGxPcHRpb25zQ2xhc3MoKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAoc2VsZWN0ZWRWYWx1ZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICB0aGlzLnRvZ2dsZVNlbGVjdGVkUHJvcChcclxuICAgICAgICAgICAgdGhpcy5nZXRPcHRpb25JbmRleChzZWxlY3RlZFZhbHVlc1swXSksXHJcbiAgICAgICAgICAgIGZhbHNlXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc2VsZWN0ZWRWYWx1ZXMgPSBbc2VsZWN0ZWRWYWx1ZV07XHJcbiAgICAgICAgbGV0ICRwcmV2U2VsZWN0ZWRPcHRpb24gPSB0aGlzLiRlbGUucXVlcnlTZWxlY3RvcihcclxuICAgICAgICAgICcudnNjb21wLW9wdGlvbi5zZWxlY3RlZCdcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBpZiAoJHByZXZTZWxlY3RlZE9wdGlvbikge1xyXG4gICAgICAgICAgRG9tVXRpbHMudG9nZ2xlQ2xhc3MoJHByZXZTZWxlY3RlZE9wdGlvbiwgJ3NlbGVjdGVkJywgZmFsc2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5jbG9zZURyb3Bib3goKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgRG9tVXRpbHMudG9nZ2xlQ2xhc3MoJGVsZSwgJ3NlbGVjdGVkJyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAodGhpcy5tdWx0aXBsZSkge1xyXG4gICAgICAgIERvbVV0aWxzLnRvZ2dsZUNsYXNzKCRlbGUsICdzZWxlY3RlZCcpO1xyXG4gICAgICAgIFV0aWxzLnJlbW92ZUl0ZW1Gcm9tQXJyYXkoc2VsZWN0ZWRWYWx1ZXMsIHNlbGVjdGVkVmFsdWUpO1xyXG4gICAgICAgIHRoaXMudG9nZ2xlQWxsT3B0aW9uc0NsYXNzKGZhbHNlKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChEb21VdGlscy5oYXNDbGFzcygkZWxlLCAnY3VycmVudC1uZXcnKSkge1xyXG4gICAgICB0aGlzLmJlZm9yZVNlbGVjdE5ld1ZhbHVlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5zZXRWYWx1ZShzZWxlY3RlZFZhbHVlcywgdHJ1ZSk7XHJcbiAgfVxyXG5cclxuICBzZWxlY3RGb2N1c2VkT3B0aW9uKCkge1xyXG4gICAgdGhpcy5zZWxlY3RPcHRpb24oXHJcbiAgICAgIHRoaXMuJGRyb3Bib3hDb250YWluZXIucXVlcnlTZWxlY3RvcignLnZzY29tcC1vcHRpb24uZm9jdXNlZCcpXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgdG9nZ2xlQWxsT3B0aW9ucyhpc1NlbGVjdGVkKSB7XHJcbiAgICBpZiAoIXRoaXMubXVsdGlwbGUgfHwgdGhpcy5kaXNhYmxlU2VsZWN0QWxsKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZW9mIGlzU2VsZWN0ZWQgIT09ICdib29sZWFuJykge1xyXG4gICAgICBpc1NlbGVjdGVkID0gIURvbVV0aWxzLmhhc0NsYXNzKHRoaXMuJHRvZ2dsZUFsbENoZWNrYm94LCAnY2hlY2tlZCcpO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBzZWxlY3RlZFZhbHVlcyA9IFtdO1xyXG5cclxuICAgIHRoaXMub3B0aW9ucy5mb3JFYWNoKChkKSA9PiB7XHJcbiAgICAgIGlmIChkLmlzRGlzYWJsZWQgfHwgZC5pc0N1cnJlbnROZXcgfHwgZC5pc0dyb3VwVGl0bGUpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGQuaXNTZWxlY3RlZCA9IGlzU2VsZWN0ZWQ7XHJcblxyXG4gICAgICBpZiAoaXNTZWxlY3RlZCkge1xyXG4gICAgICAgIHNlbGVjdGVkVmFsdWVzLnB1c2goZC52YWx1ZSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMudG9nZ2xlQWxsT3B0aW9uc0NsYXNzKGlzU2VsZWN0ZWQpO1xyXG4gICAgdGhpcy5zZXRWYWx1ZShzZWxlY3RlZFZhbHVlcywgdHJ1ZSk7XHJcbiAgICB0aGlzLnJlbmRlck9wdGlvbnMoKTtcclxuICB9XHJcblxyXG4gIHRvZ2dsZUFsbE9wdGlvbnNDbGFzcyhpc0FsbFNlbGVjdGVkKSB7XHJcbiAgICBpZiAodHlwZW9mIGlzQWxsU2VsZWN0ZWQgIT09ICdib29sZWFuJykge1xyXG4gICAgICBpc0FsbFNlbGVjdGVkID0gZmFsc2U7XHJcblxyXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmxlbmd0aCkge1xyXG4gICAgICAgIGlzQWxsU2VsZWN0ZWQgPSAhdGhpcy5vcHRpb25zLnNvbWUoKGQpID0+IHtcclxuICAgICAgICAgIHJldHVybiAhZC5pc1NlbGVjdGVkICYmICFkLmlzRGlzYWJsZWQgJiYgIWQuaXNHcm91cFRpdGxlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgRG9tVXRpbHMudG9nZ2xlQ2xhc3ModGhpcy4kdG9nZ2xlQWxsQ2hlY2tib3gsICdjaGVja2VkJywgaXNBbGxTZWxlY3RlZCk7XHJcbiAgICB0aGlzLmlzQWxsU2VsZWN0ZWQgPSBpc0FsbFNlbGVjdGVkO1xyXG4gIH1cclxuXHJcbiAgdG9nZ2xlRm9jdXNlZFByb3AoaW5kZXgsIGlzRm9jdXNlZCA9IGZhbHNlKSB7XHJcbiAgICBpZiAodGhpcy5mb2N1c2VkT3B0aW9uSW5kZXgpIHtcclxuICAgICAgdGhpcy5zZXRPcHRpb25Qcm9wKHRoaXMuZm9jdXNlZE9wdGlvbkluZGV4LCAnaXNGb2N1c2VkJywgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuc2V0T3B0aW9uUHJvcChpbmRleCwgJ2lzRm9jdXNlZCcsIGlzRm9jdXNlZCk7XHJcbiAgICB0aGlzLmZvY3VzZWRPcHRpb25JbmRleCA9IGluZGV4O1xyXG4gIH1cclxuXHJcbiAgdG9nZ2xlU2VsZWN0ZWRQcm9wKGluZGV4LCBpc1NlbGVjdGVkID0gZmFsc2UpIHtcclxuICAgIHRoaXMuc2V0T3B0aW9uUHJvcChpbmRleCwgJ2lzU2VsZWN0ZWQnLCBpc1NlbGVjdGVkKTtcclxuICB9XHJcblxyXG4gIHNjcm9sbFRvVG9wKCkge1xyXG4gICAgbGV0IGlzQ2xvc2VkID0gIXRoaXMuaXNPcGVuZWQoKTtcclxuXHJcbiAgICBpZiAoaXNDbG9zZWQpIHtcclxuICAgICAgdGhpcy5vcGVuRHJvcGJveCh0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgc2Nyb2xsVG9wID0gdGhpcy4kb3B0aW9uc0NvbnRhaW5lci5zY3JvbGxUb3A7XHJcblxyXG4gICAgaWYgKHNjcm9sbFRvcCA+IDApIHtcclxuICAgICAgdGhpcy4kb3B0aW9uc0NvbnRhaW5lci5zY3JvbGxUb3AgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChpc0Nsb3NlZCkge1xyXG4gICAgICB0aGlzLmNsb3NlRHJvcGJveCh0cnVlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlc2V0KCkge1xyXG4gICAgdGhpcy5vcHRpb25zLmZvckVhY2goKGQpID0+IHtcclxuICAgICAgZC5pc1NlbGVjdGVkID0gZmFsc2U7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLmJlZm9yZVZhbHVlU2V0KHRydWUpO1xyXG4gICAgdGhpcy5zZXRWYWx1ZShudWxsLCB0cnVlKTtcclxuICAgIHRoaXMuYWZ0ZXJWYWx1ZVNldCgpO1xyXG4gIH1cclxuXHJcbiAgYmVmb3JlVmFsdWVTZXQoaXNSZXNldCkge1xyXG4gICAgdGhpcy50b2dnbGVBbGxPcHRpb25zQ2xhc3MoaXNSZXNldCA/IGZhbHNlIDogdW5kZWZpbmVkKTtcclxuICB9XHJcblxyXG4gIGFmdGVyVmFsdWVTZXQoKSB7XHJcbiAgICB0aGlzLnNjcm9sbFRvVG9wKCk7XHJcbiAgICB0aGlzLnNldFNlYXJjaFZhbHVlKCcnKTtcclxuICAgIHRoaXMucmVuZGVyT3B0aW9ucygpO1xyXG4gIH1cclxuXHJcbiAgYWZ0ZXJTZXRPcHRpb25zKGtlZXBWYWx1ZSkge1xyXG4gICAgaWYgKGtlZXBWYWx1ZSkge1xyXG4gICAgICB0aGlzLnNldFNlbGVjdGVkUHJvcCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuc2V0T3B0aW9uc0hlaWdodCgpO1xyXG4gICAgdGhpcy5zZXRWaXNpYmxlT3B0aW9ucygpO1xyXG5cclxuICAgIGlmICgha2VlcFZhbHVlKSB7XHJcbiAgICAgIHRoaXMucmVzZXQoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFkZE9wdGlvbihkYXRhLCByZXJlbmRlcikge1xyXG4gICAgaWYgKCFkYXRhKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmxhc3RPcHRpb25JbmRleCsrO1xyXG4gICAgZGF0YS5pbmRleCA9IHRoaXMubGFzdE9wdGlvbkluZGV4O1xyXG4gICAgbGV0IG5ld09wdGlvbiA9IHRoaXMuZ2V0T3B0aW9uT2JqKGRhdGEpO1xyXG5cclxuICAgIHRoaXMub3B0aW9ucy5wdXNoKG5ld09wdGlvbik7XHJcbiAgICB0aGlzLnNvcnRlZE9wdGlvbnMucHVzaChuZXdPcHRpb24pO1xyXG5cclxuICAgIGlmIChyZXJlbmRlcikge1xyXG4gICAgICB0aGlzLnZpc2libGVPcHRpb25zQ291bnQrKztcclxuICAgICAgdGhpcy5hZnRlclNldE9wdGlvbnMoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlbW92ZU9wdGlvbihpbmRleCkge1xyXG4gICAgaWYgKCFpbmRleCAmJiBpbmRleCAhPSAwKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLm9wdGlvbnMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgIHRoaXMubGFzdE9wdGlvbkluZGV4LS07XHJcbiAgfVxyXG5cclxuICByZW1vdmVOZXdPcHRpb24oKSB7XHJcbiAgICBsZXQgbmV3T3B0aW9uID0gdGhpcy5nZXROZXdPcHRpb24oKTtcclxuXHJcbiAgICBpZiAobmV3T3B0aW9uKSB7XHJcbiAgICAgIHRoaXMucmVtb3ZlT3B0aW9uKG5ld09wdGlvbi5pbmRleCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBiZWZvcmVTZWxlY3ROZXdWYWx1ZSgpIHtcclxuICAgIGxldCBuZXdPcHRpb24gPSB0aGlzLmdldE5ld09wdGlvbigpO1xyXG4gICAgbGV0IG5ld0luZGV4ID0gbmV3T3B0aW9uLmluZGV4O1xyXG5cclxuICAgIHRoaXMubmV3VmFsdWVzLnB1c2gobmV3T3B0aW9uLnZhbHVlKTtcclxuICAgIHRoaXMuc2V0T3B0aW9uUHJvcChuZXdJbmRleCwgJ2lzQ3VycmVudE5ldycsIGZhbHNlKTtcclxuICAgIHRoaXMuc2V0T3B0aW9uUHJvcChuZXdJbmRleCwgJ2lzTmV3JywgdHJ1ZSk7XHJcblxyXG4gICAgLyoqIHVzaW5nIHNldFRpbWVvdXQgdG8gZml4IHRoZSBpc3N1ZSBvZiBkcm9wYm94IGdldHRpbmcgY2xvc2VkIG9uIHNlbGVjdCAqL1xyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIHRoaXMuc2V0U2VhcmNoVmFsdWUoJycpO1xyXG4gICAgICB0aGlzLmZvY3VzU2VhcmNoSW5wdXQoKTtcclxuICAgIH0sIDApO1xyXG4gIH1cclxuXHJcbiAgc29ydE9wdGlvbnMob3B0aW9ucykge1xyXG4gICAgcmV0dXJuIG9wdGlvbnMuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICBpZiAoIWEuaXNTZWxlY3RlZCAmJiAhYi5pc1NlbGVjdGVkKSB7XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgIH0gZWxzZSBpZiAoYS5pc1NlbGVjdGVkICYmICghYi5pc1NlbGVjdGVkIHx8IGEuaW5kZXggPCBiLmluZGV4KSkge1xyXG4gICAgICAgIHJldHVybiAtMTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gMTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBzb3J0T3B0aW9uc0dyb3VwKG9wdGlvbnMpIHtcclxuICAgIGxldCBzb3J0T3B0aW9ucyA9IHRoaXMuc29ydE9wdGlvbnM7XHJcbiAgICBvcHRpb25zID0gdGhpcy5zdHJ1Y3R1cmVPcHRpb25Hcm91cChvcHRpb25zKTtcclxuXHJcbiAgICBvcHRpb25zLmZvckVhY2goKGQpID0+IHtcclxuICAgICAgbGV0IGNoaWxkT3B0aW9ucyA9IGQub3B0aW9ucztcclxuICAgICAgZC5pc1NlbGVjdGVkID0gY2hpbGRPcHRpb25zLnNvbWUoKGUpID0+IGUuaXNTZWxlY3RlZCk7XHJcblxyXG4gICAgICBpZiAoZC5pc1NlbGVjdGVkKSB7XHJcbiAgICAgICAgc29ydE9wdGlvbnMoY2hpbGRPcHRpb25zKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgc29ydE9wdGlvbnMob3B0aW9ucyk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuZGVzdHJ1Y3R1cmVPcHRpb25Hcm91cChvcHRpb25zKTtcclxuICB9XHJcblxyXG4gIGlzT3B0aW9uVmlzaWJsZShkLCBzZWFyY2hWYWx1ZSwgaGFzRXhhY3RPcHRpb24sIHZpc2libGVPcHRpb25Hcm91cHNNYXBwaW5nKSB7XHJcbiAgICBsZXQgdmFsdWUgPSBkLmxhYmVsLnRvTG93ZXJDYXNlKCk7XHJcbiAgICBsZXQgZGVzY3JpcHRpb24gPSBkLmRlc2NyaXB0aW9uO1xyXG4gICAgbGV0IGFsaWFzID0gZC5hbGlhcztcclxuICAgIGxldCBpc1Zpc2libGUgPSB2YWx1ZS5pbmRleE9mKHNlYXJjaFZhbHVlKSAhPT0gLTE7XHJcblxyXG4gICAgaWYgKGQuaXNHcm91cFRpdGxlKSB7XHJcbiAgICAgIGlzVmlzaWJsZSA9IHZpc2libGVPcHRpb25Hcm91cHNNYXBwaW5nW2QuaW5kZXhdO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChhbGlhcyAmJiAhaXNWaXNpYmxlKSB7XHJcbiAgICAgIGlzVmlzaWJsZSA9IGFsaWFzLmluZGV4T2Yoc2VhcmNoVmFsdWUpICE9PSAtMTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZGVzY3JpcHRpb24gJiYgIWlzVmlzaWJsZSkge1xyXG4gICAgICBpc1Zpc2libGUgPSBkZXNjcmlwdGlvbi50b0xvd2VyQ2FzZSgpLmluZGV4T2Yoc2VhcmNoVmFsdWUpICE9PSAtMTtcclxuICAgIH1cclxuXHJcbiAgICBkLmlzVmlzaWJsZSA9IGlzVmlzaWJsZTtcclxuXHJcbiAgICBpZiAoIWhhc0V4YWN0T3B0aW9uKSB7XHJcbiAgICAgIGhhc0V4YWN0T3B0aW9uID0gdmFsdWUgPT09IHNlYXJjaFZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIGlzVmlzaWJsZSxcclxuICAgICAgaGFzRXhhY3RPcHRpb24sXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgc3RydWN0dXJlT3B0aW9uR3JvdXAob3B0aW9ucykge1xyXG4gICAgbGV0IHJlc3VsdCA9IFtdO1xyXG4gICAgbGV0IGNoaWxkT3B0aW9ucyA9IHt9O1xyXG5cclxuICAgIC8qKiBnZXR0aW5nIGFsbCBncm91cCB0aXRsZSAqL1xyXG4gICAgb3B0aW9ucy5mb3JFYWNoKChkKSA9PiB7XHJcbiAgICAgIGlmIChkLmlzR3JvdXBUaXRsZSkge1xyXG4gICAgICAgIGxldCBjaGlsZEFycmF5ID0gW107XHJcbiAgICAgICAgZC5vcHRpb25zID0gY2hpbGRBcnJheTtcclxuICAgICAgICBjaGlsZE9wdGlvbnNbZC5pbmRleF0gPSBjaGlsZEFycmF5O1xyXG5cclxuICAgICAgICByZXN1bHQucHVzaChkKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLyoqIGdldHRpbmcgYWxsIGdyb3VwIG9wdGlvbnMgKi9cclxuICAgIG9wdGlvbnMuZm9yRWFjaCgoZCkgPT4ge1xyXG4gICAgICBpZiAoZC5pc0dyb3VwT3B0aW9uKSB7XHJcbiAgICAgICAgY2hpbGRPcHRpb25zW2QuZ3JvdXBJbmRleF0ucHVzaChkKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIGRlc3RydWN0dXJlT3B0aW9uR3JvdXAob3B0aW9ucykge1xyXG4gICAgbGV0IHJlc3VsdCA9IFtdO1xyXG5cclxuICAgIG9wdGlvbnMuZm9yRWFjaCgoZCkgPT4ge1xyXG4gICAgICByZXN1bHQucHVzaChkKTtcclxuICAgICAgcmVzdWx0ID0gcmVzdWx0LmNvbmNhdChkLm9wdGlvbnMpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHNlcnZlclNlYXJjaChzZWFyY2hWYWx1ZSkge1xyXG4gICAgRG9tVXRpbHMucmVtb3ZlQ2xhc3ModGhpcy4kd3JhcHBlciwgJ2hhcy1uby1vcHRpb25zJyk7XHJcbiAgICBEb21VdGlscy5hZGRDbGFzcyh0aGlzLiR3cmFwcGVyLCAnc2VydmVyLXNlYXJjaGluZycpO1xyXG4gICAgdGhpcy5vblNlcnZlclNlYXJjaChzZWFyY2hWYWx1ZSwgdGhpcyk7XHJcbiAgfVxyXG5cclxuICAvKiogc3RhdGljIG1ldGhvZHMgLSBzdGFydCAqL1xyXG4gIHN0YXRpYyBpbml0KG9wdGlvbnMpIHtcclxuICAgIGxldCAkZWxlQXJyYXkgPSBvcHRpb25zLmVsZTtcclxuXHJcbiAgICBpZiAoISRlbGVBcnJheSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHNpbmdsZUVsZSA9IGZhbHNlO1xyXG5cclxuICAgIGlmICh0eXBlb2YgJGVsZUFycmF5ID09PSAnc3RyaW5nJykge1xyXG4gICAgICAkZWxlQXJyYXkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCRlbGVBcnJheSk7XHJcblxyXG4gICAgICBpZiAoISRlbGVBcnJheSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmICgkZWxlQXJyYXkubGVuZ3RoID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgJGVsZUFycmF5ID0gWyRlbGVBcnJheV07XHJcbiAgICAgIHNpbmdsZUVsZSA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGluc3RhbmNlcyA9IFtdO1xyXG4gICAgJGVsZUFycmF5LmZvckVhY2goKCRlbGUpID0+IHtcclxuICAgICAgb3B0aW9ucy5lbGUgPSAkZWxlO1xyXG4gICAgICBpbnN0YW5jZXMucHVzaChuZXcgVmlydHVhbFNlbGVjdChvcHRpb25zKSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gc2luZ2xlRWxlID8gaW5zdGFuY2VzWzBdIDogaW5zdGFuY2VzO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGNsb3NlQWxsRHJvcGJveCgkZWxlVG9LZWVwT3Blbikge1xyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnZzY29tcC13cmFwcGVyJykuZm9yRWFjaCgoJGVsZSkgPT4ge1xyXG4gICAgICBpZiAoJGVsZVRvS2VlcE9wZW4gJiYgJGVsZVRvS2VlcE9wZW4gPT09ICRlbGUpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgICRlbGUucGFyZW50RWxlbWVudC52aXJ0dWFsU2VsZWN0LmNsb3NlRHJvcGJveCgpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgcmVzZXRGb3JtKGUpIHtcclxuICAgIGxldCAkZm9ybSA9IGUudGFyZ2V0LmNsb3Nlc3QoJ2Zvcm0nKTtcclxuXHJcbiAgICBpZiAoISRmb3JtKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAkZm9ybS5xdWVyeVNlbGVjdG9yQWxsKCcudnNjb21wLXdyYXBwZXInKS5mb3JFYWNoKCgkZWxlKSA9PiB7XHJcbiAgICAgICRlbGUucGFyZW50RWxlbWVudC52aXJ0dWFsU2VsZWN0LnJlc2V0KCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyByZXNldCgpIHtcclxuICAgIHRoaXMudmlydHVhbFNlbGVjdC5yZXNldCgpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHNldFZhbHVlTWV0aG9kKHZhbHVlLCBzaWxlbnRDaGFuZ2UpIHtcclxuICAgIHRoaXMudmlydHVhbFNlbGVjdC5zZXRWYWx1ZU1ldGhvZCh2YWx1ZSwgc2lsZW50Q2hhbmdlKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBzZXRPcHRpb25zTWV0aG9kKG9wdGlvbnMpIHtcclxuICAgIHRoaXMudmlydHVhbFNlbGVjdC5zZXRPcHRpb25zTWV0aG9kKG9wdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHNldERpc2FibGVkT3B0aW9uc01ldGhvZChvcHRpb25zKSB7XHJcbiAgICB0aGlzLnZpcnR1YWxTZWxlY3Quc2V0RGlzYWJsZWRPcHRpb25zTWV0aG9kKG9wdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHRvZ2dsZVNlbGVjdEFsbChpc1NlbGVjdGVkKSB7XHJcbiAgICB0aGlzLnZpcnR1YWxTZWxlY3QudG9nZ2xlQWxsT3B0aW9ucyhpc1NlbGVjdGVkKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBpc0FsbFNlbGVjdGVkKCkge1xyXG4gICAgcmV0dXJuIHRoaXMudmlydHVhbFNlbGVjdC5pc0FsbFNlbGVjdGVkO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGFkZE9wdGlvbk1ldGhvZChkYXRhKSB7XHJcbiAgICB0aGlzLnZpcnR1YWxTZWxlY3QuYWRkT3B0aW9uKGRhdGEsIHRydWUpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldE5ld1ZhbHVlTWV0aG9kKCkge1xyXG4gICAgcmV0dXJuIHRoaXMudmlydHVhbFNlbGVjdC5nZXROZXdWYWx1ZSgpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHZlcnNpb24oKSB7XHJcbiAgICByZXR1cm4gdmlydHVhbFNlbGVjdFZlcnNpb247XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgZ2V0RGlzcGxheVZhbHVlTWV0aG9kKCkge1xyXG4gICAgcmV0dXJuIHRoaXMudmlydHVhbFNlbGVjdC5nZXREaXNwbGF5VmFsdWUoKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBvcGVuTWV0aG9kKCkge1xyXG4gICAgcmV0dXJuIHRoaXMudmlydHVhbFNlbGVjdC5vcGVuRHJvcGJveCgpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGNsb3NlTWV0aG9kKCkge1xyXG4gICAgcmV0dXJuIHRoaXMudmlydHVhbFNlbGVjdC5jbG9zZURyb3Bib3goKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBvblJlc2l6ZU1ldGhvZCgpIHtcclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy52c2NvbXAtd3JhcHBlcicpLmZvckVhY2goKCRlbGUpID0+IHtcclxuICAgICAgJGVsZS5wYXJlbnRFbGVtZW50LnZpcnR1YWxTZWxlY3Qub25SZXNpemUoKTtcclxuICAgIH0pO1xyXG4gIH1cclxuICAvKiogc3RhdGljIG1ldGhvZHMgLSBlbmQgKi9cclxufVxyXG5cclxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigncmVzZXQnLCBWaXJ0dWFsU2VsZWN0LnJlc2V0Rm9ybSk7XHJcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBWaXJ0dWFsU2VsZWN0Lm9uUmVzaXplTWV0aG9kKTtcclxuXHJcbndpbmRvdy5WaXJ0dWFsU2VsZWN0ID0gVmlydHVhbFNlbGVjdDtcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==