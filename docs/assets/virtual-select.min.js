/*!
 * Virtual Select v1.0.6
 * https://sa-si-dev.github.io/virtual-select
 * Licensed under MIT (https://github.com/sa-si-dev/virtual-select/blob/master/LICENSE)
 */(()=>{"use strict";var t={"./src/utils/dom-utils.js":
/*!********************************!*\
  !*** ./src/utils/dom-utils.js ***!
  \********************************/(t,e,i)=>{function o(t){return function(t){if(Array.isArray(t))return s(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return s(t,e);var i=Object.prototype.toString.call(t).slice(8,-1);"Object"===i&&t.constructor&&(i=t.constructor.name);if("Map"===i||"Set"===i)return Array.from(t);if("Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return s(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,o=new Array(e);i<e;i++)o[i]=t[i];return o}function n(t,e){for(var i=0;i<e.length;i++){var o=e[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}i.r(e),i.d(e,{DomUtils:()=>l});var l=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,i,s;return e=t,s=[{key:"addClass",value:function(t,e){t&&(e=e.split(" "),this.getElements(t).forEach((function(t){var i;(i=t.classList).add.apply(i,o(e))})))}},{key:"removeClass",value:function(t,e){t&&(e=e.split(" "),this.getElements(t).forEach((function(t){var i;(i=t.classList).remove.apply(i,o(e))})))}},{key:"toggleClass",value:function(t,e,i){var o;if(t)return void 0!==i&&(i=Boolean(i)),this.getElements(t).forEach((function(t){o=t.classList.toggle(e,i)})),o}},{key:"hasClass",value:function(t,e){return!!t&&t.classList.contains(e)}},{key:"hasEllipsis",value:function(t){return!!t&&t.scrollWidth>t.offsetWidth}},{key:"getMoreVisibleSides",value:function(t){if(!t)return{};var e=t.getBoundingClientRect(),i=window.innerWidth,o=window.innerHeight,s=e.left,n=e.top;return{horizontal:s>i-s-e.width?"left":"right",vertical:n>o-n-e.height?"top":"bottom"}}},{key:"getData",value:function(t,e,i){if(t){var o=t?t.dataset[e]:"";return"number"===i?o=parseFloat(o)||0:"true"===o?o=!0:"false"===o&&(o=!1),o}}},{key:"setData",value:function(t,e,i){t&&(t.dataset[e]=i)}},{key:"setStyle",value:function(t,e,i){t&&(t.style[e]=i)}},{key:"getElements",value:function(t){if(t)return void 0===t.length&&(t=[t]),t}},{key:"getStyleText",value:function(t,e){var i="";for(var o in t)i+="".concat(o,": ").concat(t[o],";");return i&&!e&&(i='style="'.concat(i,'"')),i}},{key:"getAttributesText",value:function(t){var e="";if(!t)return e;for(var i in t){var o=t[i];void 0!==o&&(e+=" ".concat(i,'="').concat(o,'" '))}return e}}],(i=null)&&n(e.prototype,i),s&&n(e,s),t}()},"./src/utils/index.js":
/*!****************************!*\
  !*** ./src/utils/index.js ***!
  \****************************/(t,e,i)=>{i.r(e),i.d(e,{Utils:()=>o.Utils,DomUtils:()=>s.DomUtils});var o=i(/*! ./utils */"./src/utils/utils.js"),s=i(/*! ./dom-utils */"./src/utils/dom-utils.js")},"./src/utils/utils.js":
/*!****************************!*\
  !*** ./src/utils/utils.js ***!
  \****************************/(t,e,i)=>{function o(t){return function(t){if(Array.isArray(t))return s(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return s(t,e);var i=Object.prototype.toString.call(t).slice(8,-1);"Object"===i&&t.constructor&&(i=t.constructor.name);if("Map"===i||"Set"===i)return Array.from(t);if("Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return s(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,o=new Array(e);i<e;i++)o[i]=t[i];return o}function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function l(t,e){for(var i=0;i<e.length;i++){var o=e[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}i.r(e),i.d(e,{Utils:()=>a});var a=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,i,s;return e=t,s=[{key:"getString",value:function(t){return t||0===t?t.toString():""}},{key:"convertToBoolean",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return t=!0===t||"true"===t||!1!==t&&"false"!==t&&e}},{key:"isEmpty",value:function(t){var e=!1;return t?Array.isArray(t)?0===t.length&&(e=!0):"object"===n(t)&&0===Object.keys(t).length&&(e=!0):e=!0,e}},{key:"isNotEmpty",value:function(t){return!this.isEmpty(t)}},{key:"removeItemFromArray",value:function(t,e,i){if(!Array.isArray(t)||!t.length||!e)return t;i&&(t=o(t));var s=t.indexOf(e);return-1!==s&&t.splice(s,1),t}},{key:"removeArrayEmpty",value:function(t){return Array.isArray(t)&&t.length?t.filter((function(t){return!!t})):[]}},{key:"generateUUID",value:function(){return([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,(function(t){return(t^crypto.getRandomValues(new Uint8Array(1))[0]&15>>t/4).toString(16)}))}}],(i=null)&&l(e.prototype,i),s&&l(e,s),t}()}},e={};function i(o){if(e[o])return e[o].exports;var s=e[o]={exports:{}};return t[o](s,s.exports,i),s.exports}i.d=(t,e)=>{for(var o in e)i.o(e,o)&&!i.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var o={};(()=>{
/*!*******************************!*\
  !*** ./src/virtual-select.js ***!
  \*******************************/
i.r(o),i.d(o,{VirtualSelect:()=>c});var t=i(/*! ./utils */"./src/utils/index.js");function e(t,e){var i;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(i=n(t))||e&&t&&"number"==typeof t.length){i&&(t=i);var o=0,s=function(){};return{s,n:function(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function(t){throw t},f:s}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var l,a=!0,r=!1;return{s:function(){i=t[Symbol.iterator]()},n:function(){var t=i.next();return a=t.done,t},e:function(t){r=!0,l=t},f:function(){try{a||null==i.return||i.return()}finally{if(r)throw l}}}}function s(t){return function(t){if(Array.isArray(t))return l(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||n(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function n(t,e){if(t){if("string"==typeof t)return l(t,e);var i=Object.prototype.toString.call(t).slice(8,-1);return"Object"===i&&t.constructor&&(i=t.constructor.name),"Map"===i||"Set"===i?Array.from(t):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?l(t,e):void 0}}function l(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,o=new Array(e);i<e;i++)o[i]=t[i];return o}function a(t,e){for(var i=0;i<e.length;i++){var o=e[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}var r="{#virtual-select-none-option#}",p={13:"onEnterPress",27:"onEscPress",38:"onUpArrowPress",40:"onDownArrowPress"},c=function(){function i(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i);try{this.setProps(t),this.setDisabledOptions(t.disabledOptions),this.setOptions(t.options),this.render()}catch(t){console.warn("Couldn't initiate Virtual Select"),console.error(t)}}var o,n,l;return o=i,l=[{key:"init",value:function(t){var e=t.ele;if(e){var o=!1;if("string"!=typeof e||(e=document.querySelector(e))){void 0===e.length&&(e=[e],o=!0);var s=[];return e.forEach((function(e){t.ele=e,s.push(new i(t))})),o?s[0]:s}}}},{key:"resetForm",value:function(t){var e=t.target.closest("form");e&&e.querySelectorAll(".vscomp-wrapper").forEach((function(t){t.parentElement.virtualSelect.reset()}))}},{key:"reset",value:function(){this.virtualSelect.reset()}},{key:"setValueMethod",value:function(t,e){this.virtualSelect.setValueMethod(t,e)}},{key:"setOptionsMethod",value:function(t,e){this.virtualSelect.setOptionsMethod(t,e)}},{key:"setDisabledOptionsMethod",value:function(t){this.virtualSelect.setDisabledOptionsMethod(t)}},{key:"toggleSelectAll",value:function(t){this.virtualSelect.toggleAllOptions(t)}},{key:"isAllSelected",value:function(){return this.virtualSelect.isAllSelected}},{key:"addOptionMethod",value:function(t){this.virtualSelect.addOption(t,!0)}},{key:"getNewValueMethod",value:function(){return this.virtualSelect.getNewValue()}},{key:"version",value:function(){return"v1.0.6"}},{key:"getDisplayValueMethod",value:function(){return this.virtualSelect.getDisplayValue()}},{key:"openMethod",value:function(){return this.virtualSelect.openDropbox()}},{key:"closeMethod",value:function(){return this.virtualSelect.closeDropbox()}},{key:"onResizeMethod",value:function(){document.querySelectorAll(".vscomp-wrapper").forEach((function(t){t.parentElement.virtualSelect.onResize()}))}}],(n=[{key:"render",value:function(){var e=this;if(this.$ele){var i="vscomp-wrapper",o=this.getTooltipAttrText("",!this.multiple,!0),s=this.getTooltipAttrText("Clear"),n={"z-index":this.zIndex},l=function(){var t="";return e.additionalClasses&&(t+=" "+e.additionalClasses),e.multiple&&(t+=" multiple",e.disableSelectAll||(t+=" has-select-all")),"top"===e.position&&(t+=" position-top"),e.hideClearButton||(t+=" has-clear-button"),e.keepAlwaysOpen?t+=" keep-always-open opened":t+=" closed",e.showAsPopup?t+=" show-as-popup":e.dropboxWidth&&(n.width=e.dropboxWidth),e.hasSearch&&(t+=" has-search-input"),t};i+=l(),this.guid=t.Utils.generateUUID();var a='<div id="vs-'.concat(this.guid,'" class="vscomp-dropbox-container" ').concat(t.DomUtils.getStyleText(n),'>\n      <div class="vscomp-dropbox">\n        <div class="vscomp-search-wrapper"></div>\n\n        <div class="vscomp-options-container">\n          <div class="vscomp-options-loader"></div>\n\n          <div class="vscomp-options-list">\n            <div class="vscomp-options"></div>\n          </div>\n        </div>\n\n        <div class="vscomp-no-options">').concat(this.noOptionsText,'</div>\n        <div class="vscomp-no-search-results">').concat(this.noSearchResultsText,'</div>\n\n        <span class="vscomp-dropbox-close-button"><i class="vscomp-clear-icon"></i></span>\n      </div>\n    </div>'),r='<div class="'.concat(i,'" tabindex="0">\n        <input type="hidden" name="').concat(this.name,'" class="vscomp-hidden-input">\n\n        <div class="vscomp-toggle-button">\n          <div class="vscomp-value" ').concat(o,">\n            ").concat(this.placeholder,'\n          </div>\n\n          <div class="vscomp-arrow"></div>\n\n          <div class="vscomp-clear-button toggle-button-child" ').concat(s,'>\n            <i class="vscomp-clear-icon"></i>\n          </div>\n        </div>\n\n        ').concat(this.keepAlwaysOpen||!this.appendToBody?a:"","\n\n      </div>");if(this.$ele.innerHTML=r,this.$body=document.querySelector("body"),this.$wrapper=this.$ele.querySelector(".vscomp-wrapper"),this.$toggleButton=this.$ele.querySelector(".vscomp-toggle-button"),this.$clearButton=this.$ele.querySelector(".vscomp-clear-button"),this.$dropboxCloseButton=this.$ele.querySelector(".vscomp-dropbox-close-button"),!this.keepAlwaysOpen&&this.appendToBody){this.$body.append(document.createRange().createContextualFragment(a)),this.$dropboxContainer=document.querySelector("#vs-".concat(this.guid,".vscomp-dropbox-container")),this.$dropboxEl=document.querySelector("#vs-".concat(this.guid));var p="vscomp-wrapper-body";p+=l(),t.DomUtils.addClass(this.$dropboxEl,"".concat(p))}else this.$dropboxContainer=this.$ele.querySelector(".vscomp-dropbox-container"),this.$dropboxEl=this.$ele;this.$search=this.$dropboxEl.querySelector(".vscomp-search-wrapper"),this.$optionsContainer=this.$dropboxEl.querySelector(".vscomp-options-container"),this.$optionsList=this.$dropboxEl.querySelector(".vscomp-options-list"),this.$options=this.$dropboxEl.querySelector(".vscomp-options"),this.$valueText=this.$ele.querySelector(".vscomp-value"),this.$hiddenInput=this.$ele.querySelector(".vscomp-hidden-input"),this.$noOptions=this.$dropboxEl.querySelector(".vscomp-no-options"),this.$noSearchResults=this.$dropboxEl.querySelector(".vscomp-no-search-results"),this.afterRenderWrapper()}}},{key:"renderOptions",value:function(){var e,i=this,o="",s=this.getVisibleOptions(),n="",l="",a=!(!this.markSearchResults||!this.searchValue),p=t.DomUtils.getStyleText({height:this.optionHeight+"px"});if(a&&(e=new RegExp("(".concat(this.searchValue,")"),"gi")),this.multiple&&(n='<span class="checkbox-icon"></span>'),this.allowNewOption){var c=this.getTooltipAttrText("New Option");l='<span class="vscomp-new-option-icon" '.concat(c,"></span>")}s.forEach((function(t){var s=t.label,c="vscomp-option",u=i.getTooltipAttrText("",!0),h=n,d="",v="";t.isFocused&&(c+=" focused"),t.isDisabled&&(c+=" disabled"),t.isGroupTitle?(c+=" group-title",h=""):t.isSelected&&(c+=" selected"),t.isGroupOption&&(c+=" group-option"),t.description&&(v='<div class="vscomp-option-description" '.concat(u,">").concat(t.description,"</div>")),t.isCurrentNew?(c+=" current-new",d+=l):a&&!t.isGroupTitle&&(s=s.replace(e,"<mark>$1</mark>")),o+='<div class="'.concat(c,'" data-value="').concat(t.value,'" data-index="').concat(t.index,'" data-visible-index="').concat(t.visibleIndex,'" ').concat(p,">\n          ").concat(h,'\n          <span class="vscomp-option-text ').concat(t.value===r?"none":"",'" ').concat(u,">\n            ").concat(s,"\n          </span>\n          ").concat(v,"\n          ").concat(d,"\n        </div>")})),this.$options.innerHTML=o;var u=!this.options.length,h=!u&&!s.length;this.allowNewOption||(t.DomUtils.toggleClass(this.$wrapper,"has-no-search-results",h),this.appendToBody&&t.DomUtils.toggleClass(this.$dropboxEl,"has-no-search-results",h)),t.DomUtils.toggleClass(this.$wrapper,"has-no-options",u),this.setOptionsPosition(),this.setOptionsTooltip()}},{key:"renderSearch",value:function(){if(this.hasSearchContainer){var t="",e="";this.multiple&&!this.disableSelectAll&&(t='<span class="vscomp-toggle-all-button">\n          <span class="checkbox-icon vscomp-toggle-all-checkbox"></span>\n          <span class="vscomp-toggle-all-label">'.concat(this.selectAllText,"</span>\n        </span>")),this.hasSearch&&(e='<input type="text" class="vscomp-search-input" placeholder="'.concat(this.searchPlaceholder,'">\n      <span class="vscomp-search-clear">&times;</span>'));var i='<div class="vscomp-search-container">\n        '.concat(t,"\n        ").concat(e,"\n      </div>");this.$search.innerHTML=i,this.$searchInput=this.$dropboxEl.querySelector(".vscomp-search-input"),this.$searchClear=this.$dropboxEl.querySelector(".vscomp-search-clear"),this.$toggleAllButton=this.$dropboxEl.querySelector(".vscomp-toggle-all-button"),this.$toggleAllCheckbox=this.$dropboxEl.querySelector(".vscomp-toggle-all-checkbox"),this.addEvent(this.$searchInput,"keyup change","onSearch"),this.addEvent(this.$searchClear,"click","onSearchClear"),this.addEvent(this.$toggleAllButton,"click","onToggleAllOptions")}}},{key:"addEvents",value:function(){this.addEvent(document,"click","onDocumentClick"),this.addEvent(this.$wrapper,"keydown","onKeyDown"),this.addEvent(this.$toggleButton,"click","onToggleButtonClick"),this.addEvent(this.$clearButton,"click","onClearButtonClick"),this.addEvent(this.$dropboxContainer,"click","onDropboxContainerClick"),this.addEvent(this.$dropboxCloseButton,"click","onDropboxCloseButtonClick"),this.addEvent(this.$optionsContainer,"scroll","onOptionsScroll"),this.addEvent(this.$options,"click","onOptionsClick"),this.addEvent(this.$options,"mouseover","onOptionsMouseOver"),this.addEvent(this.$options,"touchmove","onOptionsTouchMove")}},{key:"addEvent",value:function(e,i,o){var s=this;e&&(i=t.Utils.removeArrayEmpty(i.split(" "))).forEach((function(i){var n="".concat(o,"-").concat(i),l=s.events[n];l||(l=s[o].bind(s),s.events[n]=l),(e=t.DomUtils.getElements(e)).forEach((function(t){t.addEventListener(i,l)}))}))}},{key:"dispatchEvent",value:function(e,i){e&&(e=t.DomUtils.getElements(e),setTimeout((function(){e.forEach((function(t){t.dispatchEvent(new Event(i,{bubbles:!0}))}))}),0))}},{key:"onDocumentClick",value:function(t){this.appendToBody&&this.multiple&&this.isOpened()&&t.target.closest("#vs-".concat(this.guid))||t.target.closest(".vscomp-wrapper")!==this.$wrapper&&this.closeDropbox()}},{key:"onKeyDown",value:function(t){var e=t.which||t.keyCode,i=p[e];i&&this[i](t)}},{key:"onEnterPress",value:function(){this.isOpened()?this.selectFocusedOption():this.openDropbox()}},{key:"onEscPress",value:function(){this.isOpened()&&this.closeDropbox()}},{key:"onDownArrowPress",value:function(t){t.preventDefault(),this.isOpened()?this.focusOption("next"):this.openDropbox()}},{key:"onUpArrowPress",value:function(t){t.preventDefault(),this.isOpened()?this.focusOption("previous"):this.openDropbox()}},{key:"onToggleButtonClick",value:function(t){t.target.closest(".toggle-button-child")||this.toggleDropbox()}},{key:"onClearButtonClick",value:function(){this.reset()}},{key:"onOptionsScroll",value:function(){this.setVisibleOptions()}},{key:"onOptionsClick",value:function(t){if(this.selectOption(t.target.closest(".vscomp-option:not(.disabled):not(.group-title)")),this.multiple&&this.showSelectedOptionsFirst)return t.stopPropagation(),!1}},{key:"onDropboxContainerClick",value:function(t){t.target.closest(".vscomp-dropbox")||this.closeDropbox()}},{key:"onDropboxCloseButtonClick",value:function(){this.closeDropbox()}},{key:"onOptionsMouseOver",value:function(t){var e=t.target.closest(".vscomp-option:not(.disabled):not(.group-title)");e&&this.isOpened()&&this.focusOption(null,e)}},{key:"onOptionsTouchMove",value:function(){this.removeOptionFocus()}},{key:"onSearch",value:function(t){t.stopPropagation(),this.setSearchValue(t.target.value,!0)}},{key:"onSearchClear",value:function(){this.setSearchValue(""),this.focusSearchInput()}},{key:"onToggleAllOptions",value:function(){this.toggleAllOptions()}},{key:"onResize",value:function(){this.appendToBody?this.isOpened()&&this.closeDropbox(!0):this.setOptionsContainerHeight(!0)}},{key:"afterRenderWrapper",value:function(){this.$ele.setAttribute("name",this.name),t.DomUtils.addClass(this.$ele,"vscomp-ele"),this.renderSearch(),this.setOptionsHeight(),this.setVisibleOptions(),this.setOptionsContainerHeight(),this.addEvents(),this.setMethods(),this.initialSelectedValue?this.setValueMethod(this.initialSelectedValue,this.silentInitialValueSet):this.autoSelectFirstOption&&this.visibleOptions.length&&this.setValueMethod(this.visibleOptions[0].value,this.silentInitialValueSet)}},{key:"afterSetOptionsContainerHeight",value:function(t){t&&this.showAsPopup&&this.setVisibleOptions()}},{key:"setProps",value:function(e){e=this.setDefaultProps(e),this.setPropsFromElementAttr(e);var i=t.Utils.convertToBoolean;this.$ele=e.ele,this.valueKey=e.valueKey,this.labelKey=e.labelKey,this.descriptionKey=e.descriptionKey,this.aliasKey=e.aliasKey,this.optionHeightText=e.optionHeight,this.optionHeight=parseFloat(this.optionHeightText),this.multiple=i(e.multiple),this.hasSearch=i(e.search),this.hideClearButton=i(e.hideClearButton),this.autoSelectFirstOption=i(e.autoSelectFirstOption),this.hasOptionDescription=i(e.hasOptionDescription),this.silentInitialValueSet=i(e.silentInitialValueSet),this.allowNewOption=i(e.allowNewOption),this.markSearchResults=i(e.markSearchResults),this.showSelectedOptionsFirst=i(e.showSelectedOptionsFirst),this.disableSelectAll=i(e.disableSelectAll),this.keepAlwaysOpen=i(e.keepAlwaysOpen),this.showDropboxAsPopup=i(e.showDropboxAsPopup),this.noOptionsText=e.noOptionsText,this.noSearchResultsText=e.noSearchResultsText,this.selectAllText=e.selectAllText,this.placeholder=e.placeholder,this.position=e.position,this.dropboxWidth=e.dropboxWidth,this.tooltipFontSize=e.tooltipFontSize,this.tooltipAlignment=e.tooltipAlignment,this.tooltipMaxWidth=e.tooltipMaxWidth,this.noOfDisplayValues=parseInt(e.noOfDisplayValues),this.zIndex=parseInt(e.zIndex),this.maxValues=parseInt(e.maxValues),this.name=e.name,this.additionalClasses=e.additionalClasses,this.initialSelectedValue=e.selectedValue,this.popupDropboxBreakpoint=e.popupDropboxBreakpoint,this.onServerSearch=e.onServerSearch,this.searchPlaceholder=e.searchPlaceholder,this.itemsSelectedMessage=e.itemsSelectedMessage,this.allowNoneOption=e.allowNoneOption,this.noneOptionText=e.noneOptionText,this.appendToBody=e.appendToBody,this.selectedValues=[],this.selectedIndexes=[],this.newValues=[],this.events={},this.tooltipEnterDelay=200,this.transitionDuration=250,this.searchValue="",this.searchValueOriginal="",this.isAllSelected=!1,(void 0===e.search&&this.multiple||this.allowNewOption)&&(this.hasSearch=!0),this.maxValues&&(this.disableSelectAll=!0),this.hasServerSearch="function"==typeof this.onServerSearch,this.showAsPopup=this.showDropboxAsPopup&&!this.keepAlwaysOpen&&window.innerWidth<=parseFloat(this.popupDropboxBreakpoint),this.hasSearchContainer=this.hasSearch||this.multiple&&!this.disableSelectAll,this.optionsCount=this.getOptionsCount(e.optionsCount),this.halfOptionsCount=Math.ceil(this.optionsCount/2),this.optionsHeight=this.getOptionsHeight()}},{key:"setDefaultProps",value:function(t){var e={valueKey:"value",labelKey:"label",descriptionKey:"description",aliasKey:"alias",optionsCount:5,noOfDisplayValues:50,optionHeight:"40px",multiple:!1,hideClearButton:!1,autoSelectFirstOption:!1,hasOptionDescription:!1,silentInitialValueSet:!1,disableSelectAll:!1,noOptionsText:"No options found",noSearchResultsText:"No results found",selectAllText:"Select All",placeholder:"Select",position:"auto",zIndex:1,allowNewOption:!1,markSearchResults:!1,tooltipFontSize:"14px",tooltipAlignment:"center",tooltipMaxWidth:"300px",showSelectedOptionsFirst:!1,name:"",additionalClasses:"",keepAlwaysOpen:!1,maxValues:0,showDropboxAsPopup:!0,popupDropboxBreakpoint:"576px",searchPlaceholder:"Search...",itemsSelectedMessage:"selected",allowNoneOption:!1,noneOptionText:"None",appendToBody:!1};return t.hasOptionDescription&&(e.optionsCount=4,e.optionHeight="60px"),Object.assign(e,t)}},{key:"setPropsFromElementAttr",value:function(t){var e=t.ele,i={multiple:"multiple",placeholder:"placeholder",name:"name","data-value-key":"valueKey","data-label-key":"labelKey","data-description-key":"descriptionKey","data-alias-key":"aliasKey","data-search":"search","data-hide-clear-button":"hideClearButton","data-auto-select-first-option":"autoSelectFirstOption","data-has-option-description":"hasOptionDescription","data-options-count":"optionsCount","data-option-height":"optionHeight","data-position":"position","data-no-options-text":"noOptionsText","data-no-search-results-text":"noSearchResultsText","data-select-all-text":"selectAllText","data-silent-initial-value-set":"silentInitialValueSet","data-dropbox-width":"dropboxWidth","data-z-index":"zIndex","data-no-of-display-values":"noOfDisplayValues","data-allow-new-option":"allowNewOption","data-mark-search-results":"markSearchResults","data-tooltip-font-size":"tooltipFontSize","data-tooltip-alignment":"tooltipAlignment","data-tooltip-max-width":"tooltipMaxWidth","data-show-selected-options-first":"showSelectedOptionsFirst","data-disable-select-all":"disableSelectAll","data-keep-always-open":"keepAlwaysOpen","data-max-values":"maxValues","data-additional-classes":"additionalClasses","data-show-dropbox-as-popup":"showDropboxAsPopup","data-popup-dropbox-breakpoint":"popupDropboxBreakpoint"};for(var o in i){var s=e.getAttribute(o);"multiple"!==o||""!==s&&"true"!==s||(s=!0),s&&(t[i[o]]=s)}}},{key:"setMethods",value:function(){var t=this.$ele;t.virtualSelect=this,t.value=this.multiple?[]:"",t.reset=i.reset,t.setValue=i.setValueMethod,t.setOptions=i.setOptionsMethod,t.setDisabledOptions=i.setDisabledOptionsMethod,t.toggleSelectAll=i.toggleSelectAll,t.isAllSelected=i.isAllSelected,t.addOption=i.addOptionMethod,t.getNewValue=i.getNewValueMethod,t.getDisplayValue=i.getDisplayValueMethod,t.open=i.openMethod,t.close=i.closeMethod}},{key:"setValueMethod",value:function(t,e){Array.isArray(t)||(t=[t]),t=t.map((function(t){return t||0==t?t.toString():""}));var i=[],o=[];this.options.forEach((function(e,s){-1===t.indexOf(e.value)||e.isDisabled||e.isGroupTitle?e.isSelected=!1:(e.isSelected=!0,i.push(e.value),o.push(s))})),this.multiple||(i=i[0],o=o[0]),this.beforeValueSet(),this.setValue(i,o,!e),this.afterValueSet()}},{key:"setOptionsMethod",value:function(t,e){var i=t!=this.options;this.setOptions(t),this.afterSetOptions(e,i)}},{key:"setDisabledOptionsMethod",value:function(t){this.setDisabledOptions(t,!0),this.setValueMethod(null),this.setVisibleOptions()}},{key:"setDisabledOptions",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];t=t.map((function(t){return t.toString()})),this.disabledOptions=t,e&&t.length&&this.options.forEach((function(e){return e.isDisabled=-1!==t.indexOf(e.value),e}))}},{key:"setOptions",value:function(e){e||(e=[]);var i=[],o=this.disabledOptions,s=o.length,n=this.valueKey,l=this.labelKey,a=this.descriptionKey,p=this.aliasKey,c=this.hasOptionDescription,u=t.Utils.getString,h=this.getAlias,d=0,v=!1;!this.multiple&&this.allowNoneOption&&e.unshift({value:r,label:this.noneOptionText}),e.forEach((function t(e){var r=u(e[n]),f=e.options,y=!!f,g={index:d,value:r,label:u(e[l]),alias:h(e[p]),isVisible:!0,isGroupTitle:y};if(s&&(g.isDisabled=-1!==o.indexOf(r)),e.isGroupOption&&(g.isGroupOption=!0,g.groupIndex=e.groupIndex),c&&(g.description=u(e[a])),i.push(g),d++,y){var m=g.index;v=!0,f.forEach((function(e){e.isGroupOption=!0,e.groupIndex=m,t(e)}))}})),this.options=i,this.visibleOptionsCount=i.length,this.lastOptionIndex=this.options.length-1,this.newValues=[],this.hasOptionGroup=v,this.setSortedOptions()}},{key:"setServerOptions",value:function(e){this.setOptionsMethod(e,!0),t.DomUtils.removeClass(this.$wrapper,"server-searching")}},{key:"setSortedOptions",value:function(){var t=s(this.options);this.showSelectedOptionsFirst&&this.selectedValues.length&&(t=this.hasOptionGroup?this.sortOptionsGroup(t):this.sortOptions(t)),this.sortedOptions=t}},{key:"setVisibleOptions",value:function(){var t=s(this.sortedOptions),e=2*this.optionsCount,i=this.getVisibleStartIndex(),o=this.getNewOption(),n=i+e-1,l=0;o&&(o.visibleIndex=l,l++),t=t.filter((function(t){var e=!1;return t.isVisible&&!t.isCurrentNew&&(e=l>=i&&l<=n,t.visibleIndex=l,l++),e})),o&&(t=[o].concat(s(t))),this.visibleOptions=t,this.renderOptions()}},{key:"setOptionsPosition",value:function(e){void 0===e&&(e=this.getVisibleStartIndex());var i=e*this.optionHeight;this.$options.style.transform="translate3d(0, ".concat(i,"px, 0)"),t.DomUtils.setData(this.$options,"top",i)}},{key:"setOptionsTooltip",value:function(){var e=this,i=this.getVisibleOptions(),o=this.hasOptionDescription;i.forEach((function(i){var s=e.$dropboxContainer.querySelector('.vscomp-option[data-index="'.concat(i.index,'"]'));t.DomUtils.setData(s.querySelector(".vscomp-option-text"),"tooltip",i.label),o&&t.DomUtils.setData(s.querySelector(".vscomp-option-description"),"tooltip",i.description)}))}},{key:"setValue",value:function(e,i,o){e?Array.isArray(e)?this.selectedValues=s(e):this.selectedValues=[e]:this.selectedValues=[];var n=this.multiple?this.selectedValues:this.selectedValues[0]||"";this.$ele.value=n,this.$hiddenInput.value=n,i?Array.isArray(i)?this.selectedIndexes=s(i):this.selectedIndexes=[i]:this.selectedIndexes=[];var l=this.multiple?this.selectedIndexes:this.selectedIndexes[0]||"";if(this.$ele.index=l,this.$hiddenInput.index=l,this.isMaxValuesSelected=!!(this.maxValues&&this.maxValues<=this.selectedValues.length),this.setValueText(),this.selectedValues&&this.selectedValues[0]===r?t.DomUtils.removeClass(this.$wrapper,"has-value"):t.DomUtils.toggleClass(this.$wrapper,"has-value",t.Utils.isNotEmpty(this.selectedValues)),t.DomUtils.toggleClass(this.$wrapper,"max-value-selected",this.isMaxValuesSelected),o&&this.dispatchEvent(this.$ele,"change"),this.showSelectedOptionsFirst){var a=this.$optionsContainer.scrollTop;this.moveSelectedOptionsFirst(),this.$optionsContainer.scrollTop=a}}},{key:"setValueText",value:function(){var i=[],o=[],s=this.selectedValues,n=s.length,l=this.noOfDisplayValues,a=0;if(this.isAllSelected)this.$valueText.innerHTML="".concat(n," ").concat(this.itemsSelectedMessage);else{var p,c=e(this.options);try{for(c.s();!(p=c.n()).done;){var u=p.value;if(!u.isCurrentNew){if(a>50)break;var h=u.value;if(-1!==s.indexOf(h)){var d=u.label;i.push(d),++a<=l&&o.push('<span class="vscomp-value-tag">'.concat(d,"</span>"))}}}}catch(t){c.e(t)}finally{c.f()}var v=n-l;v>0&&o.push('<span class="vscomp-value-tag more-value-count">+ '.concat(v," more...</span>"));var f=i.join(", ");if(""===f||s&&s[0]===r)this.$valueText.innerHTML=this.placeholder;else if(this.$valueText.innerHTML=f,this.multiple){var y=this.maxValues;if(t.DomUtils.hasEllipsis(this.$valueText)||y){var g="".concat(n);y&&(g+=" / ".concat(y)),this.$valueText.innerHTML="".concat(g," ").concat(this.itemsSelectedMessage)}else o=[]}}t.DomUtils.setData(this.$valueText,"tooltip",o.join(", "))}},{key:"setSearchValue",value:function(e,i,o){if(e!==this.searchValueOriginal||o){i||(this.$searchInput.value=e);var s=e.toLowerCase().trim();if(this.searchValue=s,this.searchValueOriginal=e,t.DomUtils.toggleClass(this.$wrapper,"has-search-value",e),this.appendToBody&&t.DomUtils.toggleClass(this.$dropboxEl,"has-search-value",e),this.hasServerSearch)this.serverSearch(s);else{var n,l=0,a=!1,r=this.isOptionVisible;this.hasOptionGroup&&(n=this.getVisibleOptionGroupsMapping(s)),this.options.forEach((function(t){if(!t.isCurrentNew){var e=r(t,s,a,n);e.isVisible&&l++,a||(a=e.hasExactOption)}})),this.allowNewOption&&(s&&!a?(this.setNewOption(),l++):this.removeNewOption()),this.visibleOptionsCount=l,this.scrollToTop(),this.setOptionsHeight(),this.setVisibleOptions()}}}},{key:"setOptionProp",value:function(t,e,i){this.options[t]&&(this.options[t][e]=i)}},{key:"setOptionsHeight",value:function(){this.$optionsList.style.height=this.optionHeight*this.visibleOptionsCount+"px"}},{key:"setOptionsContainerHeight",value:function(e){var i;e?this.showAsPopup&&(this.optionsCount=this.getOptionsCount(),i=this.getOptionsHeight(),this.optionsHeight=i):(i=this.optionsHeight,this.keepAlwaysOpen&&(t.DomUtils.setStyle(this.$noOptions,"height",i),t.DomUtils.setStyle(this.$noSearchResults,"height",i))),t.DomUtils.setStyle(this.$optionsContainer,"max-height",i),this.afterSetOptionsContainerHeight(e)}},{key:"setDropboxPosition",value:function(){if("auto"===this.position){var e=t.DomUtils.getMoreVisibleSides(this.$wrapper),i=!1;if(this.dropboxWidth){var o=this.$toggleButton.getBoundingClientRect(),s=window.innerWidth,n=parseFloat(this.dropboxWidth),l=o.left+n>s,a=n>o.right;l&&!a&&(i=!0)}if(this.appendToBody){var r=this.$ele.getBoundingClientRect(),p=r.left+window.scrollX,c=r.top+window.scrollY;this.$dropboxEl.style.width="".concat(this.$ele.offsetWidth,"px"),this.$dropboxEl.style.left="".concat(p,"px"),"top"===e.vertical?this.$dropboxEl.style.top="".concat(c-this.$dropboxContainer.offsetHeight-4,"px"):this.$dropboxEl.style.top="".concat(c+this.$ele.offsetHeight+4,"px"),t.DomUtils.toggleClass(this.$dropboxContainer,"position-top","top"===e.vertical),t.DomUtils.toggleClass(this.$dropboxContainer,"position-left",i)}else t.DomUtils.toggleClass(this.$wrapper,"position-top","top"===e.vertical),t.DomUtils.toggleClass(this.$wrapper,"position-left",i)}}},{key:"setNewOption",value:function(){var t=this.searchValueOriginal.trim();if(t){var e=this.getNewOption();if(e){var i=e.index;this.setOptionProp(i,"value",t),this.setOptionProp(i,"label",t)}else{var o={value:t,label:t,isCurrentNew:!0};this.addOption(o)}}}},{key:"setSelectedProp",value:function(){var t=this.selectedValues;this.options.forEach((function(e){-1!==t.indexOf(e.value)&&(e.isSelected=!0)}))}},{key:"getVisibleOptions",value:function(){return this.visibleOptions||[]}},{key:"getValue",value:function(){return this.multiple?this.selectedValues:this.selectedValues[0]}},{key:"getFirstVisibleOptionIndex",value:function(){return Math.ceil(this.$optionsContainer.scrollTop/this.optionHeight)}},{key:"getVisibleStartIndex",value:function(){var t=this.getFirstVisibleOptionIndex()-this.halfOptionsCount;return t<0&&(t=0),t}},{key:"getTooltipAttrText",value:function(e){var i=arguments.length>1&&void 0!==arguments[1]&&arguments[1],o=arguments.length>2&&void 0!==arguments[2]&&arguments[2],s={"data-tooltip":e||"","data-tooltip-enter-delay":this.tooltipEnterDelay,"data-tooltip-z-index":this.zIndex,"data-tooltip-font-size":this.tooltipFontSize,"data-tooltip-alignment":this.tooltipAlignment,"data-tooltip-max-width":this.tooltipMaxWidth,"data-tooltip-ellipsis-only":i,"data-tooltip-allow-html":o};return t.DomUtils.getAttributesText(s)}},{key:"getOptionObj",value:function(e){if(e){var i=t.Utils.getString;return{index:e.index,value:i(e.value),label:i(e.label),description:i(e.description),alias:this.getAlias(e.alias),isCurrentNew:e.isCurrentNew||!1,isVisible:!0}}}},{key:"getNewOption",value:function(){var t=this.options[this.lastOptionIndex];if(t&&t.isCurrentNew)return t}},{key:"getOptionIndex",value:function(t){var e;return t&&this.options.some((function(i){if(i.value==t)return e=i.index,!0})),e}},{key:"getNewValue",value:function(){var t=this.newValues,e=this.selectedValues.filter((function(e){return-1!==t.indexOf(e)}));return this.multiple?e:e[0]}},{key:"getAlias",value:function(t){return t=t?(t=Array.isArray(t)?t.join(","):t.toString().trim()).toLowerCase():""}},{key:"getDisplayValue",value:function(){var t,i=[],o=this.selectedValues,s=e(this.options);try{for(s.s();!(t=s.n()).done;){var n=t.value;-1!==o.indexOf(n.value)&&i.push(n.label)}}catch(t){s.e(t)}finally{s.f()}return this.multiple?i:i[0]||""}},{key:"getVisibleOptionGroupsMapping",value:function(t){var e=this.options,i={},o=this.isOptionVisible;return(e=this.structureOptionGroup(e)).forEach((function(e){i[e.index]=e.options.some((function(e){return o(e,t).isVisible}))})),i}},{key:"getOptionsCount",value:function(t){if(this.showAsPopup){var e=80*window.innerHeight/100-48;this.hasSearchContainer&&(e-=40),t=Math.floor(e/this.optionHeight)}else t=parseInt(t);return t}},{key:"getOptionsHeight",value:function(){return this.optionsCount*this.optionHeight+"px"}},{key:"getSibling",value:function(e,i){var o="next"===i?"nextElementSibling":"previousElementSibling";do{e&&(e=e[o])}while(t.DomUtils.hasClass(e,"disabled")||t.DomUtils.hasClass(e,"group-title"));return e}},{key:"openDropbox",value:function(e){var i=this;this.setDropboxPosition(),t.DomUtils.removeClass(this.$wrapper,"closed"),t.DomUtils.removeClass(this.$dropboxEl,"opened"),setTimeout((function(){t.DomUtils.addClass(i.$wrapper,"opened"),t.DomUtils.addClass(i.$dropboxEl,"opened"),i.dispatchEvent(i.$ele,"opened"),e||(i.moveSelectedOptionsFirst(),t.DomUtils.addClass(i.$wrapper,"focused"),i.showAsPopup?(t.DomUtils.addClass(i.$body,"vscomp-popup-active"),i.isPopupActive=!0):i.focusSearchInput())}),0)}},{key:"closeDropbox",value:function(e){var i=this;if(this.keepAlwaysOpen)this.removeOptionFocus();else{var o=e?0:this.transitionDuration;setTimeout((function(){t.DomUtils.removeClass(i.$wrapper,"opened focused"),t.DomUtils.removeClass(i.$dropboxEl,"opened focused"),i.dispatchEvent(i.$ele,"closed"),i.removeOptionFocus(),e||i.isPopupActive&&(t.DomUtils.removeClass(i.$body,"vscomp-popup-active"),i.isPopupActive=!1)}),0),setTimeout((function(){t.DomUtils.addClass(i.$wrapper,"closed"),t.DomUtils.removeClass(i.$dropboxEl,"closed"),i.appendToBody&&(i.$dropboxEl.style.left="-200px",i.$dropboxEl.style.top="-200px")}),o)}}},{key:"moveSelectedOptionsFirst",value:function(){this.showSelectedOptionsFirst&&(this.setSortedOptions(),this.$optionsContainer.scrollTop&&this.selectedValues.length?this.scrollToTop():this.setVisibleOptions())}},{key:"toggleDropbox",value:function(){this.isOpened()?this.closeDropbox():this.openDropbox()}},{key:"isOpened",value:function(){return t.DomUtils.hasClass(this.$wrapper,"opened")}},{key:"focusSearchInput",value:function(){var t=this.$searchInput;t&&t.focus()}},{key:"focusOption",value:function(e,i){var o,s=this.$dropboxContainer.querySelector(".vscomp-option.focused");if(i)o=i;else if(s)o=this.getSibling(s,e);else{var n=this.getFirstVisibleOptionIndex();o=this.$dropboxContainer.querySelector('.vscomp-option[data-visible-index="'.concat(n,'"]')),(t.DomUtils.hasClass(o,"disabled")||t.DomUtils.hasClass(o,"group-title"))&&(o=this.getSibling(o,"next"))}o&&o!==s&&(s&&t.DomUtils.removeClass(s,"focused"),t.DomUtils.addClass(o,"focused"),this.toggleFocusedProp(t.DomUtils.getData(o,"index"),!0),e&&this.moveFocusedOptionToView(o))}},{key:"moveFocusedOptionToView",value:function(e){if(e||(e=this.$dropboxContainer.querySelector(".vscomp-option.focused")),e){var i,o=this.$optionsContainer.getBoundingClientRect(),s=e.getBoundingClientRect(),n=o.top,l=o.bottom,a=o.height,r=s.top,p=s.bottom,c=s.height,u=e.offsetTop,h=t.DomUtils.getData(this.$options,"top","number");n>r?i=u+h:l<p&&(i=u-a+c+h),void 0!==i&&(this.$optionsContainer.scrollTop=i)}}},{key:"removeOptionFocus",value:function(){var e=this.$dropboxContainer.querySelector(".vscomp-option.focused");e&&(t.DomUtils.removeClass(e,"focused"),this.toggleFocusedProp(null))}},{key:"selectOption",value:function(e){if(e){var i=!t.DomUtils.hasClass(e,"selected");if(i){if(this.multiple&&this.isMaxValuesSelected)return}else if(!this.multiple)return void this.closeDropbox();var o=this.selectedValues,s=this.selectedIndexes,n=t.DomUtils.getData(e,"value"),l=t.DomUtils.getData(e,"index");if(this.toggleSelectedProp(l,i),i){if(this.multiple)o.push(n),s.push(l),this.toggleAllOptionsClass();else{o.length&&this.toggleSelectedProp(this.getOptionIndex(o[0]),!1),o=[n],s=[l];var a=this.$ele.querySelector(".vscomp-option.selected");a&&t.DomUtils.toggleClass(a,"selected",!1),this.closeDropbox()}t.DomUtils.toggleClass(e,"selected")}else this.multiple&&(t.DomUtils.toggleClass(e,"selected"),t.Utils.removeItemFromArray(o,n),t.Utils.removeItemFromArray(s,l),this.toggleAllOptionsClass(!1));t.DomUtils.hasClass(e,"current-new")&&this.beforeSelectNewValue(),this.setValue(o,s,!0),console.log("aaaa")}}},{key:"selectFocusedOption",value:function(){this.selectOption(this.$dropboxContainer.querySelector(".vscomp-option.focused"))}},{key:"toggleAllOptions",value:function(e){if(this.multiple&&!this.disableSelectAll){"boolean"!=typeof e&&(e=!t.DomUtils.hasClass(this.$toggleAllCheckbox,"checked"));var i=[],o=[];this.options.forEach((function(t,s){t.isDisabled||t.isCurrentNew||t.isGroupTitle||(t.isSelected=e,e&&(i.push(t.value),o.push(s)))})),this.toggleAllOptionsClass(e),this.setValue(i,o,!0),this.renderOptions()}}},{key:"toggleAllOptionsClass",value:function(e){"boolean"!=typeof e&&(e=!1,this.options.length&&(e=!this.options.some((function(t){return!t.isSelected&&!t.isDisabled&&!t.isGroupTitle})))),t.DomUtils.toggleClass(this.$toggleAllCheckbox,"checked",e),this.isAllSelected=e}},{key:"toggleFocusedProp",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this.focusedOptionIndex&&this.setOptionProp(this.focusedOptionIndex,"isFocused",!1),this.setOptionProp(t,"isFocused",e),this.focusedOptionIndex=t}},{key:"toggleSelectedProp",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this.setOptionProp(t,"isSelected",e)}},{key:"scrollToTop",value:function(){var t=!this.isOpened();t&&this.openDropbox(!0),this.$optionsContainer.scrollTop>0&&(this.$optionsContainer.scrollTop=0),t&&this.closeDropbox(!0)}},{key:"reset",value:function(){this.options.forEach((function(t){t.isSelected=!1})),this.beforeValueSet(!0),this.setValue(null,null,!0),this.afterValueSet()}},{key:"beforeValueSet",value:function(t){this.toggleAllOptionsClass(!t&&void 0)}},{key:"afterValueSet",value:function(){this.scrollToTop(),this.setSearchValue(""),this.renderOptions()}},{key:"afterSetOptions",value:function(t){var e=this.searchValue;t&&(this.isAllSelected?this.toggleAllOptions(this.isAllSelected):this.setValueMethod(this.selectedValues,this.silentInitialValueSet),this.search&&this.setSearchValue(e,!1,!0)),this.setOptionsHeight(),this.setVisibleOptions(),t||this.reset()}},{key:"addOption",value:function(t,e){if(t){this.lastOptionIndex++,t.index=this.lastOptionIndex;var i=this.getOptionObj(t);this.options.push(i),this.sortedOptions.push(i),e&&(this.visibleOptionsCount++,this.afterSetOptions())}}},{key:"removeOption",value:function(t){(t||0==t)&&(this.options.splice(t,1),this.lastOptionIndex--)}},{key:"removeNewOption",value:function(){var t=this.getNewOption();t&&this.removeOption(t.index)}},{key:"beforeSelectNewValue",value:function(){var t=this,e=this.getNewOption(),i=e.index;this.newValues.push(e.value),this.setOptionProp(i,"isCurrentNew",!1),this.setOptionProp(i,"isNew",!0),setTimeout((function(){t.setSearchValue(""),t.focusSearchInput()}),0)}},{key:"sortOptions",value:function(t){return t.sort((function(t,e){return e.value===r&&t.value!==r?0:t.isSelected||e.isSelected?t.isSelected&&(!e.isSelected||t.index<e.index)?-1:1:0}))}},{key:"sortOptionsGroup",value:function(t){var e=this.sortOptions;return(t=this.structureOptionGroup(t)).forEach((function(t){var i=t.options;t.isSelected=i.some((function(t){return t.isSelected})),t.isSelected&&e(i)})),e(t),this.destructureOptionGroup(t)}},{key:"isOptionVisible",value:function(t,e,i,o){var s=t.label.toLowerCase(),n=t.description,l=t.alias,a=-1!==s.indexOf(e);return t.isGroupTitle&&(a=o[t.index]),l&&!a&&(a=-1!==l.indexOf(e)),n&&!a&&(a=-1!==n.toLowerCase().indexOf(e)),t.isVisible=a,i||(i=s===e),{isVisible:a,hasExactOption:i}}},{key:"structureOptionGroup",value:function(t){var e=[],i={};return t.forEach((function(t){if(t.isGroupTitle){var o=[];t.options=o,i[t.index]=o,e.push(t)}})),t.forEach((function(t){t.isGroupOption&&i[t.groupIndex].push(t)})),e}},{key:"destructureOptionGroup",value:function(t){var e=[];return t.forEach((function(t){e.push(t),e=e.concat(t.options)})),e}},{key:"serverSearch",value:function(e){t.DomUtils.removeClass(this.$wrapper,"has-no-options"),t.DomUtils.addClass(this.$wrapper,"server-searching"),this.onServerSearch(e,this)}}])&&a(o.prototype,n),l&&a(o,l),i}();document.addEventListener("reset",c.resetForm),window.addEventListener("resize",c.onResizeMethod),window.VirtualSelect=c})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,