/*!
 * Virtual Select v1.0.6
 * https://sa-si-dev.github.io/virtual-select
 * Licensed under MIT (https://github.com/sa-si-dev/virtual-select/blob/master/LICENSE)
 */(()=>{"use strict";var t={"./src/utils/dom-utils.js":
/*!********************************!*\
  !*** ./src/utils/dom-utils.js ***!
  \********************************/(t,e,i)=>{function o(t){return function(t){if(Array.isArray(t))return s(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return s(t,e);var i=Object.prototype.toString.call(t).slice(8,-1);"Object"===i&&t.constructor&&(i=t.constructor.name);if("Map"===i||"Set"===i)return Array.from(t);if("Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return s(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,o=new Array(e);i<e;i++)o[i]=t[i];return o}function n(t,e){for(var i=0;i<e.length;i++){var o=e[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}i.r(e),i.d(e,{DomUtils:()=>l});var l=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,i,s;return e=t,s=[{key:"addClass",value:function(t,e){t&&(e=e.split(" "),this.getElements(t).forEach((function(t){var i;(i=t.classList).add.apply(i,o(e))})))}},{key:"removeClass",value:function(t,e){t&&(e=e.split(" "),this.getElements(t).forEach((function(t){var i;(i=t.classList).remove.apply(i,o(e))})))}},{key:"toggleClass",value:function(t,e,i){var o;if(t)return void 0!==i&&(i=Boolean(i)),this.getElements(t).forEach((function(t){o=t.classList.toggle(e,i)})),o}},{key:"hasClass",value:function(t,e){return!!t&&t.classList.contains(e)}},{key:"hasEllipsis",value:function(t){return!!t&&t.scrollWidth>t.offsetWidth}},{key:"getMoreVisibleSides",value:function(t){if(!t)return{};var e=t.getBoundingClientRect(),i=window.innerWidth,o=window.innerHeight,s=e.left,n=e.top;return{horizontal:s>i-s-e.width?"left":"right",vertical:n>o-n-e.height?"top":"bottom"}}},{key:"getData",value:function(t,e,i){if(t){var o=t?t.dataset[e]:"";return"number"===i?o=parseFloat(o)||0:"true"===o?o=!0:"false"===o&&(o=!1),o}}},{key:"setData",value:function(t,e,i){t&&(t.dataset[e]=i)}},{key:"setStyle",value:function(t,e,i){t&&(t.style[e]=i)}},{key:"getElements",value:function(t){if(t)return void 0===t.length&&(t=[t]),t}},{key:"getStyleText",value:function(t,e){var i="";for(var o in t)i+="".concat(o,": ").concat(t[o],";");return i&&!e&&(i='style="'.concat(i,'"')),i}},{key:"getAttributesText",value:function(t){var e="";if(!t)return e;for(var i in t){var o=t[i];void 0!==o&&(e+=" ".concat(i,'="').concat(o,'" '))}return e}}],(i=null)&&n(e.prototype,i),s&&n(e,s),t}()},"./src/utils/index.js":
/*!****************************!*\
  !*** ./src/utils/index.js ***!
  \****************************/(t,e,i)=>{i.r(e),i.d(e,{Utils:()=>o.Utils,DomUtils:()=>s.DomUtils});var o=i(/*! ./utils */"./src/utils/utils.js"),s=i(/*! ./dom-utils */"./src/utils/dom-utils.js")},"./src/utils/utils.js":
/*!****************************!*\
  !*** ./src/utils/utils.js ***!
  \****************************/(t,e,i)=>{function o(t){return function(t){if(Array.isArray(t))return s(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||function(t,e){if(!t)return;if("string"==typeof t)return s(t,e);var i=Object.prototype.toString.call(t).slice(8,-1);"Object"===i&&t.constructor&&(i=t.constructor.name);if("Map"===i||"Set"===i)return Array.from(t);if("Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i))return s(t,e)}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function s(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,o=new Array(e);i<e;i++)o[i]=t[i];return o}function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function l(t,e){for(var i=0;i<e.length;i++){var o=e[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}i.r(e),i.d(e,{Utils:()=>a});var a=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}var e,i,s;return e=t,s=[{key:"getString",value:function(t){return t||0===t?t.toString():""}},{key:"convertToBoolean",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];return t=!0===t||"true"===t||!1!==t&&"false"!==t&&e}},{key:"isEmpty",value:function(t){var e=!1;return t?Array.isArray(t)?0===t.length&&(e=!0):"object"===n(t)&&0===Object.keys(t).length&&(e=!0):e=!0,e}},{key:"isNotEmpty",value:function(t){return!this.isEmpty(t)}},{key:"removeItemFromArray",value:function(t,e,i){if(!Array.isArray(t)||!t.length||!e)return t;i&&(t=o(t));var s=t.indexOf(e);return-1!==s&&t.splice(s,1),t}},{key:"removeArrayEmpty",value:function(t){return Array.isArray(t)&&t.length?t.filter((function(t){return!!t})):[]}}],(i=null)&&l(e.prototype,i),s&&l(e,s),t}()}},e={};function i(o){if(e[o])return e[o].exports;var s=e[o]={exports:{}};return t[o](s,s.exports,i),s.exports}i.d=(t,e)=>{for(var o in e)i.o(e,o)&&!i.o(t,o)&&Object.defineProperty(t,o,{enumerable:!0,get:e[o]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var o={};(()=>{
/*!*******************************!*\
  !*** ./src/virtual-select.js ***!
  \*******************************/
i.r(o),i.d(o,{VirtualSelect:()=>u});var t=i(/*! ./utils */"./src/utils/index.js");function e(t,e){var i;if("undefined"==typeof Symbol||null==t[Symbol.iterator]){if(Array.isArray(t)||(i=n(t))||e&&t&&"number"==typeof t.length){i&&(t=i);var o=0,s=function(){};return{s,n:function(){return o>=t.length?{done:!0}:{done:!1,value:t[o++]}},e:function(t){throw t},f:s}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var l,a=!0,r=!1;return{s:function(){i=t[Symbol.iterator]()},n:function(){var t=i.next();return a=t.done,t},e:function(t){r=!0,l=t},f:function(){try{a||null==i.return||i.return()}finally{if(r)throw l}}}}function s(t){return function(t){if(Array.isArray(t))return l(t)}(t)||function(t){if("undefined"!=typeof Symbol&&Symbol.iterator in Object(t))return Array.from(t)}(t)||n(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function n(t,e){if(t){if("string"==typeof t)return l(t,e);var i=Object.prototype.toString.call(t).slice(8,-1);return"Object"===i&&t.constructor&&(i=t.constructor.name),"Map"===i||"Set"===i?Array.from(t):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?l(t,e):void 0}}function l(t,e){(null==e||e>t.length)&&(e=t.length);for(var i=0,o=new Array(e);i<e;i++)o[i]=t[i];return o}function a(t,e){for(var i=0;i<e.length;i++){var o=e[i];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}var r="{#virtual-select-none-option#}",p={13:"onEnterPress",27:"onEscPress",38:"onUpArrowPress",40:"onDownArrowPress"},u=function(){function i(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,i);try{this.setProps(t),this.setDisabledOptions(t.disabledOptions),this.setOptions(t.options),this.render()}catch(t){console.warn("Couldn't initiate Virtual Select"),console.error(t)}}var o,n,l;return o=i,l=[{key:"init",value:function(t){var e=t.ele;if(e){var o=!1;if("string"!=typeof e||(e=document.querySelector(e))){void 0===e.length&&(e=[e],o=!0);var s=[];return e.forEach((function(e){t.ele=e,s.push(new i(t))})),o?s[0]:s}}}},{key:"resetForm",value:function(t){var e=t.target.closest("form");e&&e.querySelectorAll(".vscomp-wrapper").forEach((function(t){t.parentElement.virtualSelect.reset()}))}},{key:"reset",value:function(){this.virtualSelect.reset()}},{key:"setValueMethod",value:function(t,e){this.virtualSelect.setValueMethod(t,e)}},{key:"setOptionsMethod",value:function(t){this.virtualSelect.setOptionsMethod(t)}},{key:"setDisabledOptionsMethod",value:function(t){this.virtualSelect.setDisabledOptionsMethod(t)}},{key:"toggleSelectAll",value:function(t){this.virtualSelect.toggleAllOptions(t)}},{key:"isAllSelected",value:function(){return this.virtualSelect.isAllSelected}},{key:"addOptionMethod",value:function(t){this.virtualSelect.addOption(t,!0)}},{key:"getNewValueMethod",value:function(){return this.virtualSelect.getNewValue()}},{key:"version",value:function(){return"v1.0.6"}},{key:"getDisplayValueMethod",value:function(){return this.virtualSelect.getDisplayValue()}},{key:"openMethod",value:function(){return this.virtualSelect.openDropbox()}},{key:"closeMethod",value:function(){return this.virtualSelect.closeDropbox()}},{key:"onResizeMethod",value:function(){document.querySelectorAll(".vscomp-wrapper").forEach((function(t){t.parentElement.virtualSelect.onResize()}))}}],(n=[{key:"render",value:function(){if(this.$ele){var e="vscomp-wrapper",i=this.getTooltipAttrText("",!this.multiple,!0),o=this.getTooltipAttrText("Clear"),s={"z-index":this.zIndex};this.additionalClasses&&(e+=" "+this.additionalClasses),this.multiple&&(e+=" multiple",this.disableSelectAll||(e+=" has-select-all")),"top"===this.position&&(e+=" position-top"),this.hideClearButton||(e+=" has-clear-button"),this.keepAlwaysOpen?e+=" keep-always-open opened":e+=" closed",this.showAsPopup?e+=" show-as-popup":this.dropboxWidth&&(s.width=this.dropboxWidth),this.hasSearch&&(e+=" has-search-input");var n='<div class="'.concat(e,'" tabindex="0">\n        <input type="hidden" name="').concat(this.name,'" class="vscomp-hidden-input">\n\n        <div class="vscomp-toggle-button">\n          <div class="vscomp-value" ').concat(i,">\n            ").concat(this.placeholder,'\n          </div>\n\n          <div class="vscomp-arrow"></div>\n\n          <div class="vscomp-clear-button toggle-button-child" ').concat(o,'>\n            <i class="vscomp-clear-icon"></i>\n          </div>\n        </div>\n\n        <div class="vscomp-dropbox-container" ').concat(t.DomUtils.getStyleText(s),'>\n          <div class="vscomp-dropbox">\n            <div class="vscomp-search-wrapper"></div>\n\n            <div class="vscomp-options-container">\n              <div class="vscomp-options-loader"></div>\n\n              <div class="vscomp-options-list">\n                <div class="vscomp-options"></div>\n              </div>\n            </div>\n\n            <div class="vscomp-no-options">').concat(this.noOptionsText,'</div>\n            <div class="vscomp-no-search-results">').concat(this.noSearchResultsText,'</div>\n\n            <span class="vscomp-dropbox-close-button"><i class="vscomp-clear-icon"></i></span>\n          </div>\n        </div>\n      </div>');this.$ele.innerHTML=n,this.$body=document.querySelector("body"),this.$wrapper=this.$ele.querySelector(".vscomp-wrapper"),this.$toggleButton=this.$ele.querySelector(".vscomp-toggle-button"),this.$clearButton=this.$ele.querySelector(".vscomp-clear-button"),this.$dropboxContainer=this.$ele.querySelector(".vscomp-dropbox-container"),this.$dropboxCloseButton=this.$ele.querySelector(".vscomp-dropbox-close-button"),this.$search=this.$ele.querySelector(".vscomp-search-wrapper"),this.$optionsContainer=this.$ele.querySelector(".vscomp-options-container"),this.$optionsList=this.$ele.querySelector(".vscomp-options-list"),this.$options=this.$ele.querySelector(".vscomp-options"),this.$valueText=this.$ele.querySelector(".vscomp-value"),this.$hiddenInput=this.$ele.querySelector(".vscomp-hidden-input"),this.$noOptions=this.$ele.querySelector(".vscomp-no-options"),this.$noSearchResults=this.$ele.querySelector(".vscomp-no-search-results"),this.afterRenderWrapper()}}},{key:"renderOptions",value:function(){var e,i=this,o="",s=this.getVisibleOptions(),n="",l="",a=!(!this.markSearchResults||!this.searchValue),p=t.DomUtils.getStyleText({height:this.optionHeight+"px"});if(a&&(e=new RegExp("(".concat(this.searchValue,")"),"gi")),this.multiple&&(n='<span class="checkbox-icon"></span>'),this.allowNewOption){var u=this.getTooltipAttrText("New Option");l='<span class="vscomp-new-option-icon" '.concat(u,"></span>")}s.forEach((function(t){var s=t.label,u="vscomp-option",c=i.getTooltipAttrText("",!0),h=n,d="",v="";t.isFocused&&(u+=" focused"),t.isDisabled&&(u+=" disabled"),t.isGroupTitle?(u+=" group-title",h=""):t.isSelected&&(u+=" selected"),t.isGroupOption&&(u+=" group-option"),t.description&&(v='<div class="vscomp-option-description" '.concat(c,">").concat(t.description,"</div>")),t.isCurrentNew?(u+=" current-new",d+=l):a&&!t.isGroupTitle&&(s=s.replace(e,"<mark>$1</mark>")),o+='<div class="'.concat(u,'" data-value="').concat(t.value,'" data-index="').concat(t.index,'" data-visible-index="').concat(t.visibleIndex,'" ').concat(p,">\n          ").concat(h,'\n          <span class="vscomp-option-text ').concat(t.value===r?"none":"",'" ').concat(c,">\n            ").concat(s,"\n          </span>\n          ").concat(v,"\n          ").concat(d,"\n        </div>")})),this.$options.innerHTML=o;var c=!this.options.length,h=!c&&!s.length;this.allowNewOption||t.DomUtils.toggleClass(this.$wrapper,"has-no-search-results",h),t.DomUtils.toggleClass(this.$wrapper,"has-no-options",c),this.setOptionsPosition(),this.setOptionsTooltip()}},{key:"renderSearch",value:function(){if(this.hasSearchContainer){var t="",e="";this.multiple&&!this.disableSelectAll&&(t='<span class="vscomp-toggle-all-button">\n          <span class="checkbox-icon vscomp-toggle-all-checkbox"></span>\n          <span class="vscomp-toggle-all-label">'.concat(this.selectAllText,"</span>\n        </span>")),this.hasSearch&&(e='<input type="text" class="vscomp-search-input" placeholder="'.concat(this.searchPlaceholder,'">\n      <span class="vscomp-search-clear">&times;</span>'));var i='<div class="vscomp-search-container">\n        '.concat(t,"\n        ").concat(e,"\n      </div>");this.$search.innerHTML=i,this.$searchInput=this.$ele.querySelector(".vscomp-search-input"),this.$searchClear=this.$ele.querySelector(".vscomp-search-clear"),this.$toggleAllButton=this.$ele.querySelector(".vscomp-toggle-all-button"),this.$toggleAllCheckbox=this.$ele.querySelector(".vscomp-toggle-all-checkbox"),this.addEvent(this.$searchInput,"keyup change","onSearch"),this.addEvent(this.$searchClear,"click","onSearchClear"),this.addEvent(this.$toggleAllButton,"click","onToggleAllOptions")}}},{key:"addEvents",value:function(){this.addEvent(document,"click","onDocumentClick"),this.addEvent(this.$wrapper,"keydown","onKeyDown"),this.addEvent(this.$toggleButton,"click","onToggleButtonClick"),this.addEvent(this.$clearButton,"click","onClearButtonClick"),this.addEvent(this.$dropboxContainer,"click","onDropboxContainerClick"),this.addEvent(this.$dropboxCloseButton,"click","onDropboxCloseButtonClick"),this.addEvent(this.$optionsContainer,"scroll","onOptionsScroll"),this.addEvent(this.$options,"click","onOptionsClick"),this.addEvent(this.$options,"mouseover","onOptionsMouseOver"),this.addEvent(this.$options,"touchmove","onOptionsTouchMove")}},{key:"addEvent",value:function(e,i,o){var s=this;e&&(i=t.Utils.removeArrayEmpty(i.split(" "))).forEach((function(i){var n="".concat(o,"-").concat(i),l=s.events[n];l||(l=s[o].bind(s),s.events[n]=l),(e=t.DomUtils.getElements(e)).forEach((function(t){t.addEventListener(i,l)}))}))}},{key:"dispatchEvent",value:function(e,i){e&&(e=t.DomUtils.getElements(e),setTimeout((function(){e.forEach((function(t){t.dispatchEvent(new Event(i,{bubbles:!0}))}))}),0))}},{key:"onDocumentClick",value:function(t){t.target.closest(".vscomp-wrapper")!==this.$wrapper&&this.closeDropbox()}},{key:"onKeyDown",value:function(t){var e=t.which||t.keyCode,i=p[e];i&&this[i](t)}},{key:"onEnterPress",value:function(){this.isOpened()?this.selectFocusedOption():this.openDropbox()}},{key:"onEscPress",value:function(){this.isOpened()&&this.closeDropbox()}},{key:"onDownArrowPress",value:function(t){t.preventDefault(),this.isOpened()?this.focusOption("next"):this.openDropbox()}},{key:"onUpArrowPress",value:function(t){t.preventDefault(),this.isOpened()?this.focusOption("previous"):this.openDropbox()}},{key:"onToggleButtonClick",value:function(t){t.target.closest(".toggle-button-child")||this.toggleDropbox()}},{key:"onClearButtonClick",value:function(){this.reset()}},{key:"onOptionsScroll",value:function(){this.setVisibleOptions()}},{key:"onOptionsClick",value:function(t){this.selectOption(t.target.closest(".vscomp-option:not(.disabled):not(.group-title)"))}},{key:"onDropboxContainerClick",value:function(t){t.target.closest(".vscomp-dropbox")||this.closeDropbox()}},{key:"onDropboxCloseButtonClick",value:function(){this.closeDropbox()}},{key:"onOptionsMouseOver",value:function(t){var e=t.target.closest(".vscomp-option:not(.disabled):not(.group-title)");e&&this.isOpened()&&this.focusOption(null,e)}},{key:"onOptionsTouchMove",value:function(){this.removeOptionFocus()}},{key:"onSearch",value:function(t){t.stopPropagation(),this.setSearchValue(t.target.value,!0)}},{key:"onSearchClear",value:function(){this.setSearchValue(""),this.focusSearchInput()}},{key:"onToggleAllOptions",value:function(){this.toggleAllOptions()}},{key:"onResize",value:function(){this.setOptionsContainerHeight(!0)}},{key:"afterRenderWrapper",value:function(){this.$ele.setAttribute("name",this.name),t.DomUtils.addClass(this.$ele,"vscomp-ele"),this.renderSearch(),this.setOptionsHeight(),this.setVisibleOptions(),this.setOptionsContainerHeight(),this.addEvents(),this.setMethods(),this.initialSelectedValue?this.setValueMethod(this.initialSelectedValue,this.silentInitialValueSet):this.autoSelectFirstOption&&this.visibleOptions.length&&this.setValueMethod(this.visibleOptions[0].value,this.silentInitialValueSet)}},{key:"afterSetOptionsContainerHeight",value:function(t){t&&this.showAsPopup&&this.setVisibleOptions()}},{key:"setProps",value:function(e){e=this.setDefaultProps(e),this.setPropsFromElementAttr(e);var i=t.Utils.convertToBoolean;this.$ele=e.ele,this.valueKey=e.valueKey,this.labelKey=e.labelKey,this.descriptionKey=e.descriptionKey,this.aliasKey=e.aliasKey,this.optionHeightText=e.optionHeight,this.optionHeight=parseFloat(this.optionHeightText),this.multiple=i(e.multiple),this.hasSearch=i(e.search),this.hideClearButton=i(e.hideClearButton),this.autoSelectFirstOption=i(e.autoSelectFirstOption),this.hasOptionDescription=i(e.hasOptionDescription),this.silentInitialValueSet=i(e.silentInitialValueSet),this.allowNewOption=i(e.allowNewOption),this.markSearchResults=i(e.markSearchResults),this.showSelectedOptionsFirst=i(e.showSelectedOptionsFirst),this.disableSelectAll=i(e.disableSelectAll),this.keepAlwaysOpen=i(e.keepAlwaysOpen),this.showDropboxAsPopup=i(e.showDropboxAsPopup),this.noOptionsText=e.noOptionsText,this.noSearchResultsText=e.noSearchResultsText,this.selectAllText=e.selectAllText,this.placeholder=e.placeholder,this.position=e.position,this.dropboxWidth=e.dropboxWidth,this.tooltipFontSize=e.tooltipFontSize,this.tooltipAlignment=e.tooltipAlignment,this.tooltipMaxWidth=e.tooltipMaxWidth,this.noOfDisplayValues=parseInt(e.noOfDisplayValues),this.zIndex=parseInt(e.zIndex),this.maxValues=parseInt(e.maxValues),this.name=e.name,this.additionalClasses=e.additionalClasses,this.initialSelectedValue=e.selectedValue,this.popupDropboxBreakpoint=e.popupDropboxBreakpoint,this.onServerSearch=e.onServerSearch,this.searchPlaceholder=e.searchPlaceholder,this.itemsSelectedMessage=e.itemsSelectedMessage,this.allowNoneOption=e.allowNoneOption,this.noneOptionText=e.noneOptionText,this.selectedValues=[],this.selectedIndexes=[],this.newValues=[],this.events={},this.tooltipEnterDelay=200,this.transitionDuration=250,this.searchValue="",this.searchValueOriginal="",this.isAllSelected=!1,(void 0===e.search&&this.multiple||this.allowNewOption)&&(this.hasSearch=!0),this.maxValues&&(this.disableSelectAll=!0),this.hasServerSearch="function"==typeof this.onServerSearch,this.showAsPopup=this.showDropboxAsPopup&&!this.keepAlwaysOpen&&window.innerWidth<=parseFloat(this.popupDropboxBreakpoint),this.hasSearchContainer=this.hasSearch||this.multiple&&!this.disableSelectAll,this.optionsCount=this.getOptionsCount(e.optionsCount),this.halfOptionsCount=Math.ceil(this.optionsCount/2),this.optionsHeight=this.getOptionsHeight()}},{key:"setDefaultProps",value:function(t){var e={valueKey:"value",labelKey:"label",descriptionKey:"description",aliasKey:"alias",optionsCount:5,noOfDisplayValues:50,optionHeight:"40px",multiple:!1,hideClearButton:!1,autoSelectFirstOption:!1,hasOptionDescription:!1,silentInitialValueSet:!1,disableSelectAll:!1,noOptionsText:"No options found",noSearchResultsText:"No results found",selectAllText:"Select All",placeholder:"Select",position:"auto",zIndex:1,allowNewOption:!1,markSearchResults:!1,tooltipFontSize:"14px",tooltipAlignment:"center",tooltipMaxWidth:"300px",showSelectedOptionsFirst:!1,name:"",additionalClasses:"",keepAlwaysOpen:!1,maxValues:0,showDropboxAsPopup:!0,popupDropboxBreakpoint:"576px",searchPlaceholder:"Search...",itemsSelectedMessage:"selected",allowNoneOption:!1,noneOptionText:"None"};return t.hasOptionDescription&&(e.optionsCount=4,e.optionHeight="60px"),Object.assign(e,t)}},{key:"setPropsFromElementAttr",value:function(t){var e=t.ele,i={multiple:"multiple",placeholder:"placeholder",name:"name","data-value-key":"valueKey","data-label-key":"labelKey","data-description-key":"descriptionKey","data-alias-key":"aliasKey","data-search":"search","data-hide-clear-button":"hideClearButton","data-auto-select-first-option":"autoSelectFirstOption","data-has-option-description":"hasOptionDescription","data-options-count":"optionsCount","data-option-height":"optionHeight","data-position":"position","data-no-options-text":"noOptionsText","data-no-search-results-text":"noSearchResultsText","data-select-all-text":"selectAllText","data-silent-initial-value-set":"silentInitialValueSet","data-dropbox-width":"dropboxWidth","data-z-index":"zIndex","data-no-of-display-values":"noOfDisplayValues","data-allow-new-option":"allowNewOption","data-mark-search-results":"markSearchResults","data-tooltip-font-size":"tooltipFontSize","data-tooltip-alignment":"tooltipAlignment","data-tooltip-max-width":"tooltipMaxWidth","data-show-selected-options-first":"showSelectedOptionsFirst","data-disable-select-all":"disableSelectAll","data-keep-always-open":"keepAlwaysOpen","data-max-values":"maxValues","data-additional-classes":"additionalClasses","data-show-dropbox-as-popup":"showDropboxAsPopup","data-popup-dropbox-breakpoint":"popupDropboxBreakpoint"};for(var o in i){var s=e.getAttribute(o);"multiple"!==o||""!==s&&"true"!==s||(s=!0),s&&(t[i[o]]=s)}}},{key:"setMethods",value:function(){var t=this.$ele;t.virtualSelect=this,t.value=this.multiple?[]:"",t.reset=i.reset,t.setValue=i.setValueMethod,t.setOptions=i.setOptionsMethod,t.setDisabledOptions=i.setDisabledOptionsMethod,t.toggleSelectAll=i.toggleSelectAll,t.isAllSelected=i.isAllSelected,t.addOption=i.addOptionMethod,t.getNewValue=i.getNewValueMethod,t.getDisplayValue=i.getDisplayValueMethod,t.open=i.openMethod,t.close=i.closeMethod}},{key:"setValueMethod",value:function(t,e){Array.isArray(t)||(t=[t]),t=t.map((function(t){return t||0==t?t.toString():""}));var i=[],o=[];this.options.forEach((function(e,s){-1===t.indexOf(e.value)||e.isDisabled||e.isGroupTitle?e.isSelected=!1:(e.isSelected=!0,i.push(e.value),o.push(s))})),this.multiple||(i=i[0],o=o[0]),this.beforeValueSet(),this.setValue(i,o,!e),this.afterValueSet()}},{key:"setOptionsMethod",value:function(t,e){this.setOptions(t),this.afterSetOptions(e)}},{key:"setDisabledOptionsMethod",value:function(t){this.setDisabledOptions(t,!0),this.setValueMethod(null),this.setVisibleOptions()}},{key:"setDisabledOptions",value:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];t=t.map((function(t){return t.toString()})),this.disabledOptions=t,e&&t.length&&this.options.forEach((function(e){return e.isDisabled=-1!==t.indexOf(e.value),e}))}},{key:"setOptions",value:function(e){e||(e=[]);var i=[],o=this.disabledOptions,s=o.length,n=this.valueKey,l=this.labelKey,a=this.descriptionKey,p=this.aliasKey,u=this.hasOptionDescription,c=t.Utils.getString,h=this.getAlias,d=0,v=!1;!this.multiple&&this.allowNoneOption&&e.unshift({value:r,label:this.noneOptionText}),e.forEach((function t(e){var r=c(e[n]),f=e.options,y=!!f,m={index:d,value:r,label:c(e[l]),alias:h(e[p]),isVisible:!0,isGroupTitle:y};if(s&&(m.isDisabled=-1!==o.indexOf(r)),e.isGroupOption&&(m.isGroupOption=!0,m.groupIndex=e.groupIndex),u&&(m.description=c(e[a])),i.push(m),d++,y){var g=m.index;v=!0,f.forEach((function(e){e.isGroupOption=!0,e.groupIndex=g,t(e)}))}})),this.options=i,this.visibleOptionsCount=i.length,this.lastOptionIndex=this.options.length-1,this.newValues=[],this.hasOptionGroup=v,this.setSortedOptions()}},{key:"setServerOptions",value:function(e){this.setOptionsMethod(e,!0),t.DomUtils.removeClass(this.$wrapper,"server-searching")}},{key:"setSortedOptions",value:function(){var t=s(this.options);this.showSelectedOptionsFirst&&this.selectedValues.length&&(t=this.hasOptionGroup?this.sortOptionsGroup(t):this.sortOptions(t)),this.sortedOptions=t}},{key:"setVisibleOptions",value:function(){var t=s(this.sortedOptions),e=2*this.optionsCount,i=this.getVisibleStartIndex(),o=this.getNewOption(),n=i+e-1,l=0;o&&(o.visibleIndex=l,l++),t=t.filter((function(t){var e=!1;return t.isVisible&&!t.isCurrentNew&&(e=l>=i&&l<=n,t.visibleIndex=l,l++),e})),o&&(t=[o].concat(s(t))),this.visibleOptions=t,this.renderOptions()}},{key:"setOptionsPosition",value:function(e){void 0===e&&(e=this.getVisibleStartIndex());var i=e*this.optionHeight;this.$options.style.transform="translate3d(0, ".concat(i,"px, 0)"),t.DomUtils.setData(this.$options,"top",i)}},{key:"setOptionsTooltip",value:function(){var e=this,i=this.getVisibleOptions(),o=this.hasOptionDescription;i.forEach((function(i){var s=e.$dropboxContainer.querySelector('.vscomp-option[data-index="'.concat(i.index,'"]'));t.DomUtils.setData(s.querySelector(".vscomp-option-text"),"tooltip",i.label),o&&t.DomUtils.setData(s.querySelector(".vscomp-option-description"),"tooltip",i.description)}))}},{key:"setValue",value:function(e,i,o){e?Array.isArray(e)?this.selectedValues=s(e):this.selectedValues=[e]:this.selectedValues=[];var n=this.multiple?this.selectedValues:this.selectedValues[0]||"";this.$ele.value=n,this.$hiddenInput.value=n,i?Array.isArray(i)?this.selectedIndexes=s(i):this.selectedIndexes=[i]:this.selectedIndexes=[];var l=this.multiple?this.selectedIndexes:this.selectedIndexes[0]||"";this.$ele.index=l,this.$hiddenInput.index=l,this.isMaxValuesSelected=!!(this.maxValues&&this.maxValues<=this.selectedValues.length),this.setValueText(),this.selectedValues&&this.selectedValues[0]===r?t.DomUtils.removeClass(this.$wrapper,"has-value"):t.DomUtils.toggleClass(this.$wrapper,"has-value",t.Utils.isNotEmpty(this.selectedValues)),t.DomUtils.toggleClass(this.$wrapper,"max-value-selected",this.isMaxValuesSelected),o&&this.dispatchEvent(this.$ele,"change")}},{key:"setValueText",value:function(){var i=[],o=[],s=this.selectedValues,n=s.length,l=this.noOfDisplayValues,a=0;if(this.isAllSelected)this.$valueText.innerHTML="".concat(n," ").concat(this.itemsSelectedMessage);else{var p,u=e(this.options);try{for(u.s();!(p=u.n()).done;){var c=p.value;if(!c.isCurrentNew){if(a>50)break;var h=c.value;if(-1!==s.indexOf(h)){var d=c.label;i.push(d),++a<=l&&o.push('<span class="vscomp-value-tag">'.concat(d,"</span>"))}}}}catch(t){u.e(t)}finally{u.f()}var v=n-l;v>0&&o.push('<span class="vscomp-value-tag more-value-count">+ '.concat(v," more...</span>"));var f=i.join(", ");if(""===f||s&&s[0]===r)this.$valueText.innerHTML=this.placeholder;else if(this.$valueText.innerHTML=f,this.multiple){var y=this.maxValues;if(t.DomUtils.hasEllipsis(this.$valueText)||y){var m="".concat(n);y&&(m+=" / ".concat(y)),this.$valueText.innerHTML="".concat(m," ").concat(this.itemsSelectedMessage)}else o=[]}}t.DomUtils.setData(this.$valueText,"tooltip",o.join(", "))}},{key:"setSearchValue",value:function(e,i){if(e!==this.searchValueOriginal){i||(this.$searchInput.value=e);var o=e.toLowerCase().trim();if(this.searchValue=o,this.searchValueOriginal=e,t.DomUtils.toggleClass(this.$wrapper,"has-search-value",e),this.hasServerSearch)this.serverSearch(o);else{var s,n=0,l=!1,a=this.isOptionVisible;this.hasOptionGroup&&(s=this.getVisibleOptionGroupsMapping(o)),this.options.forEach((function(t){if(!t.isCurrentNew){var e=a(t,o,l,s);e.isVisible&&n++,l||(l=e.hasExactOption)}})),this.allowNewOption&&(o&&!l?(this.setNewOption(),n++):this.removeNewOption()),this.visibleOptionsCount=n,this.scrollToTop(),this.setOptionsHeight(),this.setVisibleOptions()}}}},{key:"setOptionProp",value:function(t,e,i){this.options[t]&&(this.options[t][e]=i)}},{key:"setOptionsHeight",value:function(){this.$optionsList.style.height=this.optionHeight*this.visibleOptionsCount+"px"}},{key:"setOptionsContainerHeight",value:function(e){var i;e?this.showAsPopup&&(this.optionsCount=this.getOptionsCount(),i=this.getOptionsHeight(),this.optionsHeight=i):(i=this.optionsHeight,this.keepAlwaysOpen&&(t.DomUtils.setStyle(this.$noOptions,"height",i),t.DomUtils.setStyle(this.$noSearchResults,"height",i))),t.DomUtils.setStyle(this.$optionsContainer,"max-height",i),this.afterSetOptionsContainerHeight(e)}},{key:"setDropboxPosition",value:function(){if("auto"===this.position){var e=t.DomUtils.getMoreVisibleSides(this.$wrapper),i=!1;if(this.dropboxWidth){var o=this.$toggleButton.getBoundingClientRect(),s=window.innerWidth,n=parseFloat(this.dropboxWidth),l=o.left+n>s,a=n>o.right;l&&!a&&(i=!0)}t.DomUtils.toggleClass(this.$wrapper,"position-top","top"===e.vertical),t.DomUtils.toggleClass(this.$wrapper,"position-left",i)}}},{key:"setNewOption",value:function(){var t=this.searchValueOriginal.trim();if(t){var e=this.getNewOption();if(e){var i=e.index;this.setOptionProp(i,"value",t),this.setOptionProp(i,"label",t)}else{var o={value:t,label:t,isCurrentNew:!0};this.addOption(o)}}}},{key:"setSelectedProp",value:function(){var t=this.selectedValues;this.options.forEach((function(e){-1!==t.indexOf(e.value)&&(e.isSelected=!0)}))}},{key:"getVisibleOptions",value:function(){return this.visibleOptions||[]}},{key:"getValue",value:function(){return this.multiple?this.selectedValues:this.selectedValues[0]}},{key:"getFirstVisibleOptionIndex",value:function(){return Math.ceil(this.$optionsContainer.scrollTop/this.optionHeight)}},{key:"getVisibleStartIndex",value:function(){var t=this.getFirstVisibleOptionIndex()-this.halfOptionsCount;return t<0&&(t=0),t}},{key:"getTooltipAttrText",value:function(e){var i=arguments.length>1&&void 0!==arguments[1]&&arguments[1],o=arguments.length>2&&void 0!==arguments[2]&&arguments[2],s={"data-tooltip":e||"","data-tooltip-enter-delay":this.tooltipEnterDelay,"data-tooltip-z-index":this.zIndex,"data-tooltip-font-size":this.tooltipFontSize,"data-tooltip-alignment":this.tooltipAlignment,"data-tooltip-max-width":this.tooltipMaxWidth,"data-tooltip-ellipsis-only":i,"data-tooltip-allow-html":o};return t.DomUtils.getAttributesText(s)}},{key:"getOptionObj",value:function(e){if(e){var i=t.Utils.getString;return{index:e.index,value:i(e.value),label:i(e.label),description:i(e.description),alias:this.getAlias(e.alias),isCurrentNew:e.isCurrentNew||!1,isVisible:!0}}}},{key:"getNewOption",value:function(){var t=this.options[this.lastOptionIndex];if(t&&t.isCurrentNew)return t}},{key:"getOptionIndex",value:function(t){var e;return t&&this.options.some((function(i){if(i.value==t)return e=i.index,!0})),e}},{key:"getNewValue",value:function(){var t=this.newValues,e=this.selectedValues.filter((function(e){return-1!==t.indexOf(e)}));return this.multiple?e:e[0]}},{key:"getAlias",value:function(t){return t=t?(t=Array.isArray(t)?t.join(","):t.toString().trim()).toLowerCase():""}},{key:"getDisplayValue",value:function(){var t,i=[],o=this.selectedValues,s=e(this.options);try{for(s.s();!(t=s.n()).done;){var n=t.value;-1!==o.indexOf(n.value)&&i.push(n.label)}}catch(t){s.e(t)}finally{s.f()}return this.multiple?i:i[0]||""}},{key:"getVisibleOptionGroupsMapping",value:function(t){var e=this.options,i={},o=this.isOptionVisible;return(e=this.structureOptionGroup(e)).forEach((function(e){i[e.index]=e.options.some((function(e){return o(e,t).isVisible}))})),i}},{key:"getOptionsCount",value:function(t){if(this.showAsPopup){var e=80*window.innerHeight/100-48;this.hasSearchContainer&&(e-=40),t=Math.floor(e/this.optionHeight)}else t=parseInt(t);return t}},{key:"getOptionsHeight",value:function(){return this.optionsCount*this.optionHeight+"px"}},{key:"getSibling",value:function(e,i){var o="next"===i?"nextElementSibling":"previousElementSibling";do{e&&(e=e[o])}while(t.DomUtils.hasClass(e,"disabled")||t.DomUtils.hasClass(e,"group-title"));return e}},{key:"openDropbox",value:function(e){var i=this;this.setDropboxPosition(),t.DomUtils.removeClass(this.$wrapper,"closed"),setTimeout((function(){t.DomUtils.addClass(i.$wrapper,"opened"),i.dispatchEvent(i.$ele,"opened"),e||(i.moveSelectedOptionsFirst(),t.DomUtils.addClass(i.$wrapper,"focused"),i.showAsPopup?(t.DomUtils.addClass(i.$body,"vscomp-popup-active"),i.isPopupActive=!0):i.focusSearchInput())}),0)}},{key:"closeDropbox",value:function(e){var i=this;if(this.keepAlwaysOpen)this.removeOptionFocus();else{var o=e?0:this.transitionDuration;setTimeout((function(){t.DomUtils.removeClass(i.$wrapper,"opened focused"),i.dispatchEvent(i.$ele,"closed"),i.removeOptionFocus(),e||i.isPopupActive&&(t.DomUtils.removeClass(i.$body,"vscomp-popup-active"),i.isPopupActive=!1)}),0),setTimeout((function(){t.DomUtils.addClass(i.$wrapper,"closed")}),o)}}},{key:"moveSelectedOptionsFirst",value:function(){this.showSelectedOptionsFirst&&(this.setSortedOptions(),this.$optionsContainer.scrollTop&&this.selectedValues.length?this.scrollToTop():this.setVisibleOptions())}},{key:"toggleDropbox",value:function(){this.isOpened()?this.closeDropbox():this.openDropbox()}},{key:"isOpened",value:function(){return t.DomUtils.hasClass(this.$wrapper,"opened")}},{key:"focusSearchInput",value:function(){var t=this.$searchInput;t&&t.focus()}},{key:"focusOption",value:function(e,i){var o,s=this.$dropboxContainer.querySelector(".vscomp-option.focused");if(i)o=i;else if(s)o=this.getSibling(s,e);else{var n=this.getFirstVisibleOptionIndex();o=this.$dropboxContainer.querySelector('.vscomp-option[data-visible-index="'.concat(n,'"]')),(t.DomUtils.hasClass(o,"disabled")||t.DomUtils.hasClass(o,"group-title"))&&(o=this.getSibling(o,"next"))}o&&o!==s&&(s&&t.DomUtils.removeClass(s,"focused"),t.DomUtils.addClass(o,"focused"),this.toggleFocusedProp(t.DomUtils.getData(o,"index"),!0),this.moveFocusedOptionToView(o))}},{key:"moveFocusedOptionToView",value:function(e){if(e||(e=this.$dropboxContainer.querySelector(".vscomp-option.focused")),e){var i,o=this.$optionsContainer.getBoundingClientRect(),s=e.getBoundingClientRect(),n=o.top,l=o.bottom,a=o.height,r=s.top,p=s.bottom,u=s.height,c=e.offsetTop,h=t.DomUtils.getData(this.$options,"top","number");n>r?i=c+h:l<p&&(i=c-a+u+h),void 0!==i&&(this.$optionsContainer.scrollTop=i)}}},{key:"removeOptionFocus",value:function(){var e=this.$dropboxContainer.querySelector(".vscomp-option.focused");e&&(t.DomUtils.removeClass(e,"focused"),this.toggleFocusedProp(null))}},{key:"selectOption",value:function(e){if(e){var i=!t.DomUtils.hasClass(e,"selected");if(i){if(this.multiple&&this.isMaxValuesSelected)return}else if(!this.multiple)return void this.closeDropbox();var o=this.selectedValues,s=this.selectedIndexes,n=t.DomUtils.getData(e,"value"),l=t.DomUtils.getData(e,"index");if(this.toggleSelectedProp(l,i),i){if(this.multiple)o.push(n),s.push(l),this.toggleAllOptionsClass();else{o.length&&this.toggleSelectedProp(this.getOptionIndex(o[0]),!1),o=[n],s=[l];var a=this.$ele.querySelector(".vscomp-option.selected");a&&t.DomUtils.toggleClass(a,"selected",!1),this.closeDropbox()}t.DomUtils.toggleClass(e,"selected")}else this.multiple&&(t.DomUtils.toggleClass(e,"selected"),t.Utils.removeItemFromArray(o,n),t.Utils.removeItemFromArray(s,l),this.toggleAllOptionsClass(!1));if(t.DomUtils.hasClass(e,"current-new")&&this.beforeSelectNewValue(),this.setValue(o,s,!0),this.keepAlwaysOpen&&this.showSelectedOptionsFirst){var r=this.$optionsContainer.scrollTop;this.moveSelectedOptionsFirst(),this.$optionsContainer.scrollTop=r}}}},{key:"selectFocusedOption",value:function(){this.selectOption(this.$dropboxContainer.querySelector(".vscomp-option.focused"))}},{key:"toggleAllOptions",value:function(e){if(this.multiple&&!this.disableSelectAll){"boolean"!=typeof e&&(e=!t.DomUtils.hasClass(this.$toggleAllCheckbox,"checked"));var i=[],o=[];this.options.forEach((function(t,s){t.isDisabled||t.isCurrentNew||t.isGroupTitle||(t.isSelected=e,e&&(i.push(t.value),o.push(s)))})),this.toggleAllOptionsClass(e),this.setValue(i,o,!0),this.renderOptions()}}},{key:"toggleAllOptionsClass",value:function(e){"boolean"!=typeof e&&(e=!1,this.options.length&&(e=!this.options.some((function(t){return!t.isSelected&&!t.isDisabled&&!t.isGroupTitle})))),t.DomUtils.toggleClass(this.$toggleAllCheckbox,"checked",e),this.isAllSelected=e}},{key:"toggleFocusedProp",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this.focusedOptionIndex&&this.setOptionProp(this.focusedOptionIndex,"isFocused",!1),this.setOptionProp(t,"isFocused",e),this.focusedOptionIndex=t}},{key:"toggleSelectedProp",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]&&arguments[1];this.setOptionProp(t,"isSelected",e)}},{key:"scrollToTop",value:function(){var t=!this.isOpened();t&&this.openDropbox(!0),this.$optionsContainer.scrollTop>0&&(this.$optionsContainer.scrollTop=0),t&&this.closeDropbox(!0)}},{key:"reset",value:function(){this.options.forEach((function(t){t.isSelected=!1})),this.beforeValueSet(!0),this.setValue(null,null,!0),this.afterValueSet()}},{key:"beforeValueSet",value:function(t){this.toggleAllOptionsClass(!t&&void 0)}},{key:"afterValueSet",value:function(){this.scrollToTop(),this.setSearchValue(""),this.renderOptions()}},{key:"afterSetOptions",value:function(t){t&&this.setSelectedProp(),this.setOptionsHeight(),this.setVisibleOptions(),t||this.reset()}},{key:"addOption",value:function(t,e){if(t){this.lastOptionIndex++,t.index=this.lastOptionIndex;var i=this.getOptionObj(t);this.options.push(i),this.sortedOptions.push(i),e&&(this.visibleOptionsCount++,this.afterSetOptions())}}},{key:"removeOption",value:function(t){(t||0==t)&&(this.options.splice(t,1),this.lastOptionIndex--)}},{key:"removeNewOption",value:function(){var t=this.getNewOption();t&&this.removeOption(t.index)}},{key:"beforeSelectNewValue",value:function(){var t=this,e=this.getNewOption(),i=e.index;this.newValues.push(e.value),this.setOptionProp(i,"isCurrentNew",!1),this.setOptionProp(i,"isNew",!0),setTimeout((function(){t.setSearchValue(""),t.focusSearchInput()}),0)}},{key:"sortOptions",value:function(t){return t.sort((function(t,e){return e.value===r&&t.value!==r?0:t.isSelected||e.isSelected?t.isSelected&&(!e.isSelected||t.index<e.index)?-1:1:0}))}},{key:"sortOptionsGroup",value:function(t){var e=this.sortOptions;return(t=this.structureOptionGroup(t)).forEach((function(t){var i=t.options;t.isSelected=i.some((function(t){return t.isSelected})),t.isSelected&&e(i)})),e(t),this.destructureOptionGroup(t)}},{key:"isOptionVisible",value:function(t,e,i,o){var s=t.label.toLowerCase(),n=t.description,l=t.alias,a=-1!==s.indexOf(e);return t.isGroupTitle&&(a=o[t.index]),l&&!a&&(a=-1!==l.indexOf(e)),n&&!a&&(a=-1!==n.toLowerCase().indexOf(e)),t.isVisible=a,i||(i=s===e),{isVisible:a,hasExactOption:i}}},{key:"structureOptionGroup",value:function(t){var e=[],i={};return t.forEach((function(t){if(t.isGroupTitle){var o=[];t.options=o,i[t.index]=o,e.push(t)}})),t.forEach((function(t){t.isGroupOption&&i[t.groupIndex].push(t)})),e}},{key:"destructureOptionGroup",value:function(t){var e=[];return t.forEach((function(t){e.push(t),e=e.concat(t.options)})),e}},{key:"serverSearch",value:function(e){t.DomUtils.removeClass(this.$wrapper,"has-no-options"),t.DomUtils.addClass(this.$wrapper,"server-searching"),this.onServerSearch(e,this)}}])&&a(o.prototype,n),l&&a(o,l),i}();document.addEventListener("reset",u.resetForm),window.addEventListener("resize",u.onResizeMethod),window.VirtualSelect=u})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aXJ0dWFsLXNlbGVjdC8uL3NyYy91dGlscy9kb20tdXRpbHMuanMiLCJ3ZWJwYWNrOi8vdmlydHVhbC1zZWxlY3QvLi9zcmMvdXRpbHMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vdmlydHVhbC1zZWxlY3Qvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vdmlydHVhbC1zZWxlY3Qvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3ZpcnR1YWwtc2VsZWN0L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vdmlydHVhbC1zZWxlY3Qvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly92aXJ0dWFsLXNlbGVjdC8uL3NyYy92aXJ0dWFsLXNlbGVjdC5qcyJdLCJuYW1lcyI6WyJEb21VdGlscyIsIiRlbGUiLCJjbGFzc05hbWUiLCJzcGxpdCIsInRoaXMiLCJnZXRFbGVtZW50cyIsImZvckVhY2giLCJfdGhpcyIsImNsYXNzTGlzdCIsImFkZCIsInJlbW92ZSIsImlzQWRkIiwiaXNBZGRlZCIsInVuZGVmaW5lZCIsIkJvb2xlYW4iLCJ0b2dnbGUiLCJjb250YWlucyIsInNjcm9sbFdpZHRoIiwib2Zmc2V0V2lkdGgiLCJib3giLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJhdmFpbGFibGVXaWR0aCIsIndpbmRvdyIsImlubmVyV2lkdGgiLCJhdmFpbGFibGVIZWlnaHQiLCJpbm5lckhlaWdodCIsImxlZnRBcmVhIiwibGVmdCIsInRvcEFyZWEiLCJ0b3AiLCJob3Jpem9udGFsIiwid2lkdGgiLCJ2ZXJ0aWNhbCIsImhlaWdodCIsIm5hbWUiLCJ0eXBlIiwidmFsdWUiLCJkYXRhc2V0IiwicGFyc2VGbG9hdCIsInN0eWxlIiwibGVuZ3RoIiwicHJvcHMiLCJza2lwQXR0ck5hbWUiLCJyZXN1bHQiLCJrIiwiZGF0YSIsImh0bWwiLCJVdGlscyIsInRleHQiLCJ0b1N0cmluZyIsImRlZmF1bHRWYWx1ZSIsIkFycmF5IiwiaXNBcnJheSIsIk9iamVjdCIsImtleXMiLCJpc0VtcHR5IiwiYXJyYXkiLCJjbG9uZUFycmF5IiwiaW5kZXgiLCJpbmRleE9mIiwic3BsaWNlIiwiZmlsdGVyIiwiZCIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwibm9uZU9wdGlvblZhbHVlIiwia2V5RG93bk1ldGhvZE1hcHBpbmciLCIxMyIsIjI3IiwiMzgiLCI0MCIsIlZpcnR1YWxTZWxlY3QiLCJvcHRpb25zIiwic2V0UHJvcHMiLCJzZXREaXNhYmxlZE9wdGlvbnMiLCJkaXNhYmxlZE9wdGlvbnMiLCJzZXRPcHRpb25zIiwicmVuZGVyIiwiZSIsImNvbnNvbGUiLCJ3YXJuIiwiZXJyb3IiLCIkZWxlQXJyYXkiLCJlbGUiLCJzaW5nbGVFbGUiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJpbnN0YW5jZXMiLCJwdXNoIiwiJGZvcm0iLCJ0YXJnZXQiLCJjbG9zZXN0IiwicXVlcnlTZWxlY3RvckFsbCIsInBhcmVudEVsZW1lbnQiLCJ2aXJ0dWFsU2VsZWN0IiwicmVzZXQiLCJzaWxlbnRDaGFuZ2UiLCJzZXRWYWx1ZU1ldGhvZCIsInNldE9wdGlvbnNNZXRob2QiLCJzZXREaXNhYmxlZE9wdGlvbnNNZXRob2QiLCJpc1NlbGVjdGVkIiwidG9nZ2xlQWxsT3B0aW9ucyIsImlzQWxsU2VsZWN0ZWQiLCJhZGRPcHRpb24iLCJnZXROZXdWYWx1ZSIsImdldERpc3BsYXlWYWx1ZSIsIm9wZW5Ecm9wYm94IiwiY2xvc2VEcm9wYm94Iiwib25SZXNpemUiLCJ3cmFwcGVyQ2xhc3NlcyIsInZhbHVlVG9vbHRpcCIsImdldFRvb2x0aXBBdHRyVGV4dCIsIm11bHRpcGxlIiwiY2xlYXJCdXR0b25Ub29sdGlwIiwiZHJvcGJveENvbnRhaW5lclN0eWxlIiwiekluZGV4IiwiYWRkaXRpb25hbENsYXNzZXMiLCJkaXNhYmxlU2VsZWN0QWxsIiwicG9zaXRpb24iLCJoaWRlQ2xlYXJCdXR0b24iLCJrZWVwQWx3YXlzT3BlbiIsInNob3dBc1BvcHVwIiwiZHJvcGJveFdpZHRoIiwiaGFzU2VhcmNoIiwicGxhY2Vob2xkZXIiLCJub09wdGlvbnNUZXh0Iiwibm9TZWFyY2hSZXN1bHRzVGV4dCIsImlubmVySFRNTCIsIiRib2R5IiwiJHdyYXBwZXIiLCIkdG9nZ2xlQnV0dG9uIiwiJGNsZWFyQnV0dG9uIiwiJGRyb3Bib3hDb250YWluZXIiLCIkZHJvcGJveENsb3NlQnV0dG9uIiwiJHNlYXJjaCIsIiRvcHRpb25zQ29udGFpbmVyIiwiJG9wdGlvbnNMaXN0IiwiJG9wdGlvbnMiLCIkdmFsdWVUZXh0IiwiJGhpZGRlbklucHV0IiwiJG5vT3B0aW9ucyIsIiRub1NlYXJjaFJlc3VsdHMiLCJhZnRlclJlbmRlcldyYXBwZXIiLCJzZWFyY2hSZWdleCIsInZpc2libGVPcHRpb25zIiwiZ2V0VmlzaWJsZU9wdGlvbnMiLCJjaGVja2JveEh0bWwiLCJuZXdPcHRpb25JY29uSHRtbCIsIm1hcmtTZWFyY2hSZXN1bHRzIiwic2VhcmNoVmFsdWUiLCJzdHlsZVRleHQiLCJvcHRpb25IZWlnaHQiLCJSZWdFeHAiLCJhbGxvd05ld09wdGlvbiIsIm5ld09wdGlvblRvb2x0aXAiLCJvcHRpb25MYWJlbCIsImxhYmVsIiwib3B0aW9uQ2xhc3NlcyIsIm9wdGlvblRvb2x0aXAiLCJsZWZ0U2VjdGlvbiIsInJpZ2h0U2VjdGlvbiIsImRlc2NyaXB0aW9uIiwiaXNGb2N1c2VkIiwiaXNEaXNhYmxlZCIsImlzR3JvdXBUaXRsZSIsImlzR3JvdXBPcHRpb24iLCJpc0N1cnJlbnROZXciLCJyZXBsYWNlIiwidmlzaWJsZUluZGV4IiwiaGFzTm9PcHRpb25zIiwiaGFzTm9TZWFyY2hSZXN1bHRzIiwic2V0T3B0aW9uc1Bvc2l0aW9uIiwic2V0T3B0aW9uc1Rvb2x0aXAiLCJoYXNTZWFyY2hDb250YWluZXIiLCJzZWFyY2hJbnB1dCIsInNlbGVjdEFsbFRleHQiLCJzZWFyY2hQbGFjZWhvbGRlciIsIiRzZWFyY2hJbnB1dCIsIiRzZWFyY2hDbGVhciIsIiR0b2dnbGVBbGxCdXR0b24iLCIkdG9nZ2xlQWxsQ2hlY2tib3giLCJhZGRFdmVudCIsImV2ZW50cyIsIm1ldGhvZCIsImV2ZW50IiwiZXZlbnRzS2V5IiwiY2FsbGJhY2siLCJiaW5kIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50TmFtZSIsInNldFRpbWVvdXQiLCJkaXNwYXRjaEV2ZW50IiwiRXZlbnQiLCJidWJibGVzIiwid2hpY2giLCJrZXlDb2RlIiwiaXNPcGVuZWQiLCJzZWxlY3RGb2N1c2VkT3B0aW9uIiwicHJldmVudERlZmF1bHQiLCJmb2N1c09wdGlvbiIsInRvZ2dsZURyb3Bib3giLCJzZXRWaXNpYmxlT3B0aW9ucyIsInNlbGVjdE9wdGlvbiIsInJlbW92ZU9wdGlvbkZvY3VzIiwic3RvcFByb3BhZ2F0aW9uIiwic2V0U2VhcmNoVmFsdWUiLCJmb2N1c1NlYXJjaElucHV0Iiwic2V0T3B0aW9uc0NvbnRhaW5lckhlaWdodCIsInNldEF0dHJpYnV0ZSIsInJlbmRlclNlYXJjaCIsInNldE9wdGlvbnNIZWlnaHQiLCJhZGRFdmVudHMiLCJzZXRNZXRob2RzIiwiaW5pdGlhbFNlbGVjdGVkVmFsdWUiLCJzaWxlbnRJbml0aWFsVmFsdWVTZXQiLCJhdXRvU2VsZWN0Rmlyc3RPcHRpb24iLCJzZXREZWZhdWx0UHJvcHMiLCJzZXRQcm9wc0Zyb21FbGVtZW50QXR0ciIsImNvbnZlcnRUb0Jvb2xlYW4iLCJ2YWx1ZUtleSIsImxhYmVsS2V5IiwiZGVzY3JpcHRpb25LZXkiLCJhbGlhc0tleSIsIm9wdGlvbkhlaWdodFRleHQiLCJzZWFyY2giLCJoYXNPcHRpb25EZXNjcmlwdGlvbiIsInNob3dTZWxlY3RlZE9wdGlvbnNGaXJzdCIsInNob3dEcm9wYm94QXNQb3B1cCIsInRvb2x0aXBGb250U2l6ZSIsInRvb2x0aXBBbGlnbm1lbnQiLCJ0b29sdGlwTWF4V2lkdGgiLCJub09mRGlzcGxheVZhbHVlcyIsInBhcnNlSW50IiwibWF4VmFsdWVzIiwic2VsZWN0ZWRWYWx1ZSIsInBvcHVwRHJvcGJveEJyZWFrcG9pbnQiLCJvblNlcnZlclNlYXJjaCIsIml0ZW1zU2VsZWN0ZWRNZXNzYWdlIiwiYWxsb3dOb25lT3B0aW9uIiwibm9uZU9wdGlvblRleHQiLCJzZWxlY3RlZFZhbHVlcyIsInNlbGVjdGVkSW5kZXhlcyIsIm5ld1ZhbHVlcyIsInRvb2x0aXBFbnRlckRlbGF5IiwidHJhbnNpdGlvbkR1cmF0aW9uIiwic2VhcmNoVmFsdWVPcmlnaW5hbCIsImhhc1NlcnZlclNlYXJjaCIsIm9wdGlvbnNDb3VudCIsImdldE9wdGlvbnNDb3VudCIsImhhbGZPcHRpb25zQ291bnQiLCJNYXRoIiwiY2VpbCIsIm9wdGlvbnNIZWlnaHQiLCJnZXRPcHRpb25zSGVpZ2h0IiwiZGVmYXVsdE9wdGlvbnMiLCJhc3NpZ24iLCJtYXBwaW5nIiwiZ2V0QXR0cmlidXRlIiwic2V0VmFsdWUiLCJ0b2dnbGVTZWxlY3RBbGwiLCJhZGRPcHRpb25NZXRob2QiLCJnZXROZXdWYWx1ZU1ldGhvZCIsImdldERpc3BsYXlWYWx1ZU1ldGhvZCIsIm9wZW4iLCJvcGVuTWV0aG9kIiwiY2xvc2UiLCJjbG9zZU1ldGhvZCIsIm1hcCIsInYiLCJ2YWxpZFZhbHVlcyIsInZhbGlkSW5kZXhlcyIsImlkeCIsImJlZm9yZVZhbHVlU2V0IiwiYWZ0ZXJWYWx1ZVNldCIsImtlZXBWYWx1ZSIsImFmdGVyU2V0T3B0aW9ucyIsInNldE9wdGlvbnNQcm9wIiwicHJlcGFyZWRPcHRpb25zIiwiaGFzRGlzYWJsZWRPcHRpb25zIiwiZ2V0U3RyaW5nIiwiZ2V0QWxpYXMiLCJoYXNPcHRpb25Hcm91cCIsInVuc2hpZnQiLCJwcmVwYXJlT3B0aW9uIiwiY2hpbGRPcHRpb25zIiwib3B0aW9uIiwiYWxpYXMiLCJpc1Zpc2libGUiLCJncm91cEluZGV4IiwidmlzaWJsZU9wdGlvbnNDb3VudCIsImxhc3RPcHRpb25JbmRleCIsInNldFNvcnRlZE9wdGlvbnMiLCJzb3J0ZWRPcHRpb25zIiwic29ydE9wdGlvbnNHcm91cCIsInNvcnRPcHRpb25zIiwibWF4T3B0aW9uc1RvU2hvdyIsInN0YXJ0SW5kZXgiLCJnZXRWaXNpYmxlU3RhcnRJbmRleCIsIm5ld09wdGlvbiIsImdldE5ld09wdGlvbiIsImVuZEluZGV4IiwiaSIsImluVmlldyIsInJlbmRlck9wdGlvbnMiLCJ0cmFuc2Zvcm0iLCIkb3B0aW9uRWxlIiwidHJpZ2dlckV2ZW50IiwibmV3VmFsdWUiLCJuZXdJbmRleCIsImlzTWF4VmFsdWVzU2VsZWN0ZWQiLCJzZXRWYWx1ZVRleHQiLCJ2YWx1ZVRleHQiLCJzZWxlY3RlZExlbmd0aCIsInNlbGVjdGVkVmFsdWVzQ291bnQiLCJtb3JlU2VsZWN0ZWRPcHRpb25zIiwiYWdncmVnYXRlZFZhbHVlVGV4dCIsImpvaW4iLCJjb3VudFRleHQiLCJza2lwSW5wdXRTZXQiLCJ0b0xvd2VyQ2FzZSIsInRyaW0iLCJzZXJ2ZXJTZWFyY2giLCJ2aXNpYmxlT3B0aW9uR3JvdXBzTWFwcGluZyIsImhhc0V4YWN0T3B0aW9uIiwiaXNPcHRpb25WaXNpYmxlIiwiZ2V0VmlzaWJsZU9wdGlvbkdyb3Vwc01hcHBpbmciLCJzZXROZXdPcHRpb24iLCJyZW1vdmVOZXdPcHRpb24iLCJzY3JvbGxUb1RvcCIsImFmdGVyU2V0T3B0aW9uc0NvbnRhaW5lckhlaWdodCIsIm1vcmVWaXNpYmxlU2lkZXMiLCJzaG93T25MZWZ0IiwiYnV0dG9uQ29vcmRzIiwidmlld3BvcnRXaWR0aCIsImhpZGRlbk9uUmlnaHQiLCJoaWRkZW5PbkxlZnQiLCJyaWdodCIsInNldE9wdGlvblByb3AiLCJzY3JvbGxUb3AiLCJnZXRGaXJzdFZpc2libGVPcHRpb25JbmRleCIsImVsbGlwc2lzT25seSIsImFsbG93SHRtbCIsImxhc3RPcHRpb24iLCJzb21lIiwiZGlzcGxheVZhbHVlcyIsInN0cnVjdHVyZU9wdGlvbkdyb3VwIiwiY291bnQiLCJmbG9vciIsImRpcmVjdGlvbiIsInByb3BOYW1lIiwiaXNTaWxlbnQiLCJzZXREcm9wYm94UG9zaXRpb24iLCJtb3ZlU2VsZWN0ZWRPcHRpb25zRmlyc3QiLCJpc1BvcHVwQWN0aXZlIiwiZm9jdXMiLCIkbmV3Rm9jdXNlZEVsZSIsIiRmb2N1c2VkRWxlIiwiZ2V0U2libGluZyIsImZpcnN0VmlzaWJsZU9wdGlvbkluZGV4IiwidG9nZ2xlRm9jdXNlZFByb3AiLCJtb3ZlRm9jdXNlZE9wdGlvblRvVmlldyIsIm5ld1Njcm9sbFRvcCIsImNvbnRhaW5lclJlY3QiLCJvcHRpb25SZWN0IiwiY29udGFpbmVyVG9wIiwiY29udGFpbmVyQm90dG9tIiwiYm90dG9tIiwiY29udGFpbmVySGVpZ2h0Iiwib3B0aW9uVG9wIiwib3B0aW9uQm90dG9tIiwib3B0aW9uT2Zmc2V0VG9wIiwib2Zmc2V0VG9wIiwib3B0aW9uc1RvcCIsImlzQWRkaW5nIiwic2VsZWN0ZWRJbmRleCIsInRvZ2dsZVNlbGVjdGVkUHJvcCIsInRvZ2dsZUFsbE9wdGlvbnNDbGFzcyIsImdldE9wdGlvbkluZGV4IiwiJHByZXZTZWxlY3RlZE9wdGlvbiIsImJlZm9yZVNlbGVjdE5ld1ZhbHVlIiwibGFzdFNjcm9sbFRvcCIsImZvY3VzZWRPcHRpb25JbmRleCIsImlzQ2xvc2VkIiwiaXNSZXNldCIsInNldFNlbGVjdGVkUHJvcCIsInJlcmVuZGVyIiwiZ2V0T3B0aW9uT2JqIiwicmVtb3ZlT3B0aW9uIiwic29ydCIsImEiLCJiIiwiZGVzdHJ1Y3R1cmVPcHRpb25Hcm91cCIsImNoaWxkQXJyYXkiLCJjb25jYXQiLCJyZXNldEZvcm0iLCJvblJl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SUFBZ0I4SCxJQUNsQkEsR0FBZ0UsSUFBcEQ5SCxFQUFZOEosY0FBY3RSLFFBQVE0RyxJQUdoRHpHLEVBQUVtUCxVQUFZQSxFQUVUb0MsSUFDSEEsRUFBaUJqVCxJQUFVbUksR0FHdEIsQ0FDTDBJLFlBQ0FvQyxvQkF2M0ROLDJDQTIzRHVCM1AsR0FDbkIsSUFBSS9DLEVBQVMsR0FDVG1RLEVBQWUsR0FvQm5CLE9BakJBcE4sRUFBUXBGLFNBQVEsU0FBQ3dELEdBQ2YsR0FBSUEsRUFBRXdILGFBQWMsQ0FDbEIsSUFBSW9PLEVBQWEsR0FDakI1VixFQUFFNEIsUUFBVWdVLEVBQ1o1RyxFQUFhaFAsRUFBRUosT0FBU2dXLEVBRXhCL1csRUFBTytELEtBQUs1QyxPQUtoQjRCLEVBQVFwRixTQUFRLFNBQUN3RCxHQUNYQSxFQUFFeUgsZUFDSnVILEVBQWFoUCxFQUFFb1AsWUFBWXhNLEtBQUs1QyxNQUk3Qm5CLElBajVEWCw2Q0FvNUR5QitDLEdBQ3JCLElBQUkvQyxFQUFTLEdBT2IsT0FMQStDLEVBQVFwRixTQUFRLFNBQUN3RCxHQUNmbkIsRUFBTytELEtBQUs1QyxHQUNabkIsRUFBU0EsRUFBT2dYLE9BQU83VixFQUFFNEIsWUFHcEIvQyxJQTU1RFgsbUNBKzVEZTRILEdBQ1h2Syx1QkFBcUJJLEtBQUsrSSxTQUFVLGtCQUNwQ25KLG9CQUFrQkksS0FBSytJLFNBQVUsb0JBQ2pDL0ksS0FBSzBQLGVBQWV2RixFQUFhbkssVywyQkFsNkRyQyxLQXlnRUFtRyxTQUFTdUcsaUJBQWlCLFFBQVNySCxFQUFjbVUsV0FDakR0WSxPQUFPd0wsaUJBQWlCLFNBQVVySCxFQUFjb1UsZ0JBRWhEdlksT0FBT21FLGNBQWdCQSxHIiwiZmlsZSI6InZpcnR1YWwtc2VsZWN0Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBEb21VdGlscyB7XHJcbiAgc3RhdGljIGFkZENsYXNzKCRlbGUsIGNsYXNzTmFtZSkge1xyXG4gICAgaWYgKCEkZWxlKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjbGFzc05hbWUgPSBjbGFzc05hbWUuc3BsaXQoJyAnKTtcclxuXHJcbiAgICB0aGlzLmdldEVsZW1lbnRzKCRlbGUpLmZvckVhY2goKF90aGlzKSA9PiB7XHJcbiAgICAgIF90aGlzLmNsYXNzTGlzdC5hZGQoLi4uY2xhc3NOYW1lKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHJlbW92ZUNsYXNzKCRlbGUsIGNsYXNzTmFtZSkge1xyXG4gICAgaWYgKCEkZWxlKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjbGFzc05hbWUgPSBjbGFzc05hbWUuc3BsaXQoJyAnKTtcclxuXHJcbiAgICB0aGlzLmdldEVsZW1lbnRzKCRlbGUpLmZvckVhY2goKF90aGlzKSA9PiB7XHJcbiAgICAgIF90aGlzLmNsYXNzTGlzdC5yZW1vdmUoLi4uY2xhc3NOYW1lKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHRvZ2dsZUNsYXNzKCRlbGUsIGNsYXNzTmFtZSwgaXNBZGQpIHtcclxuICAgIGlmICghJGVsZSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGlzQWRkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgaXNBZGQgPSBCb29sZWFuKGlzQWRkKTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgaXNBZGRlZDtcclxuXHJcbiAgICB0aGlzLmdldEVsZW1lbnRzKCRlbGUpLmZvckVhY2goKF90aGlzKSA9PiB7XHJcbiAgICAgIGlzQWRkZWQgPSBfdGhpcy5jbGFzc0xpc3QudG9nZ2xlKGNsYXNzTmFtZSwgaXNBZGQpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIGlzQWRkZWQ7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgaGFzQ2xhc3MoJGVsZSwgY2xhc3NOYW1lKSB7XHJcbiAgICBpZiAoISRlbGUpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiAkZWxlLmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGhhc0VsbGlwc2lzKCRlbGUpIHtcclxuICAgIGlmICghJGVsZSkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuICRlbGUuc2Nyb2xsV2lkdGggPiAkZWxlLm9mZnNldFdpZHRoO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldE1vcmVWaXNpYmxlU2lkZXMoJGVsZSkge1xyXG4gICAgaWYgKCEkZWxlKSB7XHJcbiAgICAgIHJldHVybiB7fTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgYm94ID0gJGVsZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgIGxldCBhdmFpbGFibGVXaWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoO1xyXG4gICAgbGV0IGF2YWlsYWJsZUhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodDtcclxuICAgIGxldCBsZWZ0QXJlYSA9IGJveC5sZWZ0O1xyXG4gICAgbGV0IHRvcEFyZWEgPSBib3gudG9wO1xyXG4gICAgbGV0IHJpZ2h0QXJlYSA9IGF2YWlsYWJsZVdpZHRoIC0gbGVmdEFyZWEgLSBib3gud2lkdGg7XHJcbiAgICBsZXQgYm90dG9tQXJlYSA9IGF2YWlsYWJsZUhlaWdodCAtIHRvcEFyZWEgLSBib3guaGVpZ2h0O1xyXG4gICAgbGV0IGhvcml6b250YWwgPSBsZWZ0QXJlYSA+IHJpZ2h0QXJlYSA/ICdsZWZ0JyA6ICdyaWdodCc7XHJcbiAgICBsZXQgdmVydGljYWwgPSB0b3BBcmVhID4gYm90dG9tQXJlYSA/ICd0b3AnIDogJ2JvdHRvbSc7XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgaG9yaXpvbnRhbCxcclxuICAgICAgdmVydGljYWwsXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldERhdGEoJGVsZSwgbmFtZSwgdHlwZSkge1xyXG4gICAgaWYgKCEkZWxlKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgdmFsdWUgPSAkZWxlID8gJGVsZS5kYXRhc2V0W25hbWVdIDogJyc7XHJcblxyXG4gICAgaWYgKHR5cGUgPT09ICdudW1iZXInKSB7XHJcbiAgICAgIHZhbHVlID0gcGFyc2VGbG9hdCh2YWx1ZSkgfHwgMDtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmICh2YWx1ZSA9PT0gJ3RydWUnKSB7XHJcbiAgICAgICAgdmFsdWUgPSB0cnVlO1xyXG4gICAgICB9IGVsc2UgaWYgKHZhbHVlID09PSAnZmFsc2UnKSB7XHJcbiAgICAgICAgdmFsdWUgPSBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB2YWx1ZTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBzZXREYXRhKCRlbGUsIG5hbWUsIHZhbHVlKSB7XHJcbiAgICBpZiAoISRlbGUpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgICRlbGUuZGF0YXNldFtuYW1lXSA9IHZhbHVlO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHNldFN0eWxlKCRlbGUsIG5hbWUsIHZhbHVlKSB7XHJcbiAgICBpZiAoISRlbGUpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgICRlbGUuc3R5bGVbbmFtZV0gPSB2YWx1ZTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBnZXRFbGVtZW50cygkZWxlKSB7XHJcbiAgICBpZiAoISRlbGUpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICgkZWxlLmxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICRlbGUgPSBbJGVsZV07XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuICRlbGU7XHJcbiAgfVxyXG5cclxuICAvKiogY29udmVydCBvYmplY3QgdG8gc3R5bGUgYXR0cmlidXRlICovXHJcbiAgc3RhdGljIGdldFN0eWxlVGV4dChwcm9wcywgc2tpcEF0dHJOYW1lKSB7XHJcbiAgICBsZXQgcmVzdWx0ID0gJyc7XHJcblxyXG4gICAgZm9yIChsZXQgayBpbiBwcm9wcykge1xyXG4gICAgICByZXN1bHQgKz0gYCR7a306ICR7cHJvcHNba119O2A7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHJlc3VsdCAmJiAhc2tpcEF0dHJOYW1lKSB7XHJcbiAgICAgIHJlc3VsdCA9IGBzdHlsZT1cIiR7cmVzdWx0fVwiYDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgLyoqIGNvbnZlcnQgb2JqZWN0IHRvIGRvbSBhdHRyaWJ1dGVzICovXHJcbiAgc3RhdGljIGdldEF0dHJpYnV0ZXNUZXh0KGRhdGEpIHtcclxuICAgIGxldCBodG1sID0gJyc7XHJcblxyXG4gICAgaWYgKCFkYXRhKSB7XHJcbiAgICAgIHJldHVybiBodG1sO1xyXG4gICAgfVxyXG5cclxuICAgIGZvciAobGV0IGsgaW4gZGF0YSkge1xyXG4gICAgICBsZXQgdmFsdWUgPSBkYXRhW2tdO1xyXG5cclxuICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICBodG1sICs9IGAgJHtrfT1cIiR7dmFsdWV9XCIgYDtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBodG1sO1xyXG4gIH1cclxufVxyXG4iLCJleHBvcnQgY2xhc3MgVXRpbHMge1xyXG4gIHN0YXRpYyBnZXRTdHJpbmcodGV4dCkge1xyXG4gICAgcmV0dXJuIHRleHQgfHwgdGV4dCA9PT0gMCA/IHRleHQudG9TdHJpbmcoKSA6ICcnO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGNvbnZlcnRUb0Jvb2xlYW4odmFsdWUsIGRlZmF1bHRWYWx1ZSA9IGZhbHNlKSB7XHJcbiAgICBpZiAodmFsdWUgPT09IHRydWUgfHwgdmFsdWUgPT09ICd0cnVlJykge1xyXG4gICAgICB2YWx1ZSA9IHRydWU7XHJcbiAgICB9IGVsc2UgaWYgKHZhbHVlID09PSBmYWxzZSB8fCB2YWx1ZSA9PT0gJ2ZhbHNlJykge1xyXG4gICAgICB2YWx1ZSA9IGZhbHNlO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdmFsdWUgPSBkZWZhdWx0VmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGlzRW1wdHkodmFsdWUpIHtcclxuICAgIGxldCByZXN1bHQgPSBmYWxzZTtcclxuXHJcbiAgICBpZiAoIXZhbHVlKSB7XHJcbiAgICAgIHJlc3VsdCA9IHRydWU7XHJcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICByZXN1bHQgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgaWYgKE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICByZXN1bHQgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBpc05vdEVtcHR5KHZhbHVlKSB7XHJcbiAgICByZXR1cm4gIXRoaXMuaXNFbXB0eSh2YWx1ZSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgcmVtb3ZlSXRlbUZyb21BcnJheShhcnJheSwgdmFsdWUsIGNsb25lQXJyYXkpIHtcclxuICAgIGlmICghQXJyYXkuaXNBcnJheShhcnJheSkgfHwgIWFycmF5Lmxlbmd0aCB8fCAhdmFsdWUpIHtcclxuICAgICAgcmV0dXJuIGFycmF5O1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChjbG9uZUFycmF5KSB7XHJcbiAgICAgIGFycmF5ID0gWy4uLmFycmF5XTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgaW5kZXggPSBhcnJheS5pbmRleE9mKHZhbHVlKTtcclxuXHJcbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XHJcbiAgICAgIGFycmF5LnNwbGljZShpbmRleCwgMSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGFycmF5O1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHJlbW92ZUFycmF5RW1wdHkoYXJyYXkpIHtcclxuICAgIGlmICghQXJyYXkuaXNBcnJheShhcnJheSkgfHwgIWFycmF5Lmxlbmd0aCkge1xyXG4gICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGFycmF5LmZpbHRlcigoZCkgPT4gISFkKTtcclxuICB9XHJcbn1cclxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0aWYoX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSkge1xuXHRcdHJldHVybiBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiaW1wb3J0IHsgVXRpbHMsIERvbVV0aWxzIH0gZnJvbSAnLi91dGlscyc7XHJcblxyXG5jb25zdCB2aXJ0dWFsU2VsZWN0VmVyc2lvbiA9ICd2MS4wLjYnO1xyXG5jb25zdCBkcm9wYm94Q2xvc2VCdXR0b25GdWxsSGVpZ2h0ID0gNDg7XHJcbmNvbnN0IHNlYXJjaEhlaWdodCA9IDQwO1xyXG5jb25zdCBub25lT3B0aW9uVmFsdWUgPSAneyN2aXJ0dWFsLXNlbGVjdC1ub25lLW9wdGlvbiN9JztcclxuXHJcbmNvbnN0IGtleURvd25NZXRob2RNYXBwaW5nID0ge1xyXG4gIDEzOiAnb25FbnRlclByZXNzJyxcclxuICAyNzogJ29uRXNjUHJlc3MnLFxyXG4gIDM4OiAnb25VcEFycm93UHJlc3MnLFxyXG4gIDQwOiAnb25Eb3duQXJyb3dQcmVzcycsXHJcbn07XHJcblxyXG4vKiogQ2xhc3MgcmVwcmVzZW50aW5nIFZpcnR1YWxTZWxlY3QgKi9cclxuZXhwb3J0IGNsYXNzIFZpcnR1YWxTZWxlY3Qge1xyXG4gIC8qKlxyXG4gICAqIENyZWF0ZSBhIFZpcnR1YWxTZWxlY3RcclxuICAgKiBAcHJvcGVydHkgeyhlbGVtZW50fHN0cmluZyl9IGVsZSAtIFBhcmVudCBlbGVtZW50IHRvIHJlbmRlciBWaXJ0dWFsU2VsZWN0XHJcbiAgICogQHByb3BlcnR5IHtvYmplY3RbXX0gb3B0aW9ucyAtIEFycmF5IG9mIG9iamVjdCB0byBzaG93IGFzIG9wdGlvbnNcclxuICAgKiBAcHJvcGVydHkgeyhzdHJpbmd8bnVtYmVyKX0gb3B0aW9uc1tdLnZhbHVlIC0gVmFsdWUgb2YgdGhlIG9wdGlvblxyXG4gICAqIEBwcm9wZXJ0eSB7KHN0cmluZ3xudW1iZXIpfSBvcHRpb25zW10ubGFiZWwgLSBEaXNwbGF5IHRleHQgb2YgdGhlIG9wdGlvblxyXG4gICAqIEBwcm9wZXJ0eSB7KHN0cmluZ3xudW1iZXIpfSBvcHRpb25zW10uZGVzY3JpcHRpb24gLSBUZXh0IHRvIHNob3cgYWxvbmcgd2l0aCBsYWJlbFxyXG4gICAqIEBwcm9wZXJ0eSB7KHN0cmluZ3xhcnJheSl9IG9wdGlvbnNbXS5hbGlhcyAtIEFsdGVybmF0aXZlIGxhYmVscyB0byB1c2Ugb24gc2VhcmNoLiBBcnJheSBvZiBzdHJpbmcgb3IgY29tbWEgc2VwYXJhdGVkIHN0cmluZy5cclxuICAgKiBAcHJvcGVydHkge2FycmF5fSBvcHRpb25zW10ub3B0aW9ucyAtIExpc3Qgb2Ygb3B0aW9ucyBmb3Igb3B0aW9uIGdyb3VwXHJcbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IFt2YWx1ZUtleT12YWx1ZV0gLSBPYmplY3Qga2V5IHRvIHVzZSB0byBnZXQgdmFsdWUgZnJvbSBvcHRpb25zIGFycmF5XHJcbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtsYWJlbEtleT1sYWJlbF0gLSBPYmplY3Qga2V5IHRvIHVzZSB0byBnZXQgbGFiZWwgZnJvbSBvcHRpb25zIGFycmF5XHJcbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtkZXNjcmlwdGlvbktleT1kZXNjcmlwdGlvbl0gLSBPYmplY3Qga2V5IHRvIHVzZSB0byBnZXQgZGVzY3JpcHRpb24gZnJvbSBvcHRpb25zIGFycmF5XHJcbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IFthbGlhc0tleT1hbGlhc10gLSBLZXkgbmFtZSB0byBnZXQgYWxpYXMgZnJvbSBvcHRpb25zIG9iamVjdFxyXG4gICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW211bHRpcGxlPWZhbHNlXSAtIEVuYWJsZSBtdWx0aXNlbGVjdFxyXG4gICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW3NlYXJjaD1mYWxzZV0gLSBFbmFibGUgc2VhcmNoXHJcbiAgICogQHByb3BlcnR5IHtib29sZWFufSBbaGlkZUNsZWFyQnV0dG9uPWZhbHNlXSAtIEhpZGUgY2xlYXIgYnV0dG9uXHJcbiAgICogQHByb3BlcnR5IHtib29sZWFufSBbYXV0b1NlbGVjdEZpcnN0T3B0aW9uPWZhbHNlXSAtIFNlbGVjdCBmaXJzdCBvcHRpb24gYnkgZGVmYXVsdCBvbiBsb2FkXHJcbiAgICogQHByb3BlcnR5IHtib29sZWFufSBbaGFzT3B0aW9uRGVzY3JpcHRpb249ZmFsc2VdIC0gSGFzIGRlc2NyaXB0aW9uIHRvIHNob3cgYWxvbmcgd2l0aCBsYWJlbFxyXG4gICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2Rpc2FibGVTZWxlY3RBbGw9ZmFsc2VdIC0gRGlzYWJsZSBzZWxlY3QgYWxsIGZlYXR1cmUgb2YgbXVsdGlwbGUgc2VsZWN0XHJcbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtvcHRpb25zQ291bnQ9NXw0XSAtIE5vLm9mIG9wdGlvbnMgdG8gc2hvdyBvbiB2aWV3cG9ydFxyXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbb3B0aW9uSGVpZ2h0PTQwcHh8NjBweF0gLSBIZWlnaHQgb2YgZWFjaCBkcm9wZG93biBvcHRpb25zXHJcbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtwb3NpdGlvbj1hdXRvXSAtIFBvc2l0aW9uIG9mIGRyb3Bib3ggKHRvcCwgYm90dG9tLCBhdXRvKVxyXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbcGxhY2Vob2xkZXI9U2VsZWN0XSAtIFRleHQgdG8gc2hvdyB3aGVuIG5vIG9wdGlvbnMgc2VsZWN0ZWRcclxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gW25vT3B0aW9uc1RleHQ9Tm8gb3B0aW9ucyBmb3VuZF0gLSBUZXh0IHRvIHNob3cgd2hlbiBubyBvcHRpb25zIHRvIHNob3dcclxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gW25vU2VhcmNoUmVzdWx0c1RleHQ9Tm8gcmVzdWx0cyBmb3VuZF0gLSBUZXh0IHRvIHNob3cgd2hlbiBubyByZXN1bHRzIG9uIHNlYXJjaFxyXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbc2VsZWN0QWxsVGV4dD1TZWxlY3QgYWxsXSAtIFRleHQgdG8gc2hvdyBuZWFyIHNlbGVjdCBhbGwgY2hlY2tib3ggd2hlbiBzZWFyY2ggaXMgZGlzYWJsZWRcclxuICAgKiBAcHJvcGVydHkge2FycmF5fSBbZGlzYWJsZWRPcHRpb25zXSAtIE9wdGlvbnMgdG8gZGlzYWJsZSAoYXJyYXkgb2YgdmFsdWVzKVxyXG4gICAqIEBwcm9wZXJ0eSB7KHN0cmluZ3xhcnJheSl9IFtzZWxlY3RlZFZhbHVlXSAtIFNpbmdsZSB2YWx1ZSBvciBhcnJheSBvZiB2YWx1ZXMgdG8gc2VsZWN0IG9uIGluaXRcclxuICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtzaWxlbnRJbml0aWFsVmFsdWVTZXQ9ZmFsc2VdIC0gVG8gYXZvaWQgXCJjaGFuZ2UgZXZlbnRcIiB0cmlnZ2VyIG9uIHNldHRpbmcgaW5pdGlhbCB2YWx1ZVxyXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbZHJvcGJveFdpZHRoXSAtIEN1c3RvbSB3aWR0aCBmb3IgZHJvcGJveFxyXG4gICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbekluZGV4PTFdIC0gQ1NTIHotaW5kZXggdmFsdWUgZm9yIGRyb3Bib3hcclxuICAgKiBAcHJvcGVydHkge251bWJlcn0gW25vT2ZEaXNwbGF5VmFsdWVzPTUwXSAtIE1heGltdW0gbm8ub2YgdmFsdWVzIHRvIHNob3cgaW4gdGhlIHRvb2x0aXAgZm9yIG11bHRpLXNlbGVjdFxyXG4gICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2FsbG93TmV3T3B0aW9uPWZhbHNlXSAtIEFsbG93IHRvIGFkZCBuZXcgb3B0aW9uIGJ5IHNlYXJjaGluZ1xyXG4gICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW21hcmtTZWFyY2hSZXN1bHRzPWZhbHNlXSAtIE1hcmsgbWF0Y2hlZCB0ZXJtIGluIGxhYmVsXHJcbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IFt0b29sdGlwRm9udFNpemU9MTRweF0gLSBGb250IHNpemUgZm9yIHRvb2x0aXBcclxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gW3Rvb2x0aXBBbGlnbm1lbnQ9Y2VudGVyXSAtIENTUyBUZXh0IGFsaWdubWVudCBmb3IgdG9vbHRpcFxyXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbdG9vbHRpcE1heFdpZHRoPTMwMHB4XSAtIENTUyBtYXggd2lkdGggZm9yIHRvb2x0aXBcclxuICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtzaG93U2VsZWN0ZWRPcHRpb25zRmlyc3Q9ZmFsc2VdIC0gU2hvdyBzZWxlY3RlZCBvcHRpb25zIGF0IHRoZSB0b3Agb2YgdGhlIGRyb3Bib3hcclxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gW25hbWVdIC0gTmFtZSBhdHRyaWJ1dGUgZm9yIGhpZGRlbiBpbnB1dFxyXG4gICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2tlZXBBbHdheXNPcGVuXSAtIEtlZXAgZHJvcGJveCBhbHdheXMgb3BlbiB3aXRoIGZpeGVkIGhlaWdodFxyXG4gICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBbbWF4VmFsdWVzPTBdIC0gTWF4aW11bSBuby5vZiBvcHRpb25zIGFsbG93ZWQgdG8gY2hvb3NlIGluIG11bHRpcGxlIHNlbGVjdFxyXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbYWRkaXRpb25hbENsYXNzZXNdIC0gQWRkaXRpb25hbCBjbGFzc2VzIGZvciB3cmFwcGVyIGVsZW1lbnRcclxuICAgKiBAcHJvcGVydHkge2Jvb2xlYW59IFtzaG93RHJvcGJveEFzUG9wdXA9dHJ1ZV0gLSBTaG93IGRyb3Bib3ggYXMgcG9wdXAgb24gc21hbGwgc2NyZWVuIGxpa2UgbW9iaWxlXHJcbiAgICogQHByb3BlcnR5IHtzdHJpbmd9IFtwb3B1cERyb3Bib3hCcmVha3BvaW50PTU3NnB4XSAtIE1heGltdW0gc2NyZWVuIHdpZHRoIHRoYXQgYWxsb3dlZCB0byBzaG93IGRyb3Bib3ggYXMgcG9wdXBcclxuICAgKiBAcHJvcGVydHkge2Z1bmN0aW9ufSBbb25TZXJ2ZXJTZWFyY2hdIC0gQ2FsbGJhY2sgZnVuY3Rpb24gdG8gaW50ZWdyYXRlIHNlcnZlciBzZWFyY2hcclxuICAgKiBAcHJvcGVydHkge3N0cmluZ30gW3NlYXJjaFBsYWNlaG9sZGVyPVNlYXJjaC4uLl0gLSBUZXh0IHRvIHNob3cgaW5zaWRlIHNlYXJjaCBpbnB1dFxyXG4gICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gW2FsbG93Tm9uZU9wdGlvbj1mYWxzZV0gLSBJbiBzaW5nbGUgc2VsZWN0aW9uIG1vZGUgb25seSBhbmQgd2hlbiBrZWVwIGFsd2F5cyBvcGVuIGlzIG9uOiBkaXNwbGF5IGEgbm9uZSBvcHRpb24gdGhhdCBjbGVhcnMgdGhlIHNlbGVjdGlvblxyXG4gICAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBbbm9uZU9wdGlvblRleHQ9Tm9uZV0gLSBUZXh0IHRvIGJlIGRpc3BsYXkgaWYgYWxsb3dOb25lIG9wdGlvbiBpcyBhY3RpdmVcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICB0aGlzLnNldFByb3BzKG9wdGlvbnMpO1xyXG4gICAgICB0aGlzLnNldERpc2FibGVkT3B0aW9ucyhvcHRpb25zLmRpc2FibGVkT3B0aW9ucyk7XHJcbiAgICAgIHRoaXMuc2V0T3B0aW9ucyhvcHRpb25zLm9wdGlvbnMpO1xyXG4gICAgICB0aGlzLnJlbmRlcigpO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICBjb25zb2xlLndhcm4oYENvdWxkbid0IGluaXRpYXRlIFZpcnR1YWwgU2VsZWN0YCk7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKiogcmVuZGVyIG1ldGhvZHMgLSBzdGFydCAqL1xyXG4gIHJlbmRlcigpIHtcclxuICAgIGlmICghdGhpcy4kZWxlKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgd3JhcHBlckNsYXNzZXMgPSAndnNjb21wLXdyYXBwZXInO1xyXG4gICAgbGV0IHZhbHVlVG9vbHRpcCA9IHRoaXMuZ2V0VG9vbHRpcEF0dHJUZXh0KCcnLCAhdGhpcy5tdWx0aXBsZSwgdHJ1ZSk7XHJcbiAgICBsZXQgY2xlYXJCdXR0b25Ub29sdGlwID0gdGhpcy5nZXRUb29sdGlwQXR0clRleHQoJ0NsZWFyJyk7XHJcblxyXG4gICAgbGV0IGRyb3Bib3hDb250YWluZXJTdHlsZSA9IHtcclxuICAgICAgJ3otaW5kZXgnOiB0aGlzLnpJbmRleCxcclxuICAgIH07XHJcblxyXG4gICAgaWYgKHRoaXMuYWRkaXRpb25hbENsYXNzZXMpIHtcclxuICAgICAgd3JhcHBlckNsYXNzZXMgKz0gJyAnICsgdGhpcy5hZGRpdGlvbmFsQ2xhc3NlcztcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5tdWx0aXBsZSkge1xyXG4gICAgICB3cmFwcGVyQ2xhc3NlcyArPSAnIG11bHRpcGxlJztcclxuXHJcbiAgICAgIGlmICghdGhpcy5kaXNhYmxlU2VsZWN0QWxsKSB7XHJcbiAgICAgICAgd3JhcHBlckNsYXNzZXMgKz0gJyBoYXMtc2VsZWN0LWFsbCc7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5wb3NpdGlvbiA9PT0gJ3RvcCcpIHtcclxuICAgICAgd3JhcHBlckNsYXNzZXMgKz0gJyBwb3NpdGlvbi10b3AnO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghdGhpcy5oaWRlQ2xlYXJCdXR0b24pIHtcclxuICAgICAgd3JhcHBlckNsYXNzZXMgKz0gJyBoYXMtY2xlYXItYnV0dG9uJztcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5rZWVwQWx3YXlzT3Blbikge1xyXG4gICAgICB3cmFwcGVyQ2xhc3NlcyArPSAnIGtlZXAtYWx3YXlzLW9wZW4gb3BlbmVkJztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHdyYXBwZXJDbGFzc2VzICs9ICcgY2xvc2VkJztcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5zaG93QXNQb3B1cCkge1xyXG4gICAgICB3cmFwcGVyQ2xhc3NlcyArPSAnIHNob3ctYXMtcG9wdXAnO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgaWYgKHRoaXMuZHJvcGJveFdpZHRoKSB7XHJcbiAgICAgICAgZHJvcGJveENvbnRhaW5lclN0eWxlLndpZHRoID0gdGhpcy5kcm9wYm94V2lkdGg7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5oYXNTZWFyY2gpIHtcclxuICAgICAgd3JhcHBlckNsYXNzZXMgKz0gJyBoYXMtc2VhcmNoLWlucHV0JztcclxuICAgIH1cclxuXHJcbiAgICBsZXQgaHRtbCA9IGA8ZGl2IGNsYXNzPVwiJHt3cmFwcGVyQ2xhc3Nlc31cIiB0YWJpbmRleD1cIjBcIj5cclxuICAgICAgICA8aW5wdXQgdHlwZT1cImhpZGRlblwiIG5hbWU9XCIke3RoaXMubmFtZX1cIiBjbGFzcz1cInZzY29tcC1oaWRkZW4taW5wdXRcIj5cclxuXHJcbiAgICAgICAgPGRpdiBjbGFzcz1cInZzY29tcC10b2dnbGUtYnV0dG9uXCI+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwidnNjb21wLXZhbHVlXCIgJHt2YWx1ZVRvb2x0aXB9PlxyXG4gICAgICAgICAgICAke3RoaXMucGxhY2Vob2xkZXJ9XHJcbiAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwidnNjb21wLWFycm93XCI+PC9kaXY+XHJcblxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cInZzY29tcC1jbGVhci1idXR0b24gdG9nZ2xlLWJ1dHRvbi1jaGlsZFwiICR7Y2xlYXJCdXR0b25Ub29sdGlwfT5cclxuICAgICAgICAgICAgPGkgY2xhc3M9XCJ2c2NvbXAtY2xlYXItaWNvblwiPjwvaT5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwidnNjb21wLWRyb3Bib3gtY29udGFpbmVyXCIgJHtEb21VdGlscy5nZXRTdHlsZVRleHQoXHJcbiAgICAgICAgICBkcm9wYm94Q29udGFpbmVyU3R5bGVcclxuICAgICAgICApfT5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJ2c2NvbXAtZHJvcGJveFwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwidnNjb21wLXNlYXJjaC13cmFwcGVyXCI+PC9kaXY+XHJcblxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwidnNjb21wLW9wdGlvbnMtY29udGFpbmVyXCI+XHJcbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInZzY29tcC1vcHRpb25zLWxvYWRlclwiPjwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidnNjb21wLW9wdGlvbnMtbGlzdFwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInZzY29tcC1vcHRpb25zXCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInZzY29tcC1uby1vcHRpb25zXCI+JHt0aGlzLm5vT3B0aW9uc1RleHR9PC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ2c2NvbXAtbm8tc2VhcmNoLXJlc3VsdHNcIj4ke1xyXG4gICAgICAgICAgICAgIHRoaXMubm9TZWFyY2hSZXN1bHRzVGV4dFxyXG4gICAgICAgICAgICB9PC9kaXY+XHJcblxyXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInZzY29tcC1kcm9wYm94LWNsb3NlLWJ1dHRvblwiPjxpIGNsYXNzPVwidnNjb21wLWNsZWFyLWljb25cIj48L2k+PC9zcGFuPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PmA7XHJcblxyXG4gICAgdGhpcy4kZWxlLmlubmVySFRNTCA9IGh0bWw7XHJcbiAgICB0aGlzLiRib2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpO1xyXG4gICAgdGhpcy4kd3JhcHBlciA9IHRoaXMuJGVsZS5xdWVyeVNlbGVjdG9yKCcudnNjb21wLXdyYXBwZXInKTtcclxuICAgIHRoaXMuJHRvZ2dsZUJ1dHRvbiA9IHRoaXMuJGVsZS5xdWVyeVNlbGVjdG9yKCcudnNjb21wLXRvZ2dsZS1idXR0b24nKTtcclxuICAgIHRoaXMuJGNsZWFyQnV0dG9uID0gdGhpcy4kZWxlLnF1ZXJ5U2VsZWN0b3IoJy52c2NvbXAtY2xlYXItYnV0dG9uJyk7XHJcbiAgICB0aGlzLiRkcm9wYm94Q29udGFpbmVyID0gdGhpcy4kZWxlLnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgICcudnNjb21wLWRyb3Bib3gtY29udGFpbmVyJ1xyXG4gICAgKTtcclxuICAgIHRoaXMuJGRyb3Bib3hDbG9zZUJ1dHRvbiA9IHRoaXMuJGVsZS5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAnLnZzY29tcC1kcm9wYm94LWNsb3NlLWJ1dHRvbidcclxuICAgICk7XHJcbiAgICB0aGlzLiRzZWFyY2ggPSB0aGlzLiRlbGUucXVlcnlTZWxlY3RvcignLnZzY29tcC1zZWFyY2gtd3JhcHBlcicpO1xyXG4gICAgdGhpcy4kb3B0aW9uc0NvbnRhaW5lciA9IHRoaXMuJGVsZS5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAnLnZzY29tcC1vcHRpb25zLWNvbnRhaW5lcidcclxuICAgICk7XHJcbiAgICB0aGlzLiRvcHRpb25zTGlzdCA9IHRoaXMuJGVsZS5xdWVyeVNlbGVjdG9yKCcudnNjb21wLW9wdGlvbnMtbGlzdCcpO1xyXG4gICAgdGhpcy4kb3B0aW9ucyA9IHRoaXMuJGVsZS5xdWVyeVNlbGVjdG9yKCcudnNjb21wLW9wdGlvbnMnKTtcclxuICAgIHRoaXMuJHZhbHVlVGV4dCA9IHRoaXMuJGVsZS5xdWVyeVNlbGVjdG9yKCcudnNjb21wLXZhbHVlJyk7XHJcbiAgICB0aGlzLiRoaWRkZW5JbnB1dCA9IHRoaXMuJGVsZS5xdWVyeVNlbGVjdG9yKCcudnNjb21wLWhpZGRlbi1pbnB1dCcpO1xyXG4gICAgdGhpcy4kbm9PcHRpb25zID0gdGhpcy4kZWxlLnF1ZXJ5U2VsZWN0b3IoJy52c2NvbXAtbm8tb3B0aW9ucycpO1xyXG4gICAgdGhpcy4kbm9TZWFyY2hSZXN1bHRzID0gdGhpcy4kZWxlLnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgICcudnNjb21wLW5vLXNlYXJjaC1yZXN1bHRzJ1xyXG4gICAgKTtcclxuXHJcbiAgICB0aGlzLmFmdGVyUmVuZGVyV3JhcHBlcigpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyT3B0aW9ucygpIHtcclxuICAgIGxldCBodG1sID0gJyc7XHJcbiAgICBsZXQgdmlzaWJsZU9wdGlvbnMgPSB0aGlzLmdldFZpc2libGVPcHRpb25zKCk7XHJcbiAgICBsZXQgY2hlY2tib3hIdG1sID0gJyc7XHJcbiAgICBsZXQgbmV3T3B0aW9uSWNvbkh0bWwgPSAnJztcclxuICAgIGxldCBtYXJrU2VhcmNoUmVzdWx0cyA9XHJcbiAgICAgIHRoaXMubWFya1NlYXJjaFJlc3VsdHMgJiYgdGhpcy5zZWFyY2hWYWx1ZSA/IHRydWUgOiBmYWxzZTtcclxuICAgIGxldCBzZWFyY2hSZWdleDtcclxuXHJcbiAgICBsZXQgc3R5bGVUZXh0ID0gRG9tVXRpbHMuZ2V0U3R5bGVUZXh0KHtcclxuICAgICAgaGVpZ2h0OiB0aGlzLm9wdGlvbkhlaWdodCArICdweCcsXHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAobWFya1NlYXJjaFJlc3VsdHMpIHtcclxuICAgICAgc2VhcmNoUmVnZXggPSBuZXcgUmVnRXhwKGAoJHt0aGlzLnNlYXJjaFZhbHVlfSlgLCAnZ2knKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5tdWx0aXBsZSkge1xyXG4gICAgICBjaGVja2JveEh0bWwgPSAnPHNwYW4gY2xhc3M9XCJjaGVja2JveC1pY29uXCI+PC9zcGFuPic7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuYWxsb3dOZXdPcHRpb24pIHtcclxuICAgICAgbGV0IG5ld09wdGlvblRvb2x0aXAgPSB0aGlzLmdldFRvb2x0aXBBdHRyVGV4dCgnTmV3IE9wdGlvbicpO1xyXG4gICAgICBuZXdPcHRpb25JY29uSHRtbCA9IGA8c3BhbiBjbGFzcz1cInZzY29tcC1uZXctb3B0aW9uLWljb25cIiAke25ld09wdGlvblRvb2x0aXB9Pjwvc3Bhbj5gO1xyXG4gICAgfVxyXG5cclxuICAgIHZpc2libGVPcHRpb25zLmZvckVhY2goKGQpID0+IHtcclxuICAgICAgbGV0IG9wdGlvbkxhYmVsID0gZC5sYWJlbDtcclxuICAgICAgbGV0IG9wdGlvbkNsYXNzZXMgPSAndnNjb21wLW9wdGlvbic7XHJcbiAgICAgIGxldCBvcHRpb25Ub29sdGlwID0gdGhpcy5nZXRUb29sdGlwQXR0clRleHQoJycsIHRydWUpO1xyXG4gICAgICBsZXQgbGVmdFNlY3Rpb24gPSBjaGVja2JveEh0bWw7XHJcbiAgICAgIGxldCByaWdodFNlY3Rpb24gPSAnJztcclxuICAgICAgbGV0IGRlc2NyaXB0aW9uID0gJyc7XHJcblxyXG4gICAgICBpZiAoZC5pc0ZvY3VzZWQpIHtcclxuICAgICAgICBvcHRpb25DbGFzc2VzICs9ICcgZm9jdXNlZCc7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChkLmlzRGlzYWJsZWQpIHtcclxuICAgICAgICBvcHRpb25DbGFzc2VzICs9ICcgZGlzYWJsZWQnO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoZC5pc0dyb3VwVGl0bGUpIHtcclxuICAgICAgICBvcHRpb25DbGFzc2VzICs9ICcgZ3JvdXAtdGl0bGUnO1xyXG4gICAgICAgIGxlZnRTZWN0aW9uID0gJyc7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKGQuaXNTZWxlY3RlZCkge1xyXG4gICAgICAgICAgb3B0aW9uQ2xhc3NlcyArPSAnIHNlbGVjdGVkJztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChkLmlzR3JvdXBPcHRpb24pIHtcclxuICAgICAgICBvcHRpb25DbGFzc2VzICs9ICcgZ3JvdXAtb3B0aW9uJztcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKGQuZGVzY3JpcHRpb24pIHtcclxuICAgICAgICBkZXNjcmlwdGlvbiA9IGA8ZGl2IGNsYXNzPVwidnNjb21wLW9wdGlvbi1kZXNjcmlwdGlvblwiICR7b3B0aW9uVG9vbHRpcH0+JHtkLmRlc2NyaXB0aW9ufTwvZGl2PmA7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChkLmlzQ3VycmVudE5ldykge1xyXG4gICAgICAgIG9wdGlvbkNsYXNzZXMgKz0gJyBjdXJyZW50LW5ldyc7XHJcbiAgICAgICAgcmlnaHRTZWN0aW9uICs9IG5ld09wdGlvbkljb25IdG1sO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmIChtYXJrU2VhcmNoUmVzdWx0cyAmJiAhZC5pc0dyb3VwVGl0bGUpIHtcclxuICAgICAgICAgIG9wdGlvbkxhYmVsID0gb3B0aW9uTGFiZWwucmVwbGFjZShzZWFyY2hSZWdleCwgJzxtYXJrPiQxPC9tYXJrPicpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgaHRtbCArPSBgPGRpdiBjbGFzcz1cIiR7b3B0aW9uQ2xhc3Nlc31cIiBkYXRhLXZhbHVlPVwiJHtcclxuICAgICAgICBkLnZhbHVlXHJcbiAgICAgIH1cIiBkYXRhLWluZGV4PVwiJHtkLmluZGV4fVwiIGRhdGEtdmlzaWJsZS1pbmRleD1cIiR7XHJcbiAgICAgICAgZC52aXNpYmxlSW5kZXhcclxuICAgICAgfVwiICR7c3R5bGVUZXh0fT5cclxuICAgICAgICAgICR7bGVmdFNlY3Rpb259XHJcbiAgICAgICAgICA8c3BhbiBjbGFzcz1cInZzY29tcC1vcHRpb24tdGV4dCAke1xyXG4gICAgICAgICAgICBkLnZhbHVlID09PSBub25lT3B0aW9uVmFsdWUgPyAnbm9uZScgOiAnJ1xyXG4gICAgICAgICAgfVwiICR7b3B0aW9uVG9vbHRpcH0+XHJcbiAgICAgICAgICAgICR7b3B0aW9uTGFiZWx9XHJcbiAgICAgICAgICA8L3NwYW4+XHJcbiAgICAgICAgICAke2Rlc2NyaXB0aW9ufVxyXG4gICAgICAgICAgJHtyaWdodFNlY3Rpb259XHJcbiAgICAgICAgPC9kaXY+YDtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuJG9wdGlvbnMuaW5uZXJIVE1MID0gaHRtbDtcclxuICAgIGxldCBoYXNOb09wdGlvbnMgPSAhdGhpcy5vcHRpb25zLmxlbmd0aDtcclxuICAgIGxldCBoYXNOb1NlYXJjaFJlc3VsdHMgPSAhaGFzTm9PcHRpb25zICYmICF2aXNpYmxlT3B0aW9ucy5sZW5ndGg7XHJcblxyXG4gICAgaWYgKCF0aGlzLmFsbG93TmV3T3B0aW9uKSB7XHJcbiAgICAgIERvbVV0aWxzLnRvZ2dsZUNsYXNzKFxyXG4gICAgICAgIHRoaXMuJHdyYXBwZXIsXHJcbiAgICAgICAgJ2hhcy1uby1zZWFyY2gtcmVzdWx0cycsXHJcbiAgICAgICAgaGFzTm9TZWFyY2hSZXN1bHRzXHJcbiAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgRG9tVXRpbHMudG9nZ2xlQ2xhc3ModGhpcy4kd3JhcHBlciwgJ2hhcy1uby1vcHRpb25zJywgaGFzTm9PcHRpb25zKTtcclxuICAgIHRoaXMuc2V0T3B0aW9uc1Bvc2l0aW9uKCk7XHJcbiAgICB0aGlzLnNldE9wdGlvbnNUb29sdGlwKCk7XHJcbiAgICAvL3RoaXMubW92ZUZvY3VzZWRPcHRpb25Ub1ZpZXcoKTtcclxuICB9XHJcblxyXG4gIHJlbmRlclNlYXJjaCgpIHtcclxuICAgIGlmICghdGhpcy5oYXNTZWFyY2hDb250YWluZXIpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBjaGVja2JveEh0bWwgPSAnJztcclxuICAgIGxldCBzZWFyY2hJbnB1dCA9ICcnO1xyXG5cclxuICAgIGlmICh0aGlzLm11bHRpcGxlICYmICF0aGlzLmRpc2FibGVTZWxlY3RBbGwpIHtcclxuICAgICAgY2hlY2tib3hIdG1sID0gYDxzcGFuIGNsYXNzPVwidnNjb21wLXRvZ2dsZS1hbGwtYnV0dG9uXCI+XHJcbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImNoZWNrYm94LWljb24gdnNjb21wLXRvZ2dsZS1hbGwtY2hlY2tib3hcIj48L3NwYW4+XHJcbiAgICAgICAgICA8c3BhbiBjbGFzcz1cInZzY29tcC10b2dnbGUtYWxsLWxhYmVsXCI+JHt0aGlzLnNlbGVjdEFsbFRleHR9PC9zcGFuPlxyXG4gICAgICAgIDwvc3Bhbj5gO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLmhhc1NlYXJjaCkge1xyXG4gICAgICBzZWFyY2hJbnB1dCA9IGA8aW5wdXQgdHlwZT1cInRleHRcIiBjbGFzcz1cInZzY29tcC1zZWFyY2gtaW5wdXRcIiBwbGFjZWhvbGRlcj1cIiR7dGhpcy5zZWFyY2hQbGFjZWhvbGRlcn1cIj5cclxuICAgICAgPHNwYW4gY2xhc3M9XCJ2c2NvbXAtc2VhcmNoLWNsZWFyXCI+JnRpbWVzOzwvc3Bhbj5gO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBodG1sID0gYDxkaXYgY2xhc3M9XCJ2c2NvbXAtc2VhcmNoLWNvbnRhaW5lclwiPlxyXG4gICAgICAgICR7Y2hlY2tib3hIdG1sfVxyXG4gICAgICAgICR7c2VhcmNoSW5wdXR9XHJcbiAgICAgIDwvZGl2PmA7XHJcblxyXG4gICAgdGhpcy4kc2VhcmNoLmlubmVySFRNTCA9IGh0bWw7XHJcbiAgICB0aGlzLiRzZWFyY2hJbnB1dCA9IHRoaXMuJGVsZS5xdWVyeVNlbGVjdG9yKCcudnNjb21wLXNlYXJjaC1pbnB1dCcpO1xyXG4gICAgdGhpcy4kc2VhcmNoQ2xlYXIgPSB0aGlzLiRlbGUucXVlcnlTZWxlY3RvcignLnZzY29tcC1zZWFyY2gtY2xlYXInKTtcclxuICAgIHRoaXMuJHRvZ2dsZUFsbEJ1dHRvbiA9IHRoaXMuJGVsZS5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAnLnZzY29tcC10b2dnbGUtYWxsLWJ1dHRvbidcclxuICAgICk7XHJcbiAgICB0aGlzLiR0b2dnbGVBbGxDaGVja2JveCA9IHRoaXMuJGVsZS5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAnLnZzY29tcC10b2dnbGUtYWxsLWNoZWNrYm94J1xyXG4gICAgKTtcclxuXHJcbiAgICB0aGlzLmFkZEV2ZW50KHRoaXMuJHNlYXJjaElucHV0LCAna2V5dXAgY2hhbmdlJywgJ29uU2VhcmNoJyk7XHJcbiAgICB0aGlzLmFkZEV2ZW50KHRoaXMuJHNlYXJjaENsZWFyLCAnY2xpY2snLCAnb25TZWFyY2hDbGVhcicpO1xyXG4gICAgdGhpcy5hZGRFdmVudCh0aGlzLiR0b2dnbGVBbGxCdXR0b24sICdjbGljaycsICdvblRvZ2dsZUFsbE9wdGlvbnMnKTtcclxuICB9XHJcblxyXG4gIC8qKiByZW5kZXIgbWV0aG9kcyAtIGVuZCAqL1xyXG5cclxuICAvKiogZG9tIGV2ZW50IG1ldGhvZHMgLSBzdGFydCAqL1xyXG4gIGFkZEV2ZW50cygpIHtcclxuICAgIHRoaXMuYWRkRXZlbnQoZG9jdW1lbnQsICdjbGljaycsICdvbkRvY3VtZW50Q2xpY2snKTtcclxuICAgIHRoaXMuYWRkRXZlbnQodGhpcy4kd3JhcHBlciwgJ2tleWRvd24nLCAnb25LZXlEb3duJyk7XHJcbiAgICB0aGlzLmFkZEV2ZW50KHRoaXMuJHRvZ2dsZUJ1dHRvbiwgJ2NsaWNrJywgJ29uVG9nZ2xlQnV0dG9uQ2xpY2snKTtcclxuICAgIHRoaXMuYWRkRXZlbnQodGhpcy4kY2xlYXJCdXR0b24sICdjbGljaycsICdvbkNsZWFyQnV0dG9uQ2xpY2snKTtcclxuICAgIHRoaXMuYWRkRXZlbnQodGhpcy4kZHJvcGJveENvbnRhaW5lciwgJ2NsaWNrJywgJ29uRHJvcGJveENvbnRhaW5lckNsaWNrJyk7XHJcbiAgICB0aGlzLmFkZEV2ZW50KFxyXG4gICAgICB0aGlzLiRkcm9wYm94Q2xvc2VCdXR0b24sXHJcbiAgICAgICdjbGljaycsXHJcbiAgICAgICdvbkRyb3Bib3hDbG9zZUJ1dHRvbkNsaWNrJ1xyXG4gICAgKTtcclxuXHJcbiAgICB0aGlzLmFkZEV2ZW50KHRoaXMuJG9wdGlvbnNDb250YWluZXIsICdzY3JvbGwnLCAnb25PcHRpb25zU2Nyb2xsJyk7XHJcblxyXG4gICAgdGhpcy5hZGRFdmVudCh0aGlzLiRvcHRpb25zLCAnY2xpY2snLCAnb25PcHRpb25zQ2xpY2snKTtcclxuICAgIHRoaXMuYWRkRXZlbnQodGhpcy4kb3B0aW9ucywgJ21vdXNlb3ZlcicsICdvbk9wdGlvbnNNb3VzZU92ZXInKTtcclxuICAgIHRoaXMuYWRkRXZlbnQodGhpcy4kb3B0aW9ucywgJ3RvdWNobW92ZScsICdvbk9wdGlvbnNUb3VjaE1vdmUnKTtcclxuICB9XHJcblxyXG4gIGFkZEV2ZW50KCRlbGUsIGV2ZW50cywgbWV0aG9kKSB7XHJcbiAgICBpZiAoISRlbGUpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGV2ZW50cyA9IFV0aWxzLnJlbW92ZUFycmF5RW1wdHkoZXZlbnRzLnNwbGl0KCcgJykpO1xyXG5cclxuICAgIGV2ZW50cy5mb3JFYWNoKChldmVudCkgPT4ge1xyXG4gICAgICBsZXQgZXZlbnRzS2V5ID0gYCR7bWV0aG9kfS0ke2V2ZW50fWA7XHJcbiAgICAgIGxldCBjYWxsYmFjayA9IHRoaXMuZXZlbnRzW2V2ZW50c0tleV07XHJcblxyXG4gICAgICBpZiAoIWNhbGxiYWNrKSB7XHJcbiAgICAgICAgY2FsbGJhY2sgPSB0aGlzW21ldGhvZF0uYmluZCh0aGlzKTtcclxuICAgICAgICB0aGlzLmV2ZW50c1tldmVudHNLZXldID0gY2FsbGJhY2s7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgICRlbGUgPSBEb21VdGlscy5nZXRFbGVtZW50cygkZWxlKTtcclxuXHJcbiAgICAgICRlbGUuZm9yRWFjaCgoX3RoaXMpID0+IHtcclxuICAgICAgICBfdGhpcy5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBjYWxsYmFjayk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBkaXNwYXRjaEV2ZW50KCRlbGUsIGV2ZW50TmFtZSkge1xyXG4gICAgaWYgKCEkZWxlKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICAkZWxlID0gRG9tVXRpbHMuZ2V0RWxlbWVudHMoJGVsZSk7XHJcblxyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICRlbGUuZm9yRWFjaCgoX3RoaXMpID0+IHtcclxuICAgICAgICBfdGhpcy5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudChldmVudE5hbWUsIHsgYnViYmxlczogdHJ1ZSB9KSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSwgMCk7XHJcbiAgfVxyXG5cclxuICBvbkRvY3VtZW50Q2xpY2soZSkge1xyXG4gICAgbGV0ICRlbGVUb0tlZXBPcGVuID0gZS50YXJnZXQuY2xvc2VzdCgnLnZzY29tcC13cmFwcGVyJyk7XHJcblxyXG4gICAgaWYgKCRlbGVUb0tlZXBPcGVuICE9PSB0aGlzLiR3cmFwcGVyKSB7XHJcbiAgICAgIHRoaXMuY2xvc2VEcm9wYm94KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvbktleURvd24oZSkge1xyXG4gICAgbGV0IGtleSA9IGUud2hpY2ggfHwgZS5rZXlDb2RlO1xyXG4gICAgbGV0IG1ldGhvZCA9IGtleURvd25NZXRob2RNYXBwaW5nW2tleV07XHJcblxyXG4gICAgaWYgKG1ldGhvZCkge1xyXG4gICAgICB0aGlzW21ldGhvZF0oZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvbkVudGVyUHJlc3MoKSB7XHJcbiAgICBpZiAoIXRoaXMuaXNPcGVuZWQoKSkge1xyXG4gICAgICB0aGlzLm9wZW5Ecm9wYm94KCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnNlbGVjdEZvY3VzZWRPcHRpb24oKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG9uRXNjUHJlc3MoKSB7XHJcbiAgICBpZiAodGhpcy5pc09wZW5lZCgpKSB7XHJcbiAgICAgIHRoaXMuY2xvc2VEcm9wYm94KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvbkRvd25BcnJvd1ByZXNzKGUpIHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICBpZiAodGhpcy5pc09wZW5lZCgpKSB7XHJcbiAgICAgIHRoaXMuZm9jdXNPcHRpb24oJ25leHQnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMub3BlbkRyb3Bib3goKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG9uVXBBcnJvd1ByZXNzKGUpIHtcclxuICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuXHJcbiAgICBpZiAodGhpcy5pc09wZW5lZCgpKSB7XHJcbiAgICAgIHRoaXMuZm9jdXNPcHRpb24oJ3ByZXZpb3VzJyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLm9wZW5Ecm9wYm94KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBvblRvZ2dsZUJ1dHRvbkNsaWNrKGUpIHtcclxuICAgIGxldCBjaGlsZEVsZSA9IGUudGFyZ2V0LmNsb3Nlc3QoJy50b2dnbGUtYnV0dG9uLWNoaWxkJyk7XHJcblxyXG4gICAgaWYgKGNoaWxkRWxlKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnRvZ2dsZURyb3Bib3goKTtcclxuICB9XHJcblxyXG4gIG9uQ2xlYXJCdXR0b25DbGljaygpIHtcclxuICAgIHRoaXMucmVzZXQoKTtcclxuICB9XHJcblxyXG4gIG9uT3B0aW9uc1Njcm9sbCgpIHtcclxuICAgIHRoaXMuc2V0VmlzaWJsZU9wdGlvbnMoKTtcclxuICB9XHJcblxyXG4gIG9uT3B0aW9uc0NsaWNrKGUpIHtcclxuICAgIHRoaXMuc2VsZWN0T3B0aW9uKFxyXG4gICAgICBlLnRhcmdldC5jbG9zZXN0KCcudnNjb21wLW9wdGlvbjpub3QoLmRpc2FibGVkKTpub3QoLmdyb3VwLXRpdGxlKScpXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgb25Ecm9wYm94Q29udGFpbmVyQ2xpY2soZSkge1xyXG4gICAgaWYgKCFlLnRhcmdldC5jbG9zZXN0KCcudnNjb21wLWRyb3Bib3gnKSkge1xyXG4gICAgICB0aGlzLmNsb3NlRHJvcGJveCgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgb25Ecm9wYm94Q2xvc2VCdXR0b25DbGljaygpIHtcclxuICAgIHRoaXMuY2xvc2VEcm9wYm94KCk7XHJcbiAgfVxyXG5cclxuICBvbk9wdGlvbnNNb3VzZU92ZXIoZSkge1xyXG4gICAgbGV0ICRlbGUgPSBlLnRhcmdldC5jbG9zZXN0KFxyXG4gICAgICAnLnZzY29tcC1vcHRpb246bm90KC5kaXNhYmxlZCk6bm90KC5ncm91cC10aXRsZSknXHJcbiAgICApO1xyXG5cclxuICAgIGlmICgkZWxlICYmIHRoaXMuaXNPcGVuZWQoKSkge1xyXG4gICAgICB0aGlzLmZvY3VzT3B0aW9uKG51bGwsICRlbGUpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgb25PcHRpb25zVG91Y2hNb3ZlKCkge1xyXG4gICAgdGhpcy5yZW1vdmVPcHRpb25Gb2N1cygpO1xyXG4gIH1cclxuXHJcbiAgb25TZWFyY2goZSkge1xyXG4gICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgIHRoaXMuc2V0U2VhcmNoVmFsdWUoZS50YXJnZXQudmFsdWUsIHRydWUpO1xyXG4gIH1cclxuXHJcbiAgb25TZWFyY2hDbGVhcigpIHtcclxuICAgIHRoaXMuc2V0U2VhcmNoVmFsdWUoJycpO1xyXG4gICAgdGhpcy5mb2N1c1NlYXJjaElucHV0KCk7XHJcbiAgfVxyXG5cclxuICBvblRvZ2dsZUFsbE9wdGlvbnMoKSB7XHJcbiAgICB0aGlzLnRvZ2dsZUFsbE9wdGlvbnMoKTtcclxuICB9XHJcblxyXG4gIG9uUmVzaXplKCkge1xyXG4gICAgdGhpcy5zZXRPcHRpb25zQ29udGFpbmVySGVpZ2h0KHRydWUpO1xyXG4gIH1cclxuICAvKiogZG9tIGV2ZW50IG1ldGhvZHMgLSBlbmQgKi9cclxuXHJcbiAgLyoqIGFmdGVyIGV2ZW50IG1ldGhvZHMgLSBzdGFydCAqL1xyXG4gIGFmdGVyUmVuZGVyV3JhcHBlcigpIHtcclxuICAgIHRoaXMuJGVsZS5zZXRBdHRyaWJ1dGUoJ25hbWUnLCB0aGlzLm5hbWUpO1xyXG5cclxuICAgIERvbVV0aWxzLmFkZENsYXNzKHRoaXMuJGVsZSwgJ3ZzY29tcC1lbGUnKTtcclxuICAgIHRoaXMucmVuZGVyU2VhcmNoKCk7XHJcbiAgICB0aGlzLnNldE9wdGlvbnNIZWlnaHQoKTtcclxuICAgIHRoaXMuc2V0VmlzaWJsZU9wdGlvbnMoKTtcclxuICAgIHRoaXMuc2V0T3B0aW9uc0NvbnRhaW5lckhlaWdodCgpO1xyXG4gICAgdGhpcy5hZGRFdmVudHMoKTtcclxuICAgIHRoaXMuc2V0TWV0aG9kcygpO1xyXG5cclxuICAgIGlmICh0aGlzLmluaXRpYWxTZWxlY3RlZFZhbHVlKSB7XHJcbiAgICAgIHRoaXMuc2V0VmFsdWVNZXRob2QoXHJcbiAgICAgICAgdGhpcy5pbml0aWFsU2VsZWN0ZWRWYWx1ZSxcclxuICAgICAgICB0aGlzLnNpbGVudEluaXRpYWxWYWx1ZVNldFxyXG4gICAgICApO1xyXG4gICAgfSBlbHNlIGlmICh0aGlzLmF1dG9TZWxlY3RGaXJzdE9wdGlvbiAmJiB0aGlzLnZpc2libGVPcHRpb25zLmxlbmd0aCkge1xyXG4gICAgICB0aGlzLnNldFZhbHVlTWV0aG9kKFxyXG4gICAgICAgIHRoaXMudmlzaWJsZU9wdGlvbnNbMF0udmFsdWUsXHJcbiAgICAgICAgdGhpcy5zaWxlbnRJbml0aWFsVmFsdWVTZXRcclxuICAgICAgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFmdGVyU2V0T3B0aW9uc0NvbnRhaW5lckhlaWdodChyZXNldCkge1xyXG4gICAgaWYgKHJlc2V0KSB7XHJcbiAgICAgIGlmICh0aGlzLnNob3dBc1BvcHVwKSB7XHJcbiAgICAgICAgdGhpcy5zZXRWaXNpYmxlT3B0aW9ucygpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8qKiBhZnRlciBldmVudCBtZXRob2RzIC0gZW5kICovXHJcblxyXG4gIC8qKiBzZXQgbWV0aG9kcyAtIHN0YXJ0ICovXHJcbiAgc2V0UHJvcHMob3B0aW9ucykge1xyXG4gICAgb3B0aW9ucyA9IHRoaXMuc2V0RGVmYXVsdFByb3BzKG9wdGlvbnMpO1xyXG4gICAgdGhpcy5zZXRQcm9wc0Zyb21FbGVtZW50QXR0cihvcHRpb25zKTtcclxuXHJcbiAgICBsZXQgY29udmVydFRvQm9vbGVhbiA9IFV0aWxzLmNvbnZlcnRUb0Jvb2xlYW47XHJcblxyXG4gICAgdGhpcy4kZWxlID0gb3B0aW9ucy5lbGU7XHJcbiAgICB0aGlzLnZhbHVlS2V5ID0gb3B0aW9ucy52YWx1ZUtleTtcclxuICAgIHRoaXMubGFiZWxLZXkgPSBvcHRpb25zLmxhYmVsS2V5O1xyXG4gICAgdGhpcy5kZXNjcmlwdGlvbktleSA9IG9wdGlvbnMuZGVzY3JpcHRpb25LZXk7XHJcbiAgICB0aGlzLmFsaWFzS2V5ID0gb3B0aW9ucy5hbGlhc0tleTtcclxuICAgIHRoaXMub3B0aW9uSGVpZ2h0VGV4dCA9IG9wdGlvbnMub3B0aW9uSGVpZ2h0O1xyXG4gICAgdGhpcy5vcHRpb25IZWlnaHQgPSBwYXJzZUZsb2F0KHRoaXMub3B0aW9uSGVpZ2h0VGV4dCk7XHJcbiAgICB0aGlzLm11bHRpcGxlID0gY29udmVydFRvQm9vbGVhbihvcHRpb25zLm11bHRpcGxlKTtcclxuICAgIHRoaXMuaGFzU2VhcmNoID0gY29udmVydFRvQm9vbGVhbihvcHRpb25zLnNlYXJjaCk7XHJcbiAgICB0aGlzLmhpZGVDbGVhckJ1dHRvbiA9IGNvbnZlcnRUb0Jvb2xlYW4ob3B0aW9ucy5oaWRlQ2xlYXJCdXR0b24pO1xyXG4gICAgdGhpcy5hdXRvU2VsZWN0Rmlyc3RPcHRpb24gPSBjb252ZXJ0VG9Cb29sZWFuKFxyXG4gICAgICBvcHRpb25zLmF1dG9TZWxlY3RGaXJzdE9wdGlvblxyXG4gICAgKTtcclxuICAgIHRoaXMuaGFzT3B0aW9uRGVzY3JpcHRpb24gPSBjb252ZXJ0VG9Cb29sZWFuKG9wdGlvbnMuaGFzT3B0aW9uRGVzY3JpcHRpb24pO1xyXG4gICAgdGhpcy5zaWxlbnRJbml0aWFsVmFsdWVTZXQgPSBjb252ZXJ0VG9Cb29sZWFuKFxyXG4gICAgICBvcHRpb25zLnNpbGVudEluaXRpYWxWYWx1ZVNldFxyXG4gICAgKTtcclxuICAgIHRoaXMuYWxsb3dOZXdPcHRpb24gPSBjb252ZXJ0VG9Cb29sZWFuKG9wdGlvbnMuYWxsb3dOZXdPcHRpb24pO1xyXG4gICAgdGhpcy5tYXJrU2VhcmNoUmVzdWx0cyA9IGNvbnZlcnRUb0Jvb2xlYW4ob3B0aW9ucy5tYXJrU2VhcmNoUmVzdWx0cyk7XHJcbiAgICB0aGlzLnNob3dTZWxlY3RlZE9wdGlvbnNGaXJzdCA9IGNvbnZlcnRUb0Jvb2xlYW4oXHJcbiAgICAgIG9wdGlvbnMuc2hvd1NlbGVjdGVkT3B0aW9uc0ZpcnN0XHJcbiAgICApO1xyXG4gICAgdGhpcy5kaXNhYmxlU2VsZWN0QWxsID0gY29udmVydFRvQm9vbGVhbihvcHRpb25zLmRpc2FibGVTZWxlY3RBbGwpO1xyXG4gICAgdGhpcy5rZWVwQWx3YXlzT3BlbiA9IGNvbnZlcnRUb0Jvb2xlYW4ob3B0aW9ucy5rZWVwQWx3YXlzT3Blbik7XHJcbiAgICB0aGlzLnNob3dEcm9wYm94QXNQb3B1cCA9IGNvbnZlcnRUb0Jvb2xlYW4ob3B0aW9ucy5zaG93RHJvcGJveEFzUG9wdXApO1xyXG4gICAgdGhpcy5ub09wdGlvbnNUZXh0ID0gb3B0aW9ucy5ub09wdGlvbnNUZXh0O1xyXG4gICAgdGhpcy5ub1NlYXJjaFJlc3VsdHNUZXh0ID0gb3B0aW9ucy5ub1NlYXJjaFJlc3VsdHNUZXh0O1xyXG4gICAgdGhpcy5zZWxlY3RBbGxUZXh0ID0gb3B0aW9ucy5zZWxlY3RBbGxUZXh0O1xyXG4gICAgdGhpcy5wbGFjZWhvbGRlciA9IG9wdGlvbnMucGxhY2Vob2xkZXI7XHJcbiAgICB0aGlzLnBvc2l0aW9uID0gb3B0aW9ucy5wb3NpdGlvbjtcclxuICAgIHRoaXMuZHJvcGJveFdpZHRoID0gb3B0aW9ucy5kcm9wYm94V2lkdGg7XHJcbiAgICB0aGlzLnRvb2x0aXBGb250U2l6ZSA9IG9wdGlvbnMudG9vbHRpcEZvbnRTaXplO1xyXG4gICAgdGhpcy50b29sdGlwQWxpZ25tZW50ID0gb3B0aW9ucy50b29sdGlwQWxpZ25tZW50O1xyXG4gICAgdGhpcy50b29sdGlwTWF4V2lkdGggPSBvcHRpb25zLnRvb2x0aXBNYXhXaWR0aDtcclxuICAgIHRoaXMubm9PZkRpc3BsYXlWYWx1ZXMgPSBwYXJzZUludChvcHRpb25zLm5vT2ZEaXNwbGF5VmFsdWVzKTtcclxuICAgIHRoaXMuekluZGV4ID0gcGFyc2VJbnQob3B0aW9ucy56SW5kZXgpO1xyXG4gICAgdGhpcy5tYXhWYWx1ZXMgPSBwYXJzZUludChvcHRpb25zLm1heFZhbHVlcyk7XHJcbiAgICB0aGlzLm5hbWUgPSBvcHRpb25zLm5hbWU7XHJcbiAgICB0aGlzLmFkZGl0aW9uYWxDbGFzc2VzID0gb3B0aW9ucy5hZGRpdGlvbmFsQ2xhc3NlcztcclxuICAgIHRoaXMuaW5pdGlhbFNlbGVjdGVkVmFsdWUgPSBvcHRpb25zLnNlbGVjdGVkVmFsdWU7XHJcbiAgICB0aGlzLnBvcHVwRHJvcGJveEJyZWFrcG9pbnQgPSBvcHRpb25zLnBvcHVwRHJvcGJveEJyZWFrcG9pbnQ7XHJcbiAgICB0aGlzLm9uU2VydmVyU2VhcmNoID0gb3B0aW9ucy5vblNlcnZlclNlYXJjaDtcclxuICAgIHRoaXMuc2VhcmNoUGxhY2Vob2xkZXIgPSBvcHRpb25zLnNlYXJjaFBsYWNlaG9sZGVyO1xyXG4gICAgdGhpcy5pdGVtc1NlbGVjdGVkTWVzc2FnZSA9IG9wdGlvbnMuaXRlbXNTZWxlY3RlZE1lc3NhZ2U7XHJcbiAgICB0aGlzLmFsbG93Tm9uZU9wdGlvbiA9IG9wdGlvbnMuYWxsb3dOb25lT3B0aW9uO1xyXG4gICAgdGhpcy5ub25lT3B0aW9uVGV4dCA9IG9wdGlvbnMubm9uZU9wdGlvblRleHQ7XHJcblxyXG4gICAgdGhpcy5zZWxlY3RlZFZhbHVlcyA9IFtdO1xyXG4gICAgdGhpcy5zZWxlY3RlZEluZGV4ZXMgPSBbXTtcclxuICAgIHRoaXMubmV3VmFsdWVzID0gW107XHJcbiAgICB0aGlzLmV2ZW50cyA9IHt9O1xyXG4gICAgdGhpcy50b29sdGlwRW50ZXJEZWxheSA9IDIwMDtcclxuICAgIHRoaXMudHJhbnNpdGlvbkR1cmF0aW9uID0gMjUwO1xyXG4gICAgdGhpcy5zZWFyY2hWYWx1ZSA9ICcnO1xyXG4gICAgdGhpcy5zZWFyY2hWYWx1ZU9yaWdpbmFsID0gJyc7XHJcbiAgICB0aGlzLmlzQWxsU2VsZWN0ZWQgPSBmYWxzZTtcclxuXHJcbiAgICBpZiAoXHJcbiAgICAgIChvcHRpb25zLnNlYXJjaCA9PT0gdW5kZWZpbmVkICYmIHRoaXMubXVsdGlwbGUpIHx8XHJcbiAgICAgIHRoaXMuYWxsb3dOZXdPcHRpb25cclxuICAgICkge1xyXG4gICAgICB0aGlzLmhhc1NlYXJjaCA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMubWF4VmFsdWVzKSB7XHJcbiAgICAgIHRoaXMuZGlzYWJsZVNlbGVjdEFsbCA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5oYXNTZXJ2ZXJTZWFyY2ggPSB0eXBlb2YgdGhpcy5vblNlcnZlclNlYXJjaCA9PT0gJ2Z1bmN0aW9uJztcclxuICAgIHRoaXMuc2hvd0FzUG9wdXAgPVxyXG4gICAgICB0aGlzLnNob3dEcm9wYm94QXNQb3B1cCAmJlxyXG4gICAgICAhdGhpcy5rZWVwQWx3YXlzT3BlbiAmJlxyXG4gICAgICB3aW5kb3cuaW5uZXJXaWR0aCA8PSBwYXJzZUZsb2F0KHRoaXMucG9wdXBEcm9wYm94QnJlYWtwb2ludCk7XHJcbiAgICB0aGlzLmhhc1NlYXJjaENvbnRhaW5lciA9XHJcbiAgICAgIHRoaXMuaGFzU2VhcmNoIHx8ICh0aGlzLm11bHRpcGxlICYmICF0aGlzLmRpc2FibGVTZWxlY3RBbGwpO1xyXG4gICAgdGhpcy5vcHRpb25zQ291bnQgPSB0aGlzLmdldE9wdGlvbnNDb3VudChvcHRpb25zLm9wdGlvbnNDb3VudCk7XHJcbiAgICB0aGlzLmhhbGZPcHRpb25zQ291bnQgPSBNYXRoLmNlaWwodGhpcy5vcHRpb25zQ291bnQgLyAyKTtcclxuICAgIHRoaXMub3B0aW9uc0hlaWdodCA9IHRoaXMuZ2V0T3B0aW9uc0hlaWdodCgpO1xyXG4gIH1cclxuXHJcbiAgc2V0RGVmYXVsdFByb3BzKG9wdGlvbnMpIHtcclxuICAgIGxldCBkZWZhdWx0T3B0aW9ucyA9IHtcclxuICAgICAgdmFsdWVLZXk6ICd2YWx1ZScsXHJcbiAgICAgIGxhYmVsS2V5OiAnbGFiZWwnLFxyXG4gICAgICBkZXNjcmlwdGlvbktleTogJ2Rlc2NyaXB0aW9uJyxcclxuICAgICAgYWxpYXNLZXk6ICdhbGlhcycsXHJcbiAgICAgIG9wdGlvbnNDb3VudDogNSxcclxuICAgICAgbm9PZkRpc3BsYXlWYWx1ZXM6IDUwLFxyXG4gICAgICBvcHRpb25IZWlnaHQ6ICc0MHB4JyxcclxuICAgICAgbXVsdGlwbGU6IGZhbHNlLFxyXG4gICAgICBoaWRlQ2xlYXJCdXR0b246IGZhbHNlLFxyXG4gICAgICBhdXRvU2VsZWN0Rmlyc3RPcHRpb246IGZhbHNlLFxyXG4gICAgICBoYXNPcHRpb25EZXNjcmlwdGlvbjogZmFsc2UsXHJcbiAgICAgIHNpbGVudEluaXRpYWxWYWx1ZVNldDogZmFsc2UsXHJcbiAgICAgIGRpc2FibGVTZWxlY3RBbGw6IGZhbHNlLFxyXG4gICAgICBub09wdGlvbnNUZXh0OiAnTm8gb3B0aW9ucyBmb3VuZCcsXHJcbiAgICAgIG5vU2VhcmNoUmVzdWx0c1RleHQ6ICdObyByZXN1bHRzIGZvdW5kJyxcclxuICAgICAgc2VsZWN0QWxsVGV4dDogJ1NlbGVjdCBBbGwnLFxyXG4gICAgICBwbGFjZWhvbGRlcjogJ1NlbGVjdCcsXHJcbiAgICAgIHBvc2l0aW9uOiAnYXV0bycsXHJcbiAgICAgIHpJbmRleDogMSxcclxuICAgICAgYWxsb3dOZXdPcHRpb246IGZhbHNlLFxyXG4gICAgICBtYXJrU2VhcmNoUmVzdWx0czogZmFsc2UsXHJcbiAgICAgIHRvb2x0aXBGb250U2l6ZTogJzE0cHgnLFxyXG4gICAgICB0b29sdGlwQWxpZ25tZW50OiAnY2VudGVyJyxcclxuICAgICAgdG9vbHRpcE1heFdpZHRoOiAnMzAwcHgnLFxyXG4gICAgICBzaG93U2VsZWN0ZWRPcHRpb25zRmlyc3Q6IGZhbHNlLFxyXG4gICAgICBuYW1lOiAnJyxcclxuICAgICAgYWRkaXRpb25hbENsYXNzZXM6ICcnLFxyXG4gICAgICBrZWVwQWx3YXlzT3BlbjogZmFsc2UsXHJcbiAgICAgIG1heFZhbHVlczogMCxcclxuICAgICAgc2hvd0Ryb3Bib3hBc1BvcHVwOiB0cnVlLFxyXG4gICAgICBwb3B1cERyb3Bib3hCcmVha3BvaW50OiAnNTc2cHgnLFxyXG4gICAgICBzZWFyY2hQbGFjZWhvbGRlcjogJ1NlYXJjaC4uLicsXHJcbiAgICAgIGl0ZW1zU2VsZWN0ZWRNZXNzYWdlOiAnc2VsZWN0ZWQnLFxyXG4gICAgICBhbGxvd05vbmVPcHRpb246IGZhbHNlLFxyXG4gICAgICBub25lT3B0aW9uVGV4dDogJ05vbmUnLFxyXG4gICAgfTtcclxuXHJcbiAgICBpZiAob3B0aW9ucy5oYXNPcHRpb25EZXNjcmlwdGlvbikge1xyXG4gICAgICBkZWZhdWx0T3B0aW9ucy5vcHRpb25zQ291bnQgPSA0O1xyXG4gICAgICBkZWZhdWx0T3B0aW9ucy5vcHRpb25IZWlnaHQgPSAnNjBweCc7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgc2V0UHJvcHNGcm9tRWxlbWVudEF0dHIob3B0aW9ucykge1xyXG4gICAgbGV0ICRlbGUgPSBvcHRpb25zLmVsZTtcclxuICAgIGxldCBtYXBwaW5nID0ge1xyXG4gICAgICBtdWx0aXBsZTogJ211bHRpcGxlJyxcclxuICAgICAgcGxhY2Vob2xkZXI6ICdwbGFjZWhvbGRlcicsXHJcbiAgICAgIG5hbWU6ICduYW1lJyxcclxuICAgICAgJ2RhdGEtdmFsdWUta2V5JzogJ3ZhbHVlS2V5JyxcclxuICAgICAgJ2RhdGEtbGFiZWwta2V5JzogJ2xhYmVsS2V5JyxcclxuICAgICAgJ2RhdGEtZGVzY3JpcHRpb24ta2V5JzogJ2Rlc2NyaXB0aW9uS2V5JyxcclxuICAgICAgJ2RhdGEtYWxpYXMta2V5JzogJ2FsaWFzS2V5JyxcclxuICAgICAgJ2RhdGEtc2VhcmNoJzogJ3NlYXJjaCcsXHJcbiAgICAgICdkYXRhLWhpZGUtY2xlYXItYnV0dG9uJzogJ2hpZGVDbGVhckJ1dHRvbicsXHJcbiAgICAgICdkYXRhLWF1dG8tc2VsZWN0LWZpcnN0LW9wdGlvbic6ICdhdXRvU2VsZWN0Rmlyc3RPcHRpb24nLFxyXG4gICAgICAnZGF0YS1oYXMtb3B0aW9uLWRlc2NyaXB0aW9uJzogJ2hhc09wdGlvbkRlc2NyaXB0aW9uJyxcclxuICAgICAgJ2RhdGEtb3B0aW9ucy1jb3VudCc6ICdvcHRpb25zQ291bnQnLFxyXG4gICAgICAnZGF0YS1vcHRpb24taGVpZ2h0JzogJ29wdGlvbkhlaWdodCcsXHJcbiAgICAgICdkYXRhLXBvc2l0aW9uJzogJ3Bvc2l0aW9uJyxcclxuICAgICAgJ2RhdGEtbm8tb3B0aW9ucy10ZXh0JzogJ25vT3B0aW9uc1RleHQnLFxyXG4gICAgICAnZGF0YS1uby1zZWFyY2gtcmVzdWx0cy10ZXh0JzogJ25vU2VhcmNoUmVzdWx0c1RleHQnLFxyXG4gICAgICAnZGF0YS1zZWxlY3QtYWxsLXRleHQnOiAnc2VsZWN0QWxsVGV4dCcsXHJcbiAgICAgICdkYXRhLXNpbGVudC1pbml0aWFsLXZhbHVlLXNldCc6ICdzaWxlbnRJbml0aWFsVmFsdWVTZXQnLFxyXG4gICAgICAnZGF0YS1kcm9wYm94LXdpZHRoJzogJ2Ryb3Bib3hXaWR0aCcsXHJcbiAgICAgICdkYXRhLXotaW5kZXgnOiAnekluZGV4JyxcclxuICAgICAgJ2RhdGEtbm8tb2YtZGlzcGxheS12YWx1ZXMnOiAnbm9PZkRpc3BsYXlWYWx1ZXMnLFxyXG4gICAgICAnZGF0YS1hbGxvdy1uZXctb3B0aW9uJzogJ2FsbG93TmV3T3B0aW9uJyxcclxuICAgICAgJ2RhdGEtbWFyay1zZWFyY2gtcmVzdWx0cyc6ICdtYXJrU2VhcmNoUmVzdWx0cycsXHJcbiAgICAgICdkYXRhLXRvb2x0aXAtZm9udC1zaXplJzogJ3Rvb2x0aXBGb250U2l6ZScsXHJcbiAgICAgICdkYXRhLXRvb2x0aXAtYWxpZ25tZW50JzogJ3Rvb2x0aXBBbGlnbm1lbnQnLFxyXG4gICAgICAnZGF0YS10b29sdGlwLW1heC13aWR0aCc6ICd0b29sdGlwTWF4V2lkdGgnLFxyXG4gICAgICAnZGF0YS1zaG93LXNlbGVjdGVkLW9wdGlvbnMtZmlyc3QnOiAnc2hvd1NlbGVjdGVkT3B0aW9uc0ZpcnN0JyxcclxuICAgICAgJ2RhdGEtZGlzYWJsZS1zZWxlY3QtYWxsJzogJ2Rpc2FibGVTZWxlY3RBbGwnLFxyXG4gICAgICAnZGF0YS1rZWVwLWFsd2F5cy1vcGVuJzogJ2tlZXBBbHdheXNPcGVuJyxcclxuICAgICAgJ2RhdGEtbWF4LXZhbHVlcyc6ICdtYXhWYWx1ZXMnLFxyXG4gICAgICAnZGF0YS1hZGRpdGlvbmFsLWNsYXNzZXMnOiAnYWRkaXRpb25hbENsYXNzZXMnLFxyXG4gICAgICAnZGF0YS1zaG93LWRyb3Bib3gtYXMtcG9wdXAnOiAnc2hvd0Ryb3Bib3hBc1BvcHVwJyxcclxuICAgICAgJ2RhdGEtcG9wdXAtZHJvcGJveC1icmVha3BvaW50JzogJ3BvcHVwRHJvcGJveEJyZWFrcG9pbnQnLFxyXG4gICAgfTtcclxuXHJcbiAgICBmb3IgKGxldCBrIGluIG1hcHBpbmcpIHtcclxuICAgICAgbGV0IHZhbHVlID0gJGVsZS5nZXRBdHRyaWJ1dGUoayk7XHJcblxyXG4gICAgICBpZiAoayA9PT0gJ211bHRpcGxlJyAmJiAodmFsdWUgPT09ICcnIHx8IHZhbHVlID09PSAndHJ1ZScpKSB7XHJcbiAgICAgICAgdmFsdWUgPSB0cnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodmFsdWUpIHtcclxuICAgICAgICBvcHRpb25zW21hcHBpbmdba11dID0gdmFsdWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNldE1ldGhvZHMoKSB7XHJcbiAgICBsZXQgJGVsZSA9IHRoaXMuJGVsZTtcclxuICAgICRlbGUudmlydHVhbFNlbGVjdCA9IHRoaXM7XHJcbiAgICAkZWxlLnZhbHVlID0gdGhpcy5tdWx0aXBsZSA/IFtdIDogJyc7XHJcbiAgICAkZWxlLnJlc2V0ID0gVmlydHVhbFNlbGVjdC5yZXNldDtcclxuICAgICRlbGUuc2V0VmFsdWUgPSBWaXJ0dWFsU2VsZWN0LnNldFZhbHVlTWV0aG9kO1xyXG4gICAgJGVsZS5zZXRPcHRpb25zID0gVmlydHVhbFNlbGVjdC5zZXRPcHRpb25zTWV0aG9kO1xyXG4gICAgJGVsZS5zZXREaXNhYmxlZE9wdGlvbnMgPSBWaXJ0dWFsU2VsZWN0LnNldERpc2FibGVkT3B0aW9uc01ldGhvZDtcclxuICAgICRlbGUudG9nZ2xlU2VsZWN0QWxsID0gVmlydHVhbFNlbGVjdC50b2dnbGVTZWxlY3RBbGw7XHJcbiAgICAkZWxlLmlzQWxsU2VsZWN0ZWQgPSBWaXJ0dWFsU2VsZWN0LmlzQWxsU2VsZWN0ZWQ7XHJcbiAgICAkZWxlLmFkZE9wdGlvbiA9IFZpcnR1YWxTZWxlY3QuYWRkT3B0aW9uTWV0aG9kO1xyXG4gICAgJGVsZS5nZXROZXdWYWx1ZSA9IFZpcnR1YWxTZWxlY3QuZ2V0TmV3VmFsdWVNZXRob2Q7XHJcbiAgICAkZWxlLmdldERpc3BsYXlWYWx1ZSA9IFZpcnR1YWxTZWxlY3QuZ2V0RGlzcGxheVZhbHVlTWV0aG9kO1xyXG4gICAgJGVsZS5vcGVuID0gVmlydHVhbFNlbGVjdC5vcGVuTWV0aG9kO1xyXG4gICAgJGVsZS5jbG9zZSA9IFZpcnR1YWxTZWxlY3QuY2xvc2VNZXRob2Q7XHJcbiAgfVxyXG5cclxuICBzZXRWYWx1ZU1ldGhvZCh2YWx1ZSwgc2lsZW50Q2hhbmdlKSB7XHJcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgIHZhbHVlID0gW3ZhbHVlXTtcclxuICAgIH1cclxuXHJcbiAgICB2YWx1ZSA9IHZhbHVlLm1hcCgodikgPT4ge1xyXG4gICAgICByZXR1cm4gdiB8fCB2ID09IDAgPyB2LnRvU3RyaW5nKCkgOiAnJztcclxuICAgIH0pO1xyXG5cclxuICAgIGxldCB2YWxpZFZhbHVlcyA9IFtdO1xyXG4gICAgbGV0IHZhbGlkSW5kZXhlcyA9IFtdO1xyXG5cclxuICAgIHRoaXMub3B0aW9ucy5mb3JFYWNoKChkLCBpZHgpID0+IHtcclxuICAgICAgbGV0IGlzU2VsZWN0ZWQgPSB2YWx1ZS5pbmRleE9mKGQudmFsdWUpICE9PSAtMTtcclxuXHJcbiAgICAgIGlmIChpc1NlbGVjdGVkICYmICFkLmlzRGlzYWJsZWQgJiYgIWQuaXNHcm91cFRpdGxlKSB7XHJcbiAgICAgICAgZC5pc1NlbGVjdGVkID0gdHJ1ZTtcclxuICAgICAgICB2YWxpZFZhbHVlcy5wdXNoKGQudmFsdWUpO1xyXG4gICAgICAgIHZhbGlkSW5kZXhlcy5wdXNoKGlkeCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgZC5pc1NlbGVjdGVkID0gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGlmICghdGhpcy5tdWx0aXBsZSkge1xyXG4gICAgICB2YWxpZFZhbHVlcyA9IHZhbGlkVmFsdWVzWzBdO1xyXG4gICAgICB2YWxpZEluZGV4ZXMgPSB2YWxpZEluZGV4ZXNbMF07XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5iZWZvcmVWYWx1ZVNldCgpO1xyXG4gICAgdGhpcy5zZXRWYWx1ZSh2YWxpZFZhbHVlcywgdmFsaWRJbmRleGVzLCAhc2lsZW50Q2hhbmdlKTtcclxuICAgIHRoaXMuYWZ0ZXJWYWx1ZVNldCgpO1xyXG4gIH1cclxuXHJcbiAgc2V0T3B0aW9uc01ldGhvZChvcHRpb25zLCBrZWVwVmFsdWUpIHtcclxuICAgIHRoaXMuc2V0T3B0aW9ucyhvcHRpb25zKTtcclxuICAgIHRoaXMuYWZ0ZXJTZXRPcHRpb25zKGtlZXBWYWx1ZSk7XHJcbiAgfVxyXG5cclxuICBzZXREaXNhYmxlZE9wdGlvbnNNZXRob2QoZGlzYWJsZWRPcHRpb25zKSB7XHJcbiAgICB0aGlzLnNldERpc2FibGVkT3B0aW9ucyhkaXNhYmxlZE9wdGlvbnMsIHRydWUpO1xyXG4gICAgdGhpcy5zZXRWYWx1ZU1ldGhvZChudWxsKTtcclxuICAgIHRoaXMuc2V0VmlzaWJsZU9wdGlvbnMoKTtcclxuICB9XHJcblxyXG4gIHNldERpc2FibGVkT3B0aW9ucyhkaXNhYmxlZE9wdGlvbnMgPSBbXSwgc2V0T3B0aW9uc1Byb3AgPSBmYWxzZSkge1xyXG4gICAgZGlzYWJsZWRPcHRpb25zID0gZGlzYWJsZWRPcHRpb25zLm1hcCgoZCkgPT4gZC50b1N0cmluZygpKTtcclxuICAgIHRoaXMuZGlzYWJsZWRPcHRpb25zID0gZGlzYWJsZWRPcHRpb25zO1xyXG5cclxuICAgIGlmIChzZXRPcHRpb25zUHJvcCAmJiBkaXNhYmxlZE9wdGlvbnMubGVuZ3RoKSB7XHJcbiAgICAgIHRoaXMub3B0aW9ucy5mb3JFYWNoKChkKSA9PiB7XHJcbiAgICAgICAgZC5pc0Rpc2FibGVkID0gZGlzYWJsZWRPcHRpb25zLmluZGV4T2YoZC52YWx1ZSkgIT09IC0xO1xyXG5cclxuICAgICAgICByZXR1cm4gZDtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXRPcHRpb25zKG9wdGlvbnMpIHtcclxuICAgIGlmICghb3B0aW9ucykge1xyXG4gICAgICBvcHRpb25zID0gW107XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHByZXBhcmVkT3B0aW9ucyA9IFtdO1xyXG4gICAgbGV0IGRpc2FibGVkT3B0aW9ucyA9IHRoaXMuZGlzYWJsZWRPcHRpb25zO1xyXG4gICAgbGV0IGhhc0Rpc2FibGVkT3B0aW9ucyA9IGRpc2FibGVkT3B0aW9ucy5sZW5ndGg7XHJcbiAgICBsZXQgdmFsdWVLZXkgPSB0aGlzLnZhbHVlS2V5O1xyXG4gICAgbGV0IGxhYmVsS2V5ID0gdGhpcy5sYWJlbEtleTtcclxuICAgIGxldCBkZXNjcmlwdGlvbktleSA9IHRoaXMuZGVzY3JpcHRpb25LZXk7XHJcbiAgICBsZXQgYWxpYXNLZXkgPSB0aGlzLmFsaWFzS2V5O1xyXG4gICAgbGV0IGhhc09wdGlvbkRlc2NyaXB0aW9uID0gdGhpcy5oYXNPcHRpb25EZXNjcmlwdGlvbjtcclxuICAgIGxldCBnZXRTdHJpbmcgPSBVdGlscy5nZXRTdHJpbmc7XHJcbiAgICBsZXQgZ2V0QWxpYXMgPSB0aGlzLmdldEFsaWFzO1xyXG4gICAgbGV0IGluZGV4ID0gMDtcclxuICAgIGxldCBoYXNPcHRpb25Hcm91cCA9IGZhbHNlO1xyXG5cclxuICAgIGxldCBwcmVwYXJlT3B0aW9uID0gKGQpID0+IHtcclxuICAgICAgbGV0IHZhbHVlID0gZ2V0U3RyaW5nKGRbdmFsdWVLZXldKTtcclxuICAgICAgbGV0IGNoaWxkT3B0aW9ucyA9IGQub3B0aW9ucztcclxuICAgICAgbGV0IGlzR3JvdXBUaXRsZSA9IGNoaWxkT3B0aW9ucyA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgbGV0IG9wdGlvbiA9IHtcclxuICAgICAgICBpbmRleCxcclxuICAgICAgICB2YWx1ZSxcclxuICAgICAgICBsYWJlbDogZ2V0U3RyaW5nKGRbbGFiZWxLZXldKSxcclxuICAgICAgICBhbGlhczogZ2V0QWxpYXMoZFthbGlhc0tleV0pLFxyXG4gICAgICAgIGlzVmlzaWJsZTogdHJ1ZSxcclxuICAgICAgICBpc0dyb3VwVGl0bGUsXHJcbiAgICAgIH07XHJcblxyXG4gICAgICBpZiAoaGFzRGlzYWJsZWRPcHRpb25zKSB7XHJcbiAgICAgICAgb3B0aW9uLmlzRGlzYWJsZWQgPSBkaXNhYmxlZE9wdGlvbnMuaW5kZXhPZih2YWx1ZSkgIT09IC0xO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoZC5pc0dyb3VwT3B0aW9uKSB7XHJcbiAgICAgICAgb3B0aW9uLmlzR3JvdXBPcHRpb24gPSB0cnVlO1xyXG4gICAgICAgIG9wdGlvbi5ncm91cEluZGV4ID0gZC5ncm91cEluZGV4O1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoaGFzT3B0aW9uRGVzY3JpcHRpb24pIHtcclxuICAgICAgICBvcHRpb24uZGVzY3JpcHRpb24gPSBnZXRTdHJpbmcoZFtkZXNjcmlwdGlvbktleV0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBwcmVwYXJlZE9wdGlvbnMucHVzaChvcHRpb24pO1xyXG4gICAgICBpbmRleCsrO1xyXG5cclxuICAgICAgaWYgKGlzR3JvdXBUaXRsZSkge1xyXG4gICAgICAgIGxldCBncm91cEluZGV4ID0gb3B0aW9uLmluZGV4O1xyXG4gICAgICAgIGhhc09wdGlvbkdyb3VwID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgY2hpbGRPcHRpb25zLmZvckVhY2goKGQpID0+IHtcclxuICAgICAgICAgIGQuaXNHcm91cE9wdGlvbiA9IHRydWU7XHJcbiAgICAgICAgICBkLmdyb3VwSW5kZXggPSBncm91cEluZGV4O1xyXG5cclxuICAgICAgICAgIHByZXBhcmVPcHRpb24oZCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgLy8gQWRkIG5vbmUgb3B0aW9uIG9ubHkgd2hlbiBpbiBsaXN0IG1vZGUgKGFsd2F5cyBvcGVuIGFuZCBvbmx5KVxyXG4gICAgaWYgKCF0aGlzLm11bHRpcGxlICYmIHRoaXMuYWxsb3dOb25lT3B0aW9uKSB7XHJcbiAgICAgIG9wdGlvbnMudW5zaGlmdCh7XHJcbiAgICAgICAgdmFsdWU6IG5vbmVPcHRpb25WYWx1ZSxcclxuICAgICAgICBsYWJlbDogdGhpcy5ub25lT3B0aW9uVGV4dCxcclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgb3B0aW9ucy5mb3JFYWNoKHByZXBhcmVPcHRpb24pO1xyXG5cclxuICAgIHRoaXMub3B0aW9ucyA9IHByZXBhcmVkT3B0aW9ucztcclxuICAgIHRoaXMudmlzaWJsZU9wdGlvbnNDb3VudCA9IHByZXBhcmVkT3B0aW9ucy5sZW5ndGg7XHJcbiAgICB0aGlzLmxhc3RPcHRpb25JbmRleCA9IHRoaXMub3B0aW9ucy5sZW5ndGggLSAxO1xyXG4gICAgdGhpcy5uZXdWYWx1ZXMgPSBbXTtcclxuICAgIHRoaXMuaGFzT3B0aW9uR3JvdXAgPSBoYXNPcHRpb25Hcm91cDtcclxuICAgIHRoaXMuc2V0U29ydGVkT3B0aW9ucygpO1xyXG4gIH1cclxuXHJcbiAgc2V0U2VydmVyT3B0aW9ucyhvcHRpb25zKSB7XHJcbiAgICB0aGlzLnNldE9wdGlvbnNNZXRob2Qob3B0aW9ucywgdHJ1ZSk7XHJcbiAgICBEb21VdGlscy5yZW1vdmVDbGFzcyh0aGlzLiR3cmFwcGVyLCAnc2VydmVyLXNlYXJjaGluZycpO1xyXG4gIH1cclxuXHJcbiAgc2V0U29ydGVkT3B0aW9ucygpIHtcclxuICAgIGxldCBzb3J0ZWRPcHRpb25zID0gWy4uLnRoaXMub3B0aW9uc107XHJcblxyXG4gICAgaWYgKHRoaXMuc2hvd1NlbGVjdGVkT3B0aW9uc0ZpcnN0ICYmIHRoaXMuc2VsZWN0ZWRWYWx1ZXMubGVuZ3RoKSB7XHJcbiAgICAgIGlmICh0aGlzLmhhc09wdGlvbkdyb3VwKSB7XHJcbiAgICAgICAgc29ydGVkT3B0aW9ucyA9IHRoaXMuc29ydE9wdGlvbnNHcm91cChzb3J0ZWRPcHRpb25zKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBzb3J0ZWRPcHRpb25zID0gdGhpcy5zb3J0T3B0aW9ucyhzb3J0ZWRPcHRpb25zKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuc29ydGVkT3B0aW9ucyA9IHNvcnRlZE9wdGlvbnM7XHJcbiAgfVxyXG5cclxuICBzZXRWaXNpYmxlT3B0aW9ucygpIHtcclxuICAgIGxldCB2aXNpYmxlT3B0aW9ucyA9IFsuLi50aGlzLnNvcnRlZE9wdGlvbnNdO1xyXG4gICAgbGV0IG1heE9wdGlvbnNUb1Nob3cgPSB0aGlzLm9wdGlvbnNDb3VudCAqIDI7XHJcbiAgICBsZXQgc3RhcnRJbmRleCA9IHRoaXMuZ2V0VmlzaWJsZVN0YXJ0SW5kZXgoKTtcclxuICAgIGxldCBuZXdPcHRpb24gPSB0aGlzLmdldE5ld09wdGlvbigpO1xyXG4gICAgbGV0IGVuZEluZGV4ID0gc3RhcnRJbmRleCArIG1heE9wdGlvbnNUb1Nob3cgLSAxO1xyXG4gICAgbGV0IGkgPSAwO1xyXG5cclxuICAgIGlmIChuZXdPcHRpb24pIHtcclxuICAgICAgbmV3T3B0aW9uLnZpc2libGVJbmRleCA9IGk7XHJcbiAgICAgIGkrKztcclxuICAgIH1cclxuXHJcbiAgICB2aXNpYmxlT3B0aW9ucyA9IHZpc2libGVPcHRpb25zLmZpbHRlcigoZCkgPT4ge1xyXG4gICAgICBsZXQgaW5WaWV3ID0gZmFsc2U7XHJcblxyXG4gICAgICBpZiAoZC5pc1Zpc2libGUgJiYgIWQuaXNDdXJyZW50TmV3KSB7XHJcbiAgICAgICAgaW5WaWV3ID0gaSA+PSBzdGFydEluZGV4ICYmIGkgPD0gZW5kSW5kZXg7XHJcbiAgICAgICAgZC52aXNpYmxlSW5kZXggPSBpO1xyXG4gICAgICAgIGkrKztcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIGluVmlldztcclxuICAgIH0pO1xyXG5cclxuICAgIGlmIChuZXdPcHRpb24pIHtcclxuICAgICAgdmlzaWJsZU9wdGlvbnMgPSBbbmV3T3B0aW9uLCAuLi52aXNpYmxlT3B0aW9uc107XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy52aXNpYmxlT3B0aW9ucyA9IHZpc2libGVPcHRpb25zO1xyXG4gICAgdGhpcy5yZW5kZXJPcHRpb25zKCk7XHJcbiAgfVxyXG5cclxuICBzZXRPcHRpb25zUG9zaXRpb24oc3RhcnRJbmRleCkge1xyXG4gICAgaWYgKHN0YXJ0SW5kZXggPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBzdGFydEluZGV4ID0gdGhpcy5nZXRWaXNpYmxlU3RhcnRJbmRleCgpO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCB0b3AgPSBzdGFydEluZGV4ICogdGhpcy5vcHRpb25IZWlnaHQ7XHJcbiAgICB0aGlzLiRvcHRpb25zLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGUzZCgwLCAke3RvcH1weCwgMClgO1xyXG4gICAgRG9tVXRpbHMuc2V0RGF0YSh0aGlzLiRvcHRpb25zLCAndG9wJywgdG9wKTtcclxuICB9XHJcblxyXG4gIHNldE9wdGlvbnNUb29sdGlwKCkge1xyXG4gICAgbGV0IHZpc2libGVPcHRpb25zID0gdGhpcy5nZXRWaXNpYmxlT3B0aW9ucygpO1xyXG4gICAgbGV0IGhhc09wdGlvbkRlc2NyaXB0aW9uID0gdGhpcy5oYXNPcHRpb25EZXNjcmlwdGlvbjtcclxuXHJcbiAgICB2aXNpYmxlT3B0aW9ucy5mb3JFYWNoKChkKSA9PiB7XHJcbiAgICAgIGxldCAkb3B0aW9uRWxlID0gdGhpcy4kZHJvcGJveENvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAgIGAudnNjb21wLW9wdGlvbltkYXRhLWluZGV4PVwiJHtkLmluZGV4fVwiXWBcclxuICAgICAgKTtcclxuXHJcbiAgICAgIERvbVV0aWxzLnNldERhdGEoXHJcbiAgICAgICAgJG9wdGlvbkVsZS5xdWVyeVNlbGVjdG9yKCcudnNjb21wLW9wdGlvbi10ZXh0JyksXHJcbiAgICAgICAgJ3Rvb2x0aXAnLFxyXG4gICAgICAgIGQubGFiZWxcclxuICAgICAgKTtcclxuXHJcbiAgICAgIGlmIChoYXNPcHRpb25EZXNjcmlwdGlvbikge1xyXG4gICAgICAgIERvbVV0aWxzLnNldERhdGEoXHJcbiAgICAgICAgICAkb3B0aW9uRWxlLnF1ZXJ5U2VsZWN0b3IoJy52c2NvbXAtb3B0aW9uLWRlc2NyaXB0aW9uJyksXHJcbiAgICAgICAgICAndG9vbHRpcCcsXHJcbiAgICAgICAgICBkLmRlc2NyaXB0aW9uXHJcbiAgICAgICAgKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBzZXRWYWx1ZSh2YWx1ZSwgaW5kZXgsIHRyaWdnZXJFdmVudCkge1xyXG4gICAgLy8gVmFsdWVcclxuICAgIGlmICghdmFsdWUpIHtcclxuICAgICAgdGhpcy5zZWxlY3RlZFZhbHVlcyA9IFtdO1xyXG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xyXG4gICAgICB0aGlzLnNlbGVjdGVkVmFsdWVzID0gWy4uLnZhbHVlXTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuc2VsZWN0ZWRWYWx1ZXMgPSBbdmFsdWVdO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBuZXdWYWx1ZSA9IHRoaXMubXVsdGlwbGVcclxuICAgICAgPyB0aGlzLnNlbGVjdGVkVmFsdWVzXHJcbiAgICAgIDogdGhpcy5zZWxlY3RlZFZhbHVlc1swXSB8fCAnJztcclxuXHJcbiAgICB0aGlzLiRlbGUudmFsdWUgPSBuZXdWYWx1ZTtcclxuICAgIHRoaXMuJGhpZGRlbklucHV0LnZhbHVlID0gbmV3VmFsdWU7XHJcblxyXG4gICAgLy8gSW5kZXhcclxuICAgIGlmICghaW5kZXgpIHtcclxuICAgICAgdGhpcy5zZWxlY3RlZEluZGV4ZXMgPSBbXTtcclxuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShpbmRleCkpIHtcclxuICAgICAgdGhpcy5zZWxlY3RlZEluZGV4ZXMgPSBbLi4uaW5kZXhdO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5zZWxlY3RlZEluZGV4ZXMgPSBbaW5kZXhdO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBuZXdJbmRleCA9IHRoaXMubXVsdGlwbGVcclxuICAgICAgPyB0aGlzLnNlbGVjdGVkSW5kZXhlc1xyXG4gICAgICA6IHRoaXMuc2VsZWN0ZWRJbmRleGVzWzBdIHx8ICcnO1xyXG5cclxuICAgIHRoaXMuJGVsZS5pbmRleCA9IG5ld0luZGV4O1xyXG4gICAgdGhpcy4kaGlkZGVuSW5wdXQuaW5kZXggPSBuZXdJbmRleDtcclxuXHJcbiAgICB0aGlzLmlzTWF4VmFsdWVzU2VsZWN0ZWQgPVxyXG4gICAgICB0aGlzLm1heFZhbHVlcyAmJiB0aGlzLm1heFZhbHVlcyA8PSB0aGlzLnNlbGVjdGVkVmFsdWVzLmxlbmd0aFxyXG4gICAgICAgID8gdHJ1ZVxyXG4gICAgICAgIDogZmFsc2U7XHJcbiAgICB0aGlzLnNldFZhbHVlVGV4dCgpO1xyXG5cclxuICAgIGlmICh0aGlzLnNlbGVjdGVkVmFsdWVzICYmIHRoaXMuc2VsZWN0ZWRWYWx1ZXNbMF0gPT09IG5vbmVPcHRpb25WYWx1ZSkge1xyXG4gICAgICBEb21VdGlscy5yZW1vdmVDbGFzcyh0aGlzLiR3cmFwcGVyLCAnaGFzLXZhbHVlJyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBEb21VdGlscy50b2dnbGVDbGFzcyhcclxuICAgICAgICB0aGlzLiR3cmFwcGVyLFxyXG4gICAgICAgICdoYXMtdmFsdWUnLFxyXG4gICAgICAgIFV0aWxzLmlzTm90RW1wdHkodGhpcy5zZWxlY3RlZFZhbHVlcylcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBEb21VdGlscy50b2dnbGVDbGFzcyhcclxuICAgICAgdGhpcy4kd3JhcHBlcixcclxuICAgICAgJ21heC12YWx1ZS1zZWxlY3RlZCcsXHJcbiAgICAgIHRoaXMuaXNNYXhWYWx1ZXNTZWxlY3RlZFxyXG4gICAgKTtcclxuXHJcbiAgICBpZiAodHJpZ2dlckV2ZW50KSB7XHJcbiAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudCh0aGlzLiRlbGUsICdjaGFuZ2UnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHNldFZhbHVlVGV4dCgpIHtcclxuICAgIGxldCB2YWx1ZVRleHQgPSBbXTtcclxuICAgIGxldCB2YWx1ZVRvb2x0aXAgPSBbXTtcclxuICAgIGxldCBzZWxlY3RlZFZhbHVlcyA9IHRoaXMuc2VsZWN0ZWRWYWx1ZXM7XHJcbiAgICBsZXQgc2VsZWN0ZWRMZW5ndGggPSBzZWxlY3RlZFZhbHVlcy5sZW5ndGg7XHJcbiAgICBsZXQgbm9PZkRpc3BsYXlWYWx1ZXMgPSB0aGlzLm5vT2ZEaXNwbGF5VmFsdWVzO1xyXG4gICAgbGV0IG1heGltdW1WYWx1ZXNUb1Nob3cgPSA1MDtcclxuICAgIGxldCBzZWxlY3RlZFZhbHVlc0NvdW50ID0gMDtcclxuXHJcbiAgICBpZiAodGhpcy5pc0FsbFNlbGVjdGVkKSB7XHJcbiAgICAgIC8vdGhpcy4kdmFsdWVUZXh0LmlubmVySFRNTCA9IGBBbGwgKCR7c2VsZWN0ZWRMZW5ndGh9KWA7XHJcbiAgICAgIHRoaXMuJHZhbHVlVGV4dC5pbm5lckhUTUwgPSBgJHtzZWxlY3RlZExlbmd0aH0gJHt0aGlzLml0ZW1zU2VsZWN0ZWRNZXNzYWdlfWA7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBmb3IgKGxldCBkIG9mIHRoaXMub3B0aW9ucykge1xyXG4gICAgICAgIGlmIChkLmlzQ3VycmVudE5ldykge1xyXG4gICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoc2VsZWN0ZWRWYWx1ZXNDb3VudCA+IG1heGltdW1WYWx1ZXNUb1Nob3cpIHtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHZhbHVlID0gZC52YWx1ZTtcclxuXHJcbiAgICAgICAgaWYgKHNlbGVjdGVkVmFsdWVzLmluZGV4T2YodmFsdWUpICE9PSAtMSkge1xyXG4gICAgICAgICAgbGV0IGxhYmVsID0gZC5sYWJlbDtcclxuICAgICAgICAgIHZhbHVlVGV4dC5wdXNoKGxhYmVsKTtcclxuICAgICAgICAgIHNlbGVjdGVkVmFsdWVzQ291bnQrKztcclxuXHJcbiAgICAgICAgICBpZiAoc2VsZWN0ZWRWYWx1ZXNDb3VudCA8PSBub09mRGlzcGxheVZhbHVlcykge1xyXG4gICAgICAgICAgICB2YWx1ZVRvb2x0aXAucHVzaChgPHNwYW4gY2xhc3M9XCJ2c2NvbXAtdmFsdWUtdGFnXCI+JHtsYWJlbH08L3NwYW4+YCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBsZXQgbW9yZVNlbGVjdGVkT3B0aW9ucyA9IHNlbGVjdGVkTGVuZ3RoIC0gbm9PZkRpc3BsYXlWYWx1ZXM7XHJcblxyXG4gICAgICBpZiAobW9yZVNlbGVjdGVkT3B0aW9ucyA+IDApIHtcclxuICAgICAgICB2YWx1ZVRvb2x0aXAucHVzaChcclxuICAgICAgICAgIGA8c3BhbiBjbGFzcz1cInZzY29tcC12YWx1ZS10YWcgbW9yZS12YWx1ZS1jb3VudFwiPisgJHttb3JlU2VsZWN0ZWRPcHRpb25zfSBtb3JlLi4uPC9zcGFuPmBcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBhZ2dyZWdhdGVkVmFsdWVUZXh0ID0gdmFsdWVUZXh0LmpvaW4oJywgJyk7XHJcblxyXG4gICAgICBpZiAoXHJcbiAgICAgICAgYWdncmVnYXRlZFZhbHVlVGV4dCA9PT0gJycgfHxcclxuICAgICAgICAoc2VsZWN0ZWRWYWx1ZXMgJiYgc2VsZWN0ZWRWYWx1ZXNbMF0gPT09IG5vbmVPcHRpb25WYWx1ZSlcclxuICAgICAgKSB7XHJcbiAgICAgICAgdGhpcy4kdmFsdWVUZXh0LmlubmVySFRNTCA9IHRoaXMucGxhY2Vob2xkZXI7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy4kdmFsdWVUZXh0LmlubmVySFRNTCA9IGFnZ3JlZ2F0ZWRWYWx1ZVRleHQ7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm11bHRpcGxlKSB7XHJcbiAgICAgICAgICBsZXQgbWF4VmFsdWVzID0gdGhpcy5tYXhWYWx1ZXM7XHJcblxyXG4gICAgICAgICAgaWYgKERvbVV0aWxzLmhhc0VsbGlwc2lzKHRoaXMuJHZhbHVlVGV4dCkgfHwgbWF4VmFsdWVzKSB7XHJcbiAgICAgICAgICAgIGxldCBjb3VudFRleHQgPSBgJHtzZWxlY3RlZExlbmd0aH1gO1xyXG5cclxuICAgICAgICAgICAgaWYgKG1heFZhbHVlcykge1xyXG4gICAgICAgICAgICAgIGNvdW50VGV4dCArPSBgIC8gJHttYXhWYWx1ZXN9YDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLyoqIHJlcGxhY2UgY29tbWEgZGVsaW1pdHRlZCBsaXN0IG9mIHNlbGVjdGlvbnMgd2l0aCBzaG9ydGVyIHRleHQgaW5kaWNhdGluZyBzZWxlY3Rpb24gY291bnQgKi9cclxuICAgICAgICAgICAgLy8gdGhpcy4kdmFsdWVUZXh0LmlubmVySFRNTCA9IGAke2NvdW50VGV4dH0gb3B0aW9uJHtcclxuICAgICAgICAgICAgLy8gICBzZWxlY3RlZExlbmd0aCA9PT0gMSA/ICcnIDogJ3MnXHJcbiAgICAgICAgICAgIC8vIH0gc2VsZWN0ZWRgO1xyXG5cclxuICAgICAgICAgICAgdGhpcy4kdmFsdWVUZXh0LmlubmVySFRNTCA9IGAke2NvdW50VGV4dH0gJHt0aGlzLml0ZW1zU2VsZWN0ZWRNZXNzYWdlfWA7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvKiogcmVtb3ZpbmcgdG9vbHRpcCBpZiBmdWxsIHZhbHVlIHRleHQgaXMgdmlzaWJsZSAqL1xyXG4gICAgICAgICAgICB2YWx1ZVRvb2x0aXAgPSBbXTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBEb21VdGlscy5zZXREYXRhKHRoaXMuJHZhbHVlVGV4dCwgJ3Rvb2x0aXAnLCB2YWx1ZVRvb2x0aXAuam9pbignLCAnKSk7XHJcbiAgfVxyXG5cclxuICBzZXRTZWFyY2hWYWx1ZSh2YWx1ZSwgc2tpcElucHV0U2V0KSB7XHJcbiAgICBpZiAodmFsdWUgPT09IHRoaXMuc2VhcmNoVmFsdWVPcmlnaW5hbCkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFza2lwSW5wdXRTZXQpIHtcclxuICAgICAgdGhpcy4kc2VhcmNoSW5wdXQudmFsdWUgPSB2YWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgc2VhcmNoVmFsdWUgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpLnRyaW0oKTtcclxuICAgIHRoaXMuc2VhcmNoVmFsdWUgPSBzZWFyY2hWYWx1ZTtcclxuICAgIHRoaXMuc2VhcmNoVmFsdWVPcmlnaW5hbCA9IHZhbHVlO1xyXG5cclxuICAgIERvbVV0aWxzLnRvZ2dsZUNsYXNzKHRoaXMuJHdyYXBwZXIsICdoYXMtc2VhcmNoLXZhbHVlJywgdmFsdWUpO1xyXG5cclxuICAgIGlmICh0aGlzLmhhc1NlcnZlclNlYXJjaCkge1xyXG4gICAgICB0aGlzLnNlcnZlclNlYXJjaChzZWFyY2hWYWx1ZSk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgdmlzaWJsZU9wdGlvbnNDb3VudCA9IDA7XHJcbiAgICBsZXQgaGFzRXhhY3RPcHRpb24gPSBmYWxzZTtcclxuICAgIGxldCB2aXNpYmxlT3B0aW9uR3JvdXBzTWFwcGluZztcclxuICAgIGxldCBpc09wdGlvblZpc2libGUgPSB0aGlzLmlzT3B0aW9uVmlzaWJsZTtcclxuXHJcbiAgICBpZiAodGhpcy5oYXNPcHRpb25Hcm91cCkge1xyXG4gICAgICB2aXNpYmxlT3B0aW9uR3JvdXBzTWFwcGluZyA9IHRoaXMuZ2V0VmlzaWJsZU9wdGlvbkdyb3Vwc01hcHBpbmcoXHJcbiAgICAgICAgc2VhcmNoVmFsdWVcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLm9wdGlvbnMuZm9yRWFjaCgoZCkgPT4ge1xyXG4gICAgICBpZiAoZC5pc0N1cnJlbnROZXcpIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGxldCByZXN1bHQgPSBpc09wdGlvblZpc2libGUoXHJcbiAgICAgICAgZCxcclxuICAgICAgICBzZWFyY2hWYWx1ZSxcclxuICAgICAgICBoYXNFeGFjdE9wdGlvbixcclxuICAgICAgICB2aXNpYmxlT3B0aW9uR3JvdXBzTWFwcGluZ1xyXG4gICAgICApO1xyXG5cclxuICAgICAgaWYgKHJlc3VsdC5pc1Zpc2libGUpIHtcclxuICAgICAgICB2aXNpYmxlT3B0aW9uc0NvdW50Kys7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICghaGFzRXhhY3RPcHRpb24pIHtcclxuICAgICAgICBoYXNFeGFjdE9wdGlvbiA9IHJlc3VsdC5oYXNFeGFjdE9wdGlvbjtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgaWYgKHRoaXMuYWxsb3dOZXdPcHRpb24pIHtcclxuICAgICAgaWYgKHNlYXJjaFZhbHVlICYmICFoYXNFeGFjdE9wdGlvbikge1xyXG4gICAgICAgIHRoaXMuc2V0TmV3T3B0aW9uKCk7XHJcbiAgICAgICAgdmlzaWJsZU9wdGlvbnNDb3VudCsrO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMucmVtb3ZlTmV3T3B0aW9uKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnZpc2libGVPcHRpb25zQ291bnQgPSB2aXNpYmxlT3B0aW9uc0NvdW50O1xyXG5cclxuICAgIHRoaXMuc2Nyb2xsVG9Ub3AoKTtcclxuICAgIHRoaXMuc2V0T3B0aW9uc0hlaWdodCgpO1xyXG4gICAgdGhpcy5zZXRWaXNpYmxlT3B0aW9ucygpO1xyXG4gIH1cclxuXHJcbiAgc2V0T3B0aW9uUHJvcChpbmRleCwga2V5LCB2YWx1ZSkge1xyXG4gICAgaWYgKCF0aGlzLm9wdGlvbnNbaW5kZXhdKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLm9wdGlvbnNbaW5kZXhdW2tleV0gPSB2YWx1ZTtcclxuICB9XHJcblxyXG4gIHNldE9wdGlvbnNIZWlnaHQoKSB7XHJcbiAgICB0aGlzLiRvcHRpb25zTGlzdC5zdHlsZS5oZWlnaHQgPVxyXG4gICAgICB0aGlzLm9wdGlvbkhlaWdodCAqIHRoaXMudmlzaWJsZU9wdGlvbnNDb3VudCArICdweCc7XHJcbiAgfVxyXG5cclxuICBzZXRPcHRpb25zQ29udGFpbmVySGVpZ2h0KHJlc2V0KSB7XHJcbiAgICBsZXQgb3B0aW9uc0hlaWdodDtcclxuXHJcbiAgICBpZiAocmVzZXQpIHtcclxuICAgICAgaWYgKHRoaXMuc2hvd0FzUG9wdXApIHtcclxuICAgICAgICB0aGlzLm9wdGlvbnNDb3VudCA9IHRoaXMuZ2V0T3B0aW9uc0NvdW50KCk7XHJcbiAgICAgICAgb3B0aW9uc0hlaWdodCA9IHRoaXMuZ2V0T3B0aW9uc0hlaWdodCgpO1xyXG4gICAgICAgIHRoaXMub3B0aW9uc0hlaWdodCA9IG9wdGlvbnNIZWlnaHQ7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG9wdGlvbnNIZWlnaHQgPSB0aGlzLm9wdGlvbnNIZWlnaHQ7XHJcblxyXG4gICAgICBpZiAodGhpcy5rZWVwQWx3YXlzT3Blbikge1xyXG4gICAgICAgIERvbVV0aWxzLnNldFN0eWxlKHRoaXMuJG5vT3B0aW9ucywgJ2hlaWdodCcsIG9wdGlvbnNIZWlnaHQpO1xyXG4gICAgICAgIERvbVV0aWxzLnNldFN0eWxlKHRoaXMuJG5vU2VhcmNoUmVzdWx0cywgJ2hlaWdodCcsIG9wdGlvbnNIZWlnaHQpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgRG9tVXRpbHMuc2V0U3R5bGUodGhpcy4kb3B0aW9uc0NvbnRhaW5lciwgJ21heC1oZWlnaHQnLCBvcHRpb25zSGVpZ2h0KTtcclxuXHJcbiAgICB0aGlzLmFmdGVyU2V0T3B0aW9uc0NvbnRhaW5lckhlaWdodChyZXNldCk7XHJcbiAgfVxyXG5cclxuICBzZXREcm9wYm94UG9zaXRpb24oKSB7XHJcbiAgICBpZiAodGhpcy5wb3NpdGlvbiAhPT0gJ2F1dG8nKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgbW9yZVZpc2libGVTaWRlcyA9IERvbVV0aWxzLmdldE1vcmVWaXNpYmxlU2lkZXModGhpcy4kd3JhcHBlcik7XHJcbiAgICBsZXQgc2hvd09uTGVmdCA9IGZhbHNlO1xyXG5cclxuICAgIC8qKiBjaGVjayB0aGF0IGlzIGRyb3Bib3ggaGlkZGVuIG9uIHJpZ2h0IGVkZ2UgLSBvbmx5IGlmIGN1c3RvbSB3aWR0aCBnaXZlbiAqL1xyXG4gICAgaWYgKHRoaXMuZHJvcGJveFdpZHRoKSB7XHJcbiAgICAgIGxldCBidXR0b25Db29yZHMgPSB0aGlzLiR0b2dnbGVCdXR0b24uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgIGxldCB2aWV3cG9ydFdpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XHJcbiAgICAgIGxldCBkcm9wYm94V2lkdGggPSBwYXJzZUZsb2F0KHRoaXMuZHJvcGJveFdpZHRoKTtcclxuICAgICAgbGV0IGhpZGRlbk9uUmlnaHQgPSBidXR0b25Db29yZHMubGVmdCArIGRyb3Bib3hXaWR0aCA+IHZpZXdwb3J0V2lkdGg7XHJcbiAgICAgIGxldCBoaWRkZW5PbkxlZnQgPSBkcm9wYm94V2lkdGggPiBidXR0b25Db29yZHMucmlnaHQ7XHJcblxyXG4gICAgICBpZiAoaGlkZGVuT25SaWdodCAmJiAhaGlkZGVuT25MZWZ0KSB7XHJcbiAgICAgICAgc2hvd09uTGVmdCA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBEb21VdGlscy50b2dnbGVDbGFzcyhcclxuICAgICAgdGhpcy4kd3JhcHBlcixcclxuICAgICAgJ3Bvc2l0aW9uLXRvcCcsXHJcbiAgICAgIG1vcmVWaXNpYmxlU2lkZXMudmVydGljYWwgPT09ICd0b3AnXHJcbiAgICApO1xyXG4gICAgRG9tVXRpbHMudG9nZ2xlQ2xhc3ModGhpcy4kd3JhcHBlciwgJ3Bvc2l0aW9uLWxlZnQnLCBzaG93T25MZWZ0KTtcclxuICB9XHJcblxyXG4gIHNldE5ld09wdGlvbigpIHtcclxuICAgIGxldCB2YWx1ZSA9IHRoaXMuc2VhcmNoVmFsdWVPcmlnaW5hbC50cmltKCk7XHJcblxyXG4gICAgaWYgKCF2YWx1ZSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IG5ld09wdGlvbiA9IHRoaXMuZ2V0TmV3T3B0aW9uKCk7XHJcblxyXG4gICAgaWYgKG5ld09wdGlvbikge1xyXG4gICAgICBsZXQgbmV3SW5kZXggPSBuZXdPcHRpb24uaW5kZXg7XHJcblxyXG4gICAgICB0aGlzLnNldE9wdGlvblByb3AobmV3SW5kZXgsICd2YWx1ZScsIHZhbHVlKTtcclxuICAgICAgdGhpcy5zZXRPcHRpb25Qcm9wKG5ld0luZGV4LCAnbGFiZWwnLCB2YWx1ZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBsZXQgZGF0YSA9IHtcclxuICAgICAgICB2YWx1ZSxcclxuICAgICAgICBsYWJlbDogdmFsdWUsXHJcbiAgICAgICAgaXNDdXJyZW50TmV3OiB0cnVlLFxyXG4gICAgICB9O1xyXG5cclxuICAgICAgdGhpcy5hZGRPcHRpb24oZGF0YSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZXRTZWxlY3RlZFByb3AoKSB7XHJcbiAgICBsZXQgc2VsZWN0ZWRWYWx1ZXMgPSB0aGlzLnNlbGVjdGVkVmFsdWVzO1xyXG5cclxuICAgIHRoaXMub3B0aW9ucy5mb3JFYWNoKChkKSA9PiB7XHJcbiAgICAgIGlmIChzZWxlY3RlZFZhbHVlcy5pbmRleE9mKGQudmFsdWUpICE9PSAtMSkge1xyXG4gICAgICAgIGQuaXNTZWxlY3RlZCA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuICAvKiogc2V0IG1ldGhvZHMgLSBlbmQgKi9cclxuXHJcbiAgLyoqIGdldCBtZXRob2RzIC0gc3RhcnQgKi9cclxuICBnZXRWaXNpYmxlT3B0aW9ucygpIHtcclxuICAgIHJldHVybiB0aGlzLnZpc2libGVPcHRpb25zIHx8IFtdO1xyXG4gIH1cclxuXHJcbiAgZ2V0VmFsdWUoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5tdWx0aXBsZSA/IHRoaXMuc2VsZWN0ZWRWYWx1ZXMgOiB0aGlzLnNlbGVjdGVkVmFsdWVzWzBdO1xyXG4gIH1cclxuXHJcbiAgZ2V0Rmlyc3RWaXNpYmxlT3B0aW9uSW5kZXgoKSB7XHJcbiAgICByZXR1cm4gTWF0aC5jZWlsKHRoaXMuJG9wdGlvbnNDb250YWluZXIuc2Nyb2xsVG9wIC8gdGhpcy5vcHRpb25IZWlnaHQpO1xyXG4gIH1cclxuXHJcbiAgZ2V0VmlzaWJsZVN0YXJ0SW5kZXgoKSB7XHJcbiAgICBsZXQgZmlyc3RWaXNpYmxlT3B0aW9uSW5kZXggPSB0aGlzLmdldEZpcnN0VmlzaWJsZU9wdGlvbkluZGV4KCk7XHJcbiAgICBsZXQgc3RhcnRJbmRleCA9IGZpcnN0VmlzaWJsZU9wdGlvbkluZGV4IC0gdGhpcy5oYWxmT3B0aW9uc0NvdW50O1xyXG5cclxuICAgIGlmIChzdGFydEluZGV4IDwgMCkge1xyXG4gICAgICBzdGFydEluZGV4ID0gMDtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gc3RhcnRJbmRleDtcclxuICB9XHJcblxyXG4gIGdldFRvb2x0aXBBdHRyVGV4dCh0ZXh0LCBlbGxpcHNpc09ubHkgPSBmYWxzZSwgYWxsb3dIdG1sID0gZmFsc2UpIHtcclxuICAgIGxldCBkYXRhID0ge1xyXG4gICAgICAnZGF0YS10b29sdGlwJzogdGV4dCB8fCAnJyxcclxuICAgICAgJ2RhdGEtdG9vbHRpcC1lbnRlci1kZWxheSc6IHRoaXMudG9vbHRpcEVudGVyRGVsYXksXHJcbiAgICAgICdkYXRhLXRvb2x0aXAtei1pbmRleCc6IHRoaXMuekluZGV4LFxyXG4gICAgICAnZGF0YS10b29sdGlwLWZvbnQtc2l6ZSc6IHRoaXMudG9vbHRpcEZvbnRTaXplLFxyXG4gICAgICAnZGF0YS10b29sdGlwLWFsaWdubWVudCc6IHRoaXMudG9vbHRpcEFsaWdubWVudCxcclxuICAgICAgJ2RhdGEtdG9vbHRpcC1tYXgtd2lkdGgnOiB0aGlzLnRvb2x0aXBNYXhXaWR0aCxcclxuICAgICAgJ2RhdGEtdG9vbHRpcC1lbGxpcHNpcy1vbmx5JzogZWxsaXBzaXNPbmx5LFxyXG4gICAgICAnZGF0YS10b29sdGlwLWFsbG93LWh0bWwnOiBhbGxvd0h0bWwsXHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBEb21VdGlscy5nZXRBdHRyaWJ1dGVzVGV4dChkYXRhKTtcclxuICB9XHJcblxyXG4gIGdldE9wdGlvbk9iaihkYXRhKSB7XHJcbiAgICBpZiAoIWRhdGEpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBnZXRTdHJpbmcgPSBVdGlscy5nZXRTdHJpbmc7XHJcbiAgICBsZXQgbmV3T3B0aW9uID0ge1xyXG4gICAgICBpbmRleDogZGF0YS5pbmRleCxcclxuICAgICAgdmFsdWU6IGdldFN0cmluZyhkYXRhLnZhbHVlKSxcclxuICAgICAgbGFiZWw6IGdldFN0cmluZyhkYXRhLmxhYmVsKSxcclxuICAgICAgZGVzY3JpcHRpb246IGdldFN0cmluZyhkYXRhLmRlc2NyaXB0aW9uKSxcclxuICAgICAgYWxpYXM6IHRoaXMuZ2V0QWxpYXMoZGF0YS5hbGlhcyksXHJcbiAgICAgIGlzQ3VycmVudE5ldzogZGF0YS5pc0N1cnJlbnROZXcgfHwgZmFsc2UsXHJcbiAgICAgIGlzVmlzaWJsZTogdHJ1ZSxcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIG5ld09wdGlvbjtcclxuICB9XHJcblxyXG4gIGdldE5ld09wdGlvbigpIHtcclxuICAgIGxldCBsYXN0T3B0aW9uID0gdGhpcy5vcHRpb25zW3RoaXMubGFzdE9wdGlvbkluZGV4XTtcclxuXHJcbiAgICBpZiAoIWxhc3RPcHRpb24gfHwgIWxhc3RPcHRpb24uaXNDdXJyZW50TmV3KSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gbGFzdE9wdGlvbjtcclxuICB9XHJcblxyXG4gIGdldE9wdGlvbkluZGV4KHZhbHVlKSB7XHJcbiAgICBsZXQgaW5kZXg7XHJcblxyXG4gICAgaWYgKHZhbHVlKSB7XHJcbiAgICAgIHRoaXMub3B0aW9ucy5zb21lKChkKSA9PiB7XHJcbiAgICAgICAgaWYgKGQudmFsdWUgPT0gdmFsdWUpIHtcclxuICAgICAgICAgIGluZGV4ID0gZC5pbmRleDtcclxuXHJcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBpbmRleDtcclxuICB9XHJcblxyXG4gIGdldE5ld1ZhbHVlKCkge1xyXG4gICAgbGV0IG5ld1ZhbHVlcyA9IHRoaXMubmV3VmFsdWVzO1xyXG4gICAgbGV0IHJlc3VsdCA9IHRoaXMuc2VsZWN0ZWRWYWx1ZXMuZmlsdGVyKChkKSA9PiBuZXdWYWx1ZXMuaW5kZXhPZihkKSAhPT0gLTEpO1xyXG5cclxuICAgIHJldHVybiB0aGlzLm11bHRpcGxlID8gcmVzdWx0IDogcmVzdWx0WzBdO1xyXG4gIH1cclxuXHJcbiAgZ2V0QWxpYXMoYWxpYXMpIHtcclxuICAgIGlmIChhbGlhcykge1xyXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShhbGlhcykpIHtcclxuICAgICAgICBhbGlhcyA9IGFsaWFzLmpvaW4oJywnKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBhbGlhcyA9IGFsaWFzLnRvU3RyaW5nKCkudHJpbSgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBhbGlhcyA9IGFsaWFzLnRvTG93ZXJDYXNlKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBhbGlhcyA9ICcnO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBhbGlhcztcclxuICB9XHJcblxyXG4gIGdldERpc3BsYXlWYWx1ZSgpIHtcclxuICAgIGxldCBkaXNwbGF5VmFsdWVzID0gW107XHJcbiAgICBsZXQgc2VsZWN0ZWRWYWx1ZXMgPSB0aGlzLnNlbGVjdGVkVmFsdWVzO1xyXG5cclxuICAgIGZvciAobGV0IGQgb2YgdGhpcy5vcHRpb25zKSB7XHJcbiAgICAgIGlmIChzZWxlY3RlZFZhbHVlcy5pbmRleE9mKGQudmFsdWUpICE9PSAtMSkge1xyXG4gICAgICAgIGRpc3BsYXlWYWx1ZXMucHVzaChkLmxhYmVsKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzLm11bHRpcGxlID8gZGlzcGxheVZhbHVlcyA6IGRpc3BsYXlWYWx1ZXNbMF0gfHwgJyc7XHJcbiAgfVxyXG5cclxuICBnZXRWaXNpYmxlT3B0aW9uR3JvdXBzTWFwcGluZyhzZWFyY2hWYWx1ZSkge1xyXG4gICAgbGV0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XHJcbiAgICBsZXQgcmVzdWx0ID0ge307XHJcbiAgICBsZXQgaXNPcHRpb25WaXNpYmxlID0gdGhpcy5pc09wdGlvblZpc2libGU7XHJcbiAgICBvcHRpb25zID0gdGhpcy5zdHJ1Y3R1cmVPcHRpb25Hcm91cChvcHRpb25zKTtcclxuXHJcbiAgICBvcHRpb25zLmZvckVhY2goKGQpID0+IHtcclxuICAgICAgcmVzdWx0W2QuaW5kZXhdID0gZC5vcHRpb25zLnNvbWUoXHJcbiAgICAgICAgKGUpID0+IGlzT3B0aW9uVmlzaWJsZShlLCBzZWFyY2hWYWx1ZSkuaXNWaXNpYmxlXHJcbiAgICAgICk7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgZ2V0T3B0aW9uc0NvdW50KGNvdW50KSB7XHJcbiAgICBpZiAodGhpcy5zaG93QXNQb3B1cCkge1xyXG4gICAgICBsZXQgYXZhaWxhYmxlSGVpZ2h0ID1cclxuICAgICAgICAod2luZG93LmlubmVySGVpZ2h0ICogODApIC8gMTAwIC0gZHJvcGJveENsb3NlQnV0dG9uRnVsbEhlaWdodDtcclxuXHJcbiAgICAgIGlmICh0aGlzLmhhc1NlYXJjaENvbnRhaW5lcikge1xyXG4gICAgICAgIGF2YWlsYWJsZUhlaWdodCAtPSBzZWFyY2hIZWlnaHQ7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvdW50ID0gTWF0aC5mbG9vcihhdmFpbGFibGVIZWlnaHQgLyB0aGlzLm9wdGlvbkhlaWdodCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb3VudCA9IHBhcnNlSW50KGNvdW50KTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gY291bnQ7XHJcbiAgfVxyXG5cclxuICBnZXRPcHRpb25zSGVpZ2h0KCkge1xyXG4gICAgcmV0dXJuIHRoaXMub3B0aW9uc0NvdW50ICogdGhpcy5vcHRpb25IZWlnaHQgKyAncHgnO1xyXG4gIH1cclxuXHJcbiAgZ2V0U2libGluZygkZWxlLCBkaXJlY3Rpb24pIHtcclxuICAgIGxldCBwcm9wTmFtZSA9XHJcbiAgICAgIGRpcmVjdGlvbiA9PT0gJ25leHQnID8gJ25leHRFbGVtZW50U2libGluZycgOiAncHJldmlvdXNFbGVtZW50U2libGluZyc7XHJcblxyXG4gICAgZG8ge1xyXG4gICAgICBpZiAoJGVsZSkge1xyXG4gICAgICAgICRlbGUgPSAkZWxlW3Byb3BOYW1lXTtcclxuICAgICAgfVxyXG4gICAgfSB3aGlsZSAoXHJcbiAgICAgIERvbVV0aWxzLmhhc0NsYXNzKCRlbGUsICdkaXNhYmxlZCcpIHx8XHJcbiAgICAgIERvbVV0aWxzLmhhc0NsYXNzKCRlbGUsICdncm91cC10aXRsZScpXHJcbiAgICApO1xyXG5cclxuICAgIHJldHVybiAkZWxlO1xyXG4gIH1cclxuICAvKiogZ2V0IG1ldGhvZHMgLSBlbmQgKi9cclxuXHJcbiAgb3BlbkRyb3Bib3goaXNTaWxlbnQpIHtcclxuICAgIHRoaXMuc2V0RHJvcGJveFBvc2l0aW9uKCk7XHJcbiAgICBEb21VdGlscy5yZW1vdmVDbGFzcyh0aGlzLiR3cmFwcGVyLCAnY2xvc2VkJyk7XHJcblxyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIERvbVV0aWxzLmFkZENsYXNzKHRoaXMuJHdyYXBwZXIsICdvcGVuZWQnKTtcclxuICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KHRoaXMuJGVsZSwgJ29wZW5lZCcpO1xyXG5cclxuICAgICAgaWYgKCFpc1NpbGVudCkge1xyXG4gICAgICAgIHRoaXMubW92ZVNlbGVjdGVkT3B0aW9uc0ZpcnN0KCk7XHJcbiAgICAgICAgRG9tVXRpbHMuYWRkQ2xhc3ModGhpcy4kd3JhcHBlciwgJ2ZvY3VzZWQnKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc2hvd0FzUG9wdXApIHtcclxuICAgICAgICAgIERvbVV0aWxzLmFkZENsYXNzKHRoaXMuJGJvZHksICd2c2NvbXAtcG9wdXAtYWN0aXZlJyk7XHJcbiAgICAgICAgICB0aGlzLmlzUG9wdXBBY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGlzLmZvY3VzU2VhcmNoSW5wdXQoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0sIDApO1xyXG4gIH1cclxuXHJcbiAgY2xvc2VEcm9wYm94KGlzU2lsZW50KSB7XHJcbiAgICBpZiAodGhpcy5rZWVwQWx3YXlzT3Blbikge1xyXG4gICAgICB0aGlzLnJlbW92ZU9wdGlvbkZvY3VzKCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgdHJhbnNpdGlvbkR1cmF0aW9uID0gaXNTaWxlbnQgPyAwIDogdGhpcy50cmFuc2l0aW9uRHVyYXRpb247XHJcblxyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIERvbVV0aWxzLnJlbW92ZUNsYXNzKHRoaXMuJHdyYXBwZXIsICdvcGVuZWQgZm9jdXNlZCcpO1xyXG4gICAgICB0aGlzLmRpc3BhdGNoRXZlbnQodGhpcy4kZWxlLCAnY2xvc2VkJyk7XHJcbiAgICAgIHRoaXMucmVtb3ZlT3B0aW9uRm9jdXMoKTtcclxuXHJcbiAgICAgIGlmICghaXNTaWxlbnQpIHtcclxuICAgICAgICBpZiAodGhpcy5pc1BvcHVwQWN0aXZlKSB7XHJcbiAgICAgICAgICBEb21VdGlscy5yZW1vdmVDbGFzcyh0aGlzLiRib2R5LCAndnNjb21wLXBvcHVwLWFjdGl2ZScpO1xyXG4gICAgICAgICAgdGhpcy5pc1BvcHVwQWN0aXZlID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9LCAwKTtcclxuXHJcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgRG9tVXRpbHMuYWRkQ2xhc3ModGhpcy4kd3JhcHBlciwgJ2Nsb3NlZCcpO1xyXG4gICAgfSwgdHJhbnNpdGlvbkR1cmF0aW9uKTtcclxuICB9XHJcblxyXG4gIG1vdmVTZWxlY3RlZE9wdGlvbnNGaXJzdCgpIHtcclxuICAgIGlmICghdGhpcy5zaG93U2VsZWN0ZWRPcHRpb25zRmlyc3QpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuc2V0U29ydGVkT3B0aW9ucygpO1xyXG5cclxuICAgIGlmICghdGhpcy4kb3B0aW9uc0NvbnRhaW5lci5zY3JvbGxUb3AgfHwgIXRoaXMuc2VsZWN0ZWRWYWx1ZXMubGVuZ3RoKSB7XHJcbiAgICAgIHRoaXMuc2V0VmlzaWJsZU9wdGlvbnMoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuc2Nyb2xsVG9Ub3AoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHRvZ2dsZURyb3Bib3goKSB7XHJcbiAgICBpZiAodGhpcy5pc09wZW5lZCgpKSB7XHJcbiAgICAgIHRoaXMuY2xvc2VEcm9wYm94KCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLm9wZW5Ecm9wYm94KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpc09wZW5lZCgpIHtcclxuICAgIHJldHVybiBEb21VdGlscy5oYXNDbGFzcyh0aGlzLiR3cmFwcGVyLCAnb3BlbmVkJyk7XHJcbiAgfVxyXG5cclxuICBmb2N1c1NlYXJjaElucHV0KCkge1xyXG4gICAgbGV0ICRlbGUgPSB0aGlzLiRzZWFyY2hJbnB1dDtcclxuXHJcbiAgICBpZiAoJGVsZSkge1xyXG4gICAgICAkZWxlLmZvY3VzKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmb2N1c09wdGlvbihkaXJlY3Rpb24sIGVsZSkge1xyXG4gICAgbGV0ICRmb2N1c2VkRWxlID0gdGhpcy4kZHJvcGJveENvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAnLnZzY29tcC1vcHRpb24uZm9jdXNlZCdcclxuICAgICk7XHJcbiAgICBsZXQgJG5ld0ZvY3VzZWRFbGU7XHJcblxyXG4gICAgaWYgKGVsZSkge1xyXG4gICAgICAkbmV3Rm9jdXNlZEVsZSA9IGVsZTtcclxuICAgIH0gZWxzZSBpZiAoISRmb2N1c2VkRWxlKSB7XHJcbiAgICAgIC8qIGlmIG5vIGVsZW1lbnQgb24gZm9jdXMgY2hvb3NlIGZpcnN0IHZpc2libGUgb25lICovXHJcbiAgICAgIGxldCBmaXJzdFZpc2libGVPcHRpb25JbmRleCA9IHRoaXMuZ2V0Rmlyc3RWaXNpYmxlT3B0aW9uSW5kZXgoKTtcclxuICAgICAgJG5ld0ZvY3VzZWRFbGUgPSB0aGlzLiRkcm9wYm94Q29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgICAgYC52c2NvbXAtb3B0aW9uW2RhdGEtdmlzaWJsZS1pbmRleD1cIiR7Zmlyc3RWaXNpYmxlT3B0aW9uSW5kZXh9XCJdYFxyXG4gICAgICApO1xyXG5cclxuICAgICAgaWYgKFxyXG4gICAgICAgIERvbVV0aWxzLmhhc0NsYXNzKCRuZXdGb2N1c2VkRWxlLCAnZGlzYWJsZWQnKSB8fFxyXG4gICAgICAgIERvbVV0aWxzLmhhc0NsYXNzKCRuZXdGb2N1c2VkRWxlLCAnZ3JvdXAtdGl0bGUnKVxyXG4gICAgICApIHtcclxuICAgICAgICAkbmV3Rm9jdXNlZEVsZSA9IHRoaXMuZ2V0U2libGluZygkbmV3Rm9jdXNlZEVsZSwgJ25leHQnKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgJG5ld0ZvY3VzZWRFbGUgPSB0aGlzLmdldFNpYmxpbmcoJGZvY3VzZWRFbGUsIGRpcmVjdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCRuZXdGb2N1c2VkRWxlICYmICRuZXdGb2N1c2VkRWxlICE9PSAkZm9jdXNlZEVsZSkge1xyXG4gICAgICBpZiAoJGZvY3VzZWRFbGUpIHtcclxuICAgICAgICBEb21VdGlscy5yZW1vdmVDbGFzcygkZm9jdXNlZEVsZSwgJ2ZvY3VzZWQnKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgRG9tVXRpbHMuYWRkQ2xhc3MoJG5ld0ZvY3VzZWRFbGUsICdmb2N1c2VkJyk7XHJcbiAgICAgIHRoaXMudG9nZ2xlRm9jdXNlZFByb3AoRG9tVXRpbHMuZ2V0RGF0YSgkbmV3Rm9jdXNlZEVsZSwgJ2luZGV4JyksIHRydWUpO1xyXG4gICAgICB0aGlzLm1vdmVGb2N1c2VkT3B0aW9uVG9WaWV3KCRuZXdGb2N1c2VkRWxlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG1vdmVGb2N1c2VkT3B0aW9uVG9WaWV3KCRmb2N1c2VkRWxlKSB7XHJcbiAgICBpZiAoISRmb2N1c2VkRWxlKSB7XHJcbiAgICAgICRmb2N1c2VkRWxlID0gdGhpcy4kZHJvcGJveENvbnRhaW5lci5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAgICcudnNjb21wLW9wdGlvbi5mb2N1c2VkJ1xyXG4gICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICghJGZvY3VzZWRFbGUpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBuZXdTY3JvbGxUb3A7XHJcbiAgICBsZXQgY29udGFpbmVyUmVjdCA9IHRoaXMuJG9wdGlvbnNDb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICBsZXQgb3B0aW9uUmVjdCA9ICRmb2N1c2VkRWxlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgbGV0IGNvbnRhaW5lclRvcCA9IGNvbnRhaW5lclJlY3QudG9wO1xyXG4gICAgbGV0IGNvbnRhaW5lckJvdHRvbSA9IGNvbnRhaW5lclJlY3QuYm90dG9tO1xyXG4gICAgbGV0IGNvbnRhaW5lckhlaWdodCA9IGNvbnRhaW5lclJlY3QuaGVpZ2h0O1xyXG4gICAgbGV0IG9wdGlvblRvcCA9IG9wdGlvblJlY3QudG9wO1xyXG4gICAgbGV0IG9wdGlvbkJvdHRvbSA9IG9wdGlvblJlY3QuYm90dG9tO1xyXG4gICAgbGV0IG9wdGlvbkhlaWdodCA9IG9wdGlvblJlY3QuaGVpZ2h0O1xyXG4gICAgbGV0IG9wdGlvbk9mZnNldFRvcCA9ICRmb2N1c2VkRWxlLm9mZnNldFRvcDtcclxuICAgIGxldCBvcHRpb25zVG9wID0gRG9tVXRpbHMuZ2V0RGF0YSh0aGlzLiRvcHRpb25zLCAndG9wJywgJ251bWJlcicpO1xyXG5cclxuICAgIC8qIGlmIG9wdGlvbiBoaWRkZW4gb24gdG9wICovXHJcbiAgICBpZiAoY29udGFpbmVyVG9wID4gb3B0aW9uVG9wKSB7XHJcbiAgICAgIG5ld1Njcm9sbFRvcCA9IG9wdGlvbk9mZnNldFRvcCArIG9wdGlvbnNUb3A7XHJcbiAgICB9IGVsc2UgaWYgKGNvbnRhaW5lckJvdHRvbSA8IG9wdGlvbkJvdHRvbSkge1xyXG4gICAgICAvKiBpZiBvcHRpb24gaGlkZGVuIG9uIGJvdHRvbSAqL1xyXG4gICAgICBuZXdTY3JvbGxUb3AgPVxyXG4gICAgICAgIG9wdGlvbk9mZnNldFRvcCAtIGNvbnRhaW5lckhlaWdodCArIG9wdGlvbkhlaWdodCArIG9wdGlvbnNUb3A7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG5ld1Njcm9sbFRvcCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIHRoaXMuJG9wdGlvbnNDb250YWluZXIuc2Nyb2xsVG9wID0gbmV3U2Nyb2xsVG9wO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmVtb3ZlT3B0aW9uRm9jdXMoKSB7XHJcbiAgICBsZXQgJGZvY3VzZWRFbGUgPSB0aGlzLiRkcm9wYm94Q29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICAgICcudnNjb21wLW9wdGlvbi5mb2N1c2VkJ1xyXG4gICAgKTtcclxuXHJcbiAgICBpZiAoISRmb2N1c2VkRWxlKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBEb21VdGlscy5yZW1vdmVDbGFzcygkZm9jdXNlZEVsZSwgJ2ZvY3VzZWQnKTtcclxuICAgIHRoaXMudG9nZ2xlRm9jdXNlZFByb3AobnVsbCk7XHJcbiAgfVxyXG5cclxuICBzZWxlY3RPcHRpb24oJGVsZSkge1xyXG4gICAgaWYgKCEkZWxlKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgaXNBZGRpbmcgPSAhRG9tVXRpbHMuaGFzQ2xhc3MoJGVsZSwgJ3NlbGVjdGVkJyk7XHJcblxyXG4gICAgaWYgKGlzQWRkaW5nKSB7XHJcbiAgICAgIGlmICh0aGlzLm11bHRpcGxlICYmIHRoaXMuaXNNYXhWYWx1ZXNTZWxlY3RlZCkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLyoqIG9uIHNlbGVjdGluZyBzYW1lIHZhbHVlIGluIHNpbmdsZSBzZWxlY3QgKi9cclxuICAgICAgaWYgKCF0aGlzLm11bHRpcGxlKSB7XHJcbiAgICAgICAgdGhpcy5jbG9zZURyb3Bib3goKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBsZXQgc2VsZWN0ZWRWYWx1ZXMgPSB0aGlzLnNlbGVjdGVkVmFsdWVzO1xyXG4gICAgbGV0IHNlbGVjdGVkSW5kZXhlcyA9IHRoaXMuc2VsZWN0ZWRJbmRleGVzO1xyXG4gICAgbGV0IHNlbGVjdGVkVmFsdWUgPSBEb21VdGlscy5nZXREYXRhKCRlbGUsICd2YWx1ZScpO1xyXG4gICAgbGV0IHNlbGVjdGVkSW5kZXggPSBEb21VdGlscy5nZXREYXRhKCRlbGUsICdpbmRleCcpO1xyXG5cclxuICAgIHRoaXMudG9nZ2xlU2VsZWN0ZWRQcm9wKHNlbGVjdGVkSW5kZXgsIGlzQWRkaW5nKTtcclxuXHJcbiAgICBpZiAoaXNBZGRpbmcpIHtcclxuICAgICAgaWYgKHRoaXMubXVsdGlwbGUpIHtcclxuICAgICAgICBzZWxlY3RlZFZhbHVlcy5wdXNoKHNlbGVjdGVkVmFsdWUpO1xyXG4gICAgICAgIHNlbGVjdGVkSW5kZXhlcy5wdXNoKHNlbGVjdGVkSW5kZXgpO1xyXG4gICAgICAgIHRoaXMudG9nZ2xlQWxsT3B0aW9uc0NsYXNzKCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKHNlbGVjdGVkVmFsdWVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgdGhpcy50b2dnbGVTZWxlY3RlZFByb3AoXHJcbiAgICAgICAgICAgIHRoaXMuZ2V0T3B0aW9uSW5kZXgoc2VsZWN0ZWRWYWx1ZXNbMF0pLFxyXG4gICAgICAgICAgICBmYWxzZVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHNlbGVjdGVkVmFsdWVzID0gW3NlbGVjdGVkVmFsdWVdO1xyXG4gICAgICAgIHNlbGVjdGVkSW5kZXhlcyA9IFtzZWxlY3RlZEluZGV4XTtcclxuICAgICAgICBsZXQgJHByZXZTZWxlY3RlZE9wdGlvbiA9IHRoaXMuJGVsZS5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICAgICAgJy52c2NvbXAtb3B0aW9uLnNlbGVjdGVkJ1xyXG4gICAgICAgICk7XHJcblxyXG4gICAgICAgIGlmICgkcHJldlNlbGVjdGVkT3B0aW9uKSB7XHJcbiAgICAgICAgICBEb21VdGlscy50b2dnbGVDbGFzcygkcHJldlNlbGVjdGVkT3B0aW9uLCAnc2VsZWN0ZWQnLCBmYWxzZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmNsb3NlRHJvcGJveCgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBEb21VdGlscy50b2dnbGVDbGFzcygkZWxlLCAnc2VsZWN0ZWQnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmICh0aGlzLm11bHRpcGxlKSB7XHJcbiAgICAgICAgRG9tVXRpbHMudG9nZ2xlQ2xhc3MoJGVsZSwgJ3NlbGVjdGVkJyk7XHJcbiAgICAgICAgVXRpbHMucmVtb3ZlSXRlbUZyb21BcnJheShzZWxlY3RlZFZhbHVlcywgc2VsZWN0ZWRWYWx1ZSk7XHJcbiAgICAgICAgVXRpbHMucmVtb3ZlSXRlbUZyb21BcnJheShzZWxlY3RlZEluZGV4ZXMsIHNlbGVjdGVkSW5kZXgpO1xyXG4gICAgICAgIHRoaXMudG9nZ2xlQWxsT3B0aW9uc0NsYXNzKGZhbHNlKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChEb21VdGlscy5oYXNDbGFzcygkZWxlLCAnY3VycmVudC1uZXcnKSkge1xyXG4gICAgICB0aGlzLmJlZm9yZVNlbGVjdE5ld1ZhbHVlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5zZXRWYWx1ZShzZWxlY3RlZFZhbHVlcywgc2VsZWN0ZWRJbmRleGVzLCB0cnVlKTtcclxuXHJcbiAgICAvLyBJbiAnTGlzdCcgb25seVxyXG4gICAgLy8gaW1tZWRpYXRlbHkgbW92ZSBpdGVtIHRvIHRvcCBpZiBvcHRpb25zIGlzIG9uLlxyXG4gICAgLy8gRHJvcGRvd24gbW9kZSB3aWxsIHdhaXQgdW50aWwgdGhlIG5leHQgcmVvcGVuIHRvIGRvIHNvLlxyXG4gICAgaWYgKHRoaXMua2VlcEFsd2F5c09wZW4gJiYgdGhpcy5zaG93U2VsZWN0ZWRPcHRpb25zRmlyc3QpIHtcclxuICAgICAgY29uc3QgbGFzdFNjcm9sbFRvcCA9IHRoaXMuJG9wdGlvbnNDb250YWluZXIuc2Nyb2xsVG9wO1xyXG4gICAgICB0aGlzLm1vdmVTZWxlY3RlZE9wdGlvbnNGaXJzdCgpO1xyXG4gICAgICB0aGlzLiRvcHRpb25zQ29udGFpbmVyLnNjcm9sbFRvcCA9IGxhc3RTY3JvbGxUb3A7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzZWxlY3RGb2N1c2VkT3B0aW9uKCkge1xyXG4gICAgdGhpcy5zZWxlY3RPcHRpb24oXHJcbiAgICAgIHRoaXMuJGRyb3Bib3hDb250YWluZXIucXVlcnlTZWxlY3RvcignLnZzY29tcC1vcHRpb24uZm9jdXNlZCcpXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgdG9nZ2xlQWxsT3B0aW9ucyhpc1NlbGVjdGVkKSB7XHJcbiAgICBpZiAoIXRoaXMubXVsdGlwbGUgfHwgdGhpcy5kaXNhYmxlU2VsZWN0QWxsKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodHlwZW9mIGlzU2VsZWN0ZWQgIT09ICdib29sZWFuJykge1xyXG4gICAgICBpc1NlbGVjdGVkID0gIURvbVV0aWxzLmhhc0NsYXNzKHRoaXMuJHRvZ2dsZUFsbENoZWNrYm94LCAnY2hlY2tlZCcpO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBzZWxlY3RlZFZhbHVlcyA9IFtdO1xyXG4gICAgbGV0IHNlbGVjdGVkSW5kZXhlcyA9IFtdO1xyXG5cclxuICAgIHRoaXMub3B0aW9ucy5mb3JFYWNoKChkLCBpZHgpID0+IHtcclxuICAgICAgaWYgKGQuaXNEaXNhYmxlZCB8fCBkLmlzQ3VycmVudE5ldyB8fCBkLmlzR3JvdXBUaXRsZSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG5cclxuICAgICAgZC5pc1NlbGVjdGVkID0gaXNTZWxlY3RlZDtcclxuXHJcbiAgICAgIGlmIChpc1NlbGVjdGVkKSB7XHJcbiAgICAgICAgc2VsZWN0ZWRWYWx1ZXMucHVzaChkLnZhbHVlKTtcclxuICAgICAgICBzZWxlY3RlZEluZGV4ZXMucHVzaChpZHgpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLnRvZ2dsZUFsbE9wdGlvbnNDbGFzcyhpc1NlbGVjdGVkKTtcclxuICAgIHRoaXMuc2V0VmFsdWUoc2VsZWN0ZWRWYWx1ZXMsIHNlbGVjdGVkSW5kZXhlcywgdHJ1ZSk7XHJcbiAgICB0aGlzLnJlbmRlck9wdGlvbnMoKTtcclxuICB9XHJcblxyXG4gIHRvZ2dsZUFsbE9wdGlvbnNDbGFzcyhpc0FsbFNlbGVjdGVkKSB7XHJcbiAgICBpZiAodHlwZW9mIGlzQWxsU2VsZWN0ZWQgIT09ICdib29sZWFuJykge1xyXG4gICAgICBpc0FsbFNlbGVjdGVkID0gZmFsc2U7XHJcblxyXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmxlbmd0aCkge1xyXG4gICAgICAgIGlzQWxsU2VsZWN0ZWQgPSAhdGhpcy5vcHRpb25zLnNvbWUoKGQpID0+IHtcclxuICAgICAgICAgIHJldHVybiAhZC5pc1NlbGVjdGVkICYmICFkLmlzRGlzYWJsZWQgJiYgIWQuaXNHcm91cFRpdGxlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgRG9tVXRpbHMudG9nZ2xlQ2xhc3ModGhpcy4kdG9nZ2xlQWxsQ2hlY2tib3gsICdjaGVja2VkJywgaXNBbGxTZWxlY3RlZCk7XHJcbiAgICB0aGlzLmlzQWxsU2VsZWN0ZWQgPSBpc0FsbFNlbGVjdGVkO1xyXG4gIH1cclxuXHJcbiAgdG9nZ2xlRm9jdXNlZFByb3AoaW5kZXgsIGlzRm9jdXNlZCA9IGZhbHNlKSB7XHJcbiAgICBpZiAodGhpcy5mb2N1c2VkT3B0aW9uSW5kZXgpIHtcclxuICAgICAgdGhpcy5zZXRPcHRpb25Qcm9wKHRoaXMuZm9jdXNlZE9wdGlvbkluZGV4LCAnaXNGb2N1c2VkJywgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuc2V0T3B0aW9uUHJvcChpbmRleCwgJ2lzRm9jdXNlZCcsIGlzRm9jdXNlZCk7XHJcbiAgICB0aGlzLmZvY3VzZWRPcHRpb25JbmRleCA9IGluZGV4O1xyXG4gIH1cclxuXHJcbiAgdG9nZ2xlU2VsZWN0ZWRQcm9wKGluZGV4LCBpc1NlbGVjdGVkID0gZmFsc2UpIHtcclxuICAgIHRoaXMuc2V0T3B0aW9uUHJvcChpbmRleCwgJ2lzU2VsZWN0ZWQnLCBpc1NlbGVjdGVkKTtcclxuICB9XHJcblxyXG4gIHNjcm9sbFRvVG9wKCkge1xyXG4gICAgbGV0IGlzQ2xvc2VkID0gIXRoaXMuaXNPcGVuZWQoKTtcclxuXHJcbiAgICBpZiAoaXNDbG9zZWQpIHtcclxuICAgICAgdGhpcy5vcGVuRHJvcGJveCh0cnVlKTtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgc2Nyb2xsVG9wID0gdGhpcy4kb3B0aW9uc0NvbnRhaW5lci5zY3JvbGxUb3A7XHJcblxyXG4gICAgaWYgKHNjcm9sbFRvcCA+IDApIHtcclxuICAgICAgdGhpcy4kb3B0aW9uc0NvbnRhaW5lci5zY3JvbGxUb3AgPSAwO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChpc0Nsb3NlZCkge1xyXG4gICAgICB0aGlzLmNsb3NlRHJvcGJveCh0cnVlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlc2V0KCkge1xyXG4gICAgdGhpcy5vcHRpb25zLmZvckVhY2goKGQpID0+IHtcclxuICAgICAgZC5pc1NlbGVjdGVkID0gZmFsc2U7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLmJlZm9yZVZhbHVlU2V0KHRydWUpO1xyXG4gICAgdGhpcy5zZXRWYWx1ZShudWxsLCBudWxsLCB0cnVlKTtcclxuICAgIHRoaXMuYWZ0ZXJWYWx1ZVNldCgpO1xyXG4gIH1cclxuXHJcbiAgYmVmb3JlVmFsdWVTZXQoaXNSZXNldCkge1xyXG4gICAgdGhpcy50b2dnbGVBbGxPcHRpb25zQ2xhc3MoaXNSZXNldCA/IGZhbHNlIDogdW5kZWZpbmVkKTtcclxuICB9XHJcblxyXG4gIGFmdGVyVmFsdWVTZXQoKSB7XHJcbiAgICB0aGlzLnNjcm9sbFRvVG9wKCk7XHJcbiAgICB0aGlzLnNldFNlYXJjaFZhbHVlKCcnKTtcclxuICAgIHRoaXMucmVuZGVyT3B0aW9ucygpO1xyXG4gIH1cclxuXHJcbiAgYWZ0ZXJTZXRPcHRpb25zKGtlZXBWYWx1ZSkge1xyXG4gICAgaWYgKGtlZXBWYWx1ZSkge1xyXG4gICAgICB0aGlzLnNldFNlbGVjdGVkUHJvcCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuc2V0T3B0aW9uc0hlaWdodCgpO1xyXG4gICAgdGhpcy5zZXRWaXNpYmxlT3B0aW9ucygpO1xyXG5cclxuICAgIGlmICgha2VlcFZhbHVlKSB7XHJcbiAgICAgIHRoaXMucmVzZXQoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGFkZE9wdGlvbihkYXRhLCByZXJlbmRlcikge1xyXG4gICAgaWYgKCFkYXRhKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmxhc3RPcHRpb25JbmRleCsrO1xyXG4gICAgZGF0YS5pbmRleCA9IHRoaXMubGFzdE9wdGlvbkluZGV4O1xyXG4gICAgbGV0IG5ld09wdGlvbiA9IHRoaXMuZ2V0T3B0aW9uT2JqKGRhdGEpO1xyXG5cclxuICAgIHRoaXMub3B0aW9ucy5wdXNoKG5ld09wdGlvbik7XHJcbiAgICB0aGlzLnNvcnRlZE9wdGlvbnMucHVzaChuZXdPcHRpb24pO1xyXG5cclxuICAgIGlmIChyZXJlbmRlcikge1xyXG4gICAgICB0aGlzLnZpc2libGVPcHRpb25zQ291bnQrKztcclxuICAgICAgdGhpcy5hZnRlclNldE9wdGlvbnMoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlbW92ZU9wdGlvbihpbmRleCkge1xyXG4gICAgaWYgKCFpbmRleCAmJiBpbmRleCAhPSAwKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLm9wdGlvbnMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgIHRoaXMubGFzdE9wdGlvbkluZGV4LS07XHJcbiAgfVxyXG5cclxuICByZW1vdmVOZXdPcHRpb24oKSB7XHJcbiAgICBsZXQgbmV3T3B0aW9uID0gdGhpcy5nZXROZXdPcHRpb24oKTtcclxuXHJcbiAgICBpZiAobmV3T3B0aW9uKSB7XHJcbiAgICAgIHRoaXMucmVtb3ZlT3B0aW9uKG5ld09wdGlvbi5pbmRleCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBiZWZvcmVTZWxlY3ROZXdWYWx1ZSgpIHtcclxuICAgIGxldCBuZXdPcHRpb24gPSB0aGlzLmdldE5ld09wdGlvbigpO1xyXG4gICAgbGV0IG5ld0luZGV4ID0gbmV3T3B0aW9uLmluZGV4O1xyXG5cclxuICAgIHRoaXMubmV3VmFsdWVzLnB1c2gobmV3T3B0aW9uLnZhbHVlKTtcclxuICAgIHRoaXMuc2V0T3B0aW9uUHJvcChuZXdJbmRleCwgJ2lzQ3VycmVudE5ldycsIGZhbHNlKTtcclxuICAgIHRoaXMuc2V0T3B0aW9uUHJvcChuZXdJbmRleCwgJ2lzTmV3JywgdHJ1ZSk7XHJcblxyXG4gICAgLyoqIHVzaW5nIHNldFRpbWVvdXQgdG8gZml4IHRoZSBpc3N1ZSBvZiBkcm9wYm94IGdldHRpbmcgY2xvc2VkIG9uIHNlbGVjdCAqL1xyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgIHRoaXMuc2V0U2VhcmNoVmFsdWUoJycpO1xyXG4gICAgICB0aGlzLmZvY3VzU2VhcmNoSW5wdXQoKTtcclxuICAgIH0sIDApO1xyXG4gIH1cclxuXHJcbiAgc29ydE9wdGlvbnMob3B0aW9ucykge1xyXG4gICAgcmV0dXJuIG9wdGlvbnMuc29ydCgoYSwgYikgPT4ge1xyXG4gICAgICBpZiAoYi52YWx1ZSA9PT0gbm9uZU9wdGlvblZhbHVlICYmIGEudmFsdWUgIT09IG5vbmVPcHRpb25WYWx1ZSkge1xyXG4gICAgICAgIC8vIE5vbmUgaXMgYWx3YXlzIGZpcnN0XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgIH0gZWxzZSBpZiAoIWEuaXNTZWxlY3RlZCAmJiAhYi5pc1NlbGVjdGVkKSB7XHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgIH0gZWxzZSBpZiAoYS5pc1NlbGVjdGVkICYmICghYi5pc1NlbGVjdGVkIHx8IGEuaW5kZXggPCBiLmluZGV4KSkge1xyXG4gICAgICAgIHJldHVybiAtMTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gMTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBzb3J0T3B0aW9uc0dyb3VwKG9wdGlvbnMpIHtcclxuICAgIGxldCBzb3J0T3B0aW9ucyA9IHRoaXMuc29ydE9wdGlvbnM7XHJcbiAgICBvcHRpb25zID0gdGhpcy5zdHJ1Y3R1cmVPcHRpb25Hcm91cChvcHRpb25zKTtcclxuXHJcbiAgICBvcHRpb25zLmZvckVhY2goKGQpID0+IHtcclxuICAgICAgbGV0IGNoaWxkT3B0aW9ucyA9IGQub3B0aW9ucztcclxuICAgICAgZC5pc1NlbGVjdGVkID0gY2hpbGRPcHRpb25zLnNvbWUoKGUpID0+IGUuaXNTZWxlY3RlZCk7XHJcblxyXG4gICAgICBpZiAoZC5pc1NlbGVjdGVkKSB7XHJcbiAgICAgICAgc29ydE9wdGlvbnMoY2hpbGRPcHRpb25zKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgc29ydE9wdGlvbnMob3B0aW9ucyk7XHJcblxyXG4gICAgcmV0dXJuIHRoaXMuZGVzdHJ1Y3R1cmVPcHRpb25Hcm91cChvcHRpb25zKTtcclxuICB9XHJcblxyXG4gIGlzT3B0aW9uVmlzaWJsZShkLCBzZWFyY2hWYWx1ZSwgaGFzRXhhY3RPcHRpb24sIHZpc2libGVPcHRpb25Hcm91cHNNYXBwaW5nKSB7XHJcbiAgICBsZXQgdmFsdWUgPSBkLmxhYmVsLnRvTG93ZXJDYXNlKCk7XHJcbiAgICBsZXQgZGVzY3JpcHRpb24gPSBkLmRlc2NyaXB0aW9uO1xyXG4gICAgbGV0IGFsaWFzID0gZC5hbGlhcztcclxuICAgIGxldCBpc1Zpc2libGUgPSB2YWx1ZS5pbmRleE9mKHNlYXJjaFZhbHVlKSAhPT0gLTE7XHJcblxyXG4gICAgaWYgKGQuaXNHcm91cFRpdGxlKSB7XHJcbiAgICAgIGlzVmlzaWJsZSA9IHZpc2libGVPcHRpb25Hcm91cHNNYXBwaW5nW2QuaW5kZXhdO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChhbGlhcyAmJiAhaXNWaXNpYmxlKSB7XHJcbiAgICAgIGlzVmlzaWJsZSA9IGFsaWFzLmluZGV4T2Yoc2VhcmNoVmFsdWUpICE9PSAtMTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZGVzY3JpcHRpb24gJiYgIWlzVmlzaWJsZSkge1xyXG4gICAgICBpc1Zpc2libGUgPSBkZXNjcmlwdGlvbi50b0xvd2VyQ2FzZSgpLmluZGV4T2Yoc2VhcmNoVmFsdWUpICE9PSAtMTtcclxuICAgIH1cclxuXHJcbiAgICBkLmlzVmlzaWJsZSA9IGlzVmlzaWJsZTtcclxuXHJcbiAgICBpZiAoIWhhc0V4YWN0T3B0aW9uKSB7XHJcbiAgICAgIGhhc0V4YWN0T3B0aW9uID0gdmFsdWUgPT09IHNlYXJjaFZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIGlzVmlzaWJsZSxcclxuICAgICAgaGFzRXhhY3RPcHRpb24sXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgc3RydWN0dXJlT3B0aW9uR3JvdXAob3B0aW9ucykge1xyXG4gICAgbGV0IHJlc3VsdCA9IFtdO1xyXG4gICAgbGV0IGNoaWxkT3B0aW9ucyA9IHt9O1xyXG5cclxuICAgIC8qKiBnZXR0aW5nIGFsbCBncm91cCB0aXRsZSAqL1xyXG4gICAgb3B0aW9ucy5mb3JFYWNoKChkKSA9PiB7XHJcbiAgICAgIGlmIChkLmlzR3JvdXBUaXRsZSkge1xyXG4gICAgICAgIGxldCBjaGlsZEFycmF5ID0gW107XHJcbiAgICAgICAgZC5vcHRpb25zID0gY2hpbGRBcnJheTtcclxuICAgICAgICBjaGlsZE9wdGlvbnNbZC5pbmRleF0gPSBjaGlsZEFycmF5O1xyXG5cclxuICAgICAgICByZXN1bHQucHVzaChkKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgLyoqIGdldHRpbmcgYWxsIGdyb3VwIG9wdGlvbnMgKi9cclxuICAgIG9wdGlvbnMuZm9yRWFjaCgoZCkgPT4ge1xyXG4gICAgICBpZiAoZC5pc0dyb3VwT3B0aW9uKSB7XHJcbiAgICAgICAgY2hpbGRPcHRpb25zW2QuZ3JvdXBJbmRleF0ucHVzaChkKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIGRlc3RydWN0dXJlT3B0aW9uR3JvdXAob3B0aW9ucykge1xyXG4gICAgbGV0IHJlc3VsdCA9IFtdO1xyXG5cclxuICAgIG9wdGlvbnMuZm9yRWFjaCgoZCkgPT4ge1xyXG4gICAgICByZXN1bHQucHVzaChkKTtcclxuICAgICAgcmVzdWx0ID0gcmVzdWx0LmNvbmNhdChkLm9wdGlvbnMpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHNlcnZlclNlYXJjaChzZWFyY2hWYWx1ZSkge1xyXG4gICAgRG9tVXRpbHMucmVtb3ZlQ2xhc3ModGhpcy4kd3JhcHBlciwgJ2hhcy1uby1vcHRpb25zJyk7XHJcbiAgICBEb21VdGlscy5hZGRDbGFzcyh0aGlzLiR3cmFwcGVyLCAnc2VydmVyLXNlYXJjaGluZycpO1xyXG4gICAgdGhpcy5vblNlcnZlclNlYXJjaChzZWFyY2hWYWx1ZSwgdGhpcyk7XHJcbiAgfVxyXG5cclxuICAvKiogc3RhdGljIG1ldGhvZHMgLSBzdGFydCAqL1xyXG4gIHN0YXRpYyBpbml0KG9wdGlvbnMpIHtcclxuICAgIGxldCAkZWxlQXJyYXkgPSBvcHRpb25zLmVsZTtcclxuXHJcbiAgICBpZiAoISRlbGVBcnJheSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHNpbmdsZUVsZSA9IGZhbHNlO1xyXG5cclxuICAgIGlmICh0eXBlb2YgJGVsZUFycmF5ID09PSAnc3RyaW5nJykge1xyXG4gICAgICAkZWxlQXJyYXkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCRlbGVBcnJheSk7XHJcblxyXG4gICAgICBpZiAoISRlbGVBcnJheSkge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmICgkZWxlQXJyYXkubGVuZ3RoID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgJGVsZUFycmF5ID0gWyRlbGVBcnJheV07XHJcbiAgICAgIHNpbmdsZUVsZSA9IHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGluc3RhbmNlcyA9IFtdO1xyXG4gICAgJGVsZUFycmF5LmZvckVhY2goKCRlbGUpID0+IHtcclxuICAgICAgb3B0aW9ucy5lbGUgPSAkZWxlO1xyXG4gICAgICBpbnN0YW5jZXMucHVzaChuZXcgVmlydHVhbFNlbGVjdChvcHRpb25zKSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gc2luZ2xlRWxlID8gaW5zdGFuY2VzWzBdIDogaW5zdGFuY2VzO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIHJlc2V0Rm9ybShlKSB7XHJcbiAgICBsZXQgJGZvcm0gPSBlLnRhcmdldC5jbG9zZXN0KCdmb3JtJyk7XHJcblxyXG4gICAgaWYgKCEkZm9ybSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgJGZvcm0ucXVlcnlTZWxlY3RvckFsbCgnLnZzY29tcC13cmFwcGVyJykuZm9yRWFjaCgoJGVsZSkgPT4ge1xyXG4gICAgICAkZWxlLnBhcmVudEVsZW1lbnQudmlydHVhbFNlbGVjdC5yZXNldCgpO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgcmVzZXQoKSB7XHJcbiAgICB0aGlzLnZpcnR1YWxTZWxlY3QucmVzZXQoKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBzZXRWYWx1ZU1ldGhvZCh2YWx1ZSwgc2lsZW50Q2hhbmdlKSB7XHJcbiAgICB0aGlzLnZpcnR1YWxTZWxlY3Quc2V0VmFsdWVNZXRob2QodmFsdWUsIHNpbGVudENoYW5nZSk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgc2V0T3B0aW9uc01ldGhvZChvcHRpb25zKSB7XHJcbiAgICB0aGlzLnZpcnR1YWxTZWxlY3Quc2V0T3B0aW9uc01ldGhvZChvcHRpb25zKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBzZXREaXNhYmxlZE9wdGlvbnNNZXRob2Qob3B0aW9ucykge1xyXG4gICAgdGhpcy52aXJ0dWFsU2VsZWN0LnNldERpc2FibGVkT3B0aW9uc01ldGhvZChvcHRpb25zKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyB0b2dnbGVTZWxlY3RBbGwoaXNTZWxlY3RlZCkge1xyXG4gICAgdGhpcy52aXJ0dWFsU2VsZWN0LnRvZ2dsZUFsbE9wdGlvbnMoaXNTZWxlY3RlZCk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgaXNBbGxTZWxlY3RlZCgpIHtcclxuICAgIHJldHVybiB0aGlzLnZpcnR1YWxTZWxlY3QuaXNBbGxTZWxlY3RlZDtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBhZGRPcHRpb25NZXRob2QoZGF0YSkge1xyXG4gICAgdGhpcy52aXJ0dWFsU2VsZWN0LmFkZE9wdGlvbihkYXRhLCB0cnVlKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBnZXROZXdWYWx1ZU1ldGhvZCgpIHtcclxuICAgIHJldHVybiB0aGlzLnZpcnR1YWxTZWxlY3QuZ2V0TmV3VmFsdWUoKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyB2ZXJzaW9uKCkge1xyXG4gICAgcmV0dXJuIHZpcnR1YWxTZWxlY3RWZXJzaW9uO1xyXG4gIH1cclxuXHJcbiAgc3RhdGljIGdldERpc3BsYXlWYWx1ZU1ldGhvZCgpIHtcclxuICAgIHJldHVybiB0aGlzLnZpcnR1YWxTZWxlY3QuZ2V0RGlzcGxheVZhbHVlKCk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgb3Blbk1ldGhvZCgpIHtcclxuICAgIHJldHVybiB0aGlzLnZpcnR1YWxTZWxlY3Qub3BlbkRyb3Bib3goKTtcclxuICB9XHJcblxyXG4gIHN0YXRpYyBjbG9zZU1ldGhvZCgpIHtcclxuICAgIHJldHVybiB0aGlzLnZpcnR1YWxTZWxlY3QuY2xvc2VEcm9wYm94KCk7XHJcbiAgfVxyXG5cclxuICBzdGF0aWMgb25SZXNpemVNZXRob2QoKSB7XHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcudnNjb21wLXdyYXBwZXInKS5mb3JFYWNoKCgkZWxlKSA9PiB7XHJcbiAgICAgICRlbGUucGFyZW50RWxlbWVudC52aXJ0dWFsU2VsZWN0Lm9uUmVzaXplKCk7XHJcbiAgICB9KTtcclxuICB9XHJcbiAgLyoqIHN0YXRpYyBtZXRob2RzIC0gZW5kICovXHJcbn1cclxuXHJcbmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2V0JywgVmlydHVhbFNlbGVjdC5yZXNldEZvcm0pO1xyXG53aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncmVzaXplJywgVmlydHVhbFNlbGVjdC5vblJlc2l6ZU1ldGhvZCk7XHJcblxyXG53aW5kb3cuVmlydHVhbFNlbGVjdCA9IFZpcnR1YWxTZWxlY3Q7XHJcbiJdLCJzb3VyY2VSb290IjoiIn0=